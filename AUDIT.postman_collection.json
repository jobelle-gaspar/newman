{
	"info": {
		"_postman_id": "d49e406a-b1c4-4513-bace-2f92cfc670ea",
		"name": "AUDIT - Needs final test check",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Audit Keyword",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+dj@gmail.com",
									"description": "a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "(?earliest date is before given date) Keyword Audit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    //getWords() will get words from response, they should match given keywords",
									"    // inKeywordList() checks if response contains requested words ",
									"    pm.test(\"Response contains requested keywords\", function(){",
									"        pm.expect(inKeywordsList(getWords(responseBody.object.keywords), pm.request.url.query.toObject().keywords)).to.equal(true);",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//returns a list of returned words",
									"function getWords(responseKeywords)",
									"{",
									"    words =[];",
									"    for(let i =0; i< responseKeywords.length; ++i)",
									"    {",
									"        words.add(responseKeywords[i].word);",
									"    }",
									"    return words;",
									"}",
									"",
									"//will return false if requested string does not include the each word in 'words'",
									"function inKeywordsList(words, requestedKeywords)",
									"{",
									"    for(let i=0; i< words.length; ++i)",
									"    {",
									"        if(requestedKeywords.includes(words[i])==false)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    console.log(\"post date which failed\", keywords[i].referencedPosts[j].datePosted)",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=INSTAGRAM&since=2021-07-08&till=2021-11-08&username=larryb2&keywords=pet%2Cgluten%2Cmelbourne%2CMaximus&exactMatch=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-07-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "larryb2"
								},
								{
									"key": "keywords",
									"value": "pet%2Cgluten%2Cmelbourne%2CMaximus"
								},
								{
									"key": "exactMatch",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG No Keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{                                           ",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=INSTAGRAM&since=2021-08-08&till=2021-11-08&username=larryb2&keywords=&exactMtach=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-08-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "larryb2"
								},
								{
									"key": "keywords",
									"value": ""
								},
								{
									"key": "exactMtach",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid Platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{                                           ",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=FACEBOOK&since=2021-08-08&till=2021-11-08&username=larryb2&keywords=pet, Maximus&exactMtach=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "FACEBOOK"
								},
								{
									"key": "since",
									"value": "2021-08-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "larryb2"
								},
								{
									"key": "keywords",
									"value": "pet, Maximus"
								},
								{
									"key": "exactMtach",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Non Exsisting Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{                                           ",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=INSTAGRAM&since=2021-08-08&till=2021-11-08&username=brickwall356&keywords=pet, Maximus&exactMtach=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-08-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "brickwall356"
								},
								{
									"key": "keywords",
									"value": "pet, Maximus"
								},
								{
									"key": "exactMtach",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Non Existing SocialProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{                                           ",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=INSTAGRAM&since=2021-08-08&till=2021-11-08&username=brickwall&keywords=pet, Maximus&exactMtach=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-08-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "brickwall"
								},
								{
									"key": "keywords",
									"value": "pet, Maximus"
								},
								{
									"key": "exactMtach",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid ProfileStatus - Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{                                           ",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/keywords?platform=INSTAGRAM&since=2021-08-08&till=2021-11-08&username=lucaspawpaw&keywords=pet, Maximus&exactMtach=false",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"keywords"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-08-08"
								},
								{
									"key": "till",
									"value": "2021-11-08"
								},
								{
									"key": "username",
									"value": "lucaspawpaw"
								},
								{
									"key": "keywords",
									"value": "pet, Maximus"
								},
								{
									"key": "exactMtach",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit Profanity",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+dj@gmail.com",
									"description": "a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Audit Profanity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.keywords));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(keywords)",
									"{",
									"    total=0;",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        total+= keywords[i].matchCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/profanity?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=melbournejade",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"profanity"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid Platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.keywords));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(keywords)",
									"{",
									"    total=0;",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        total+= keywords[i].matchCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/profanity?platform=FACEBOOK&since=2021-05-15&till=2021-11-15&username=melbournejade",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"profanity"
							],
							"query": [
								{
									"key": "platform",
									"value": "FACEBOOK"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Non Exsisting Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.keywords));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(keywords)",
									"{",
									"    total=0;",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        total+= keywords[i].matchCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/profanity?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=melbournejade45",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"profanity"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade45"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Non Existing SocialProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.keywords));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(keywords)",
									"{",
									"    total=0;",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        total+= keywords[i].matchCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/profanity?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=brickwall",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"profanity"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "brickwall"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid ProfileStatus - Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.keywords, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.keywords));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(keywords)",
									"{",
									"    total=0;",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        total+= keywords[i].matchCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/profanity?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=lucaspawpaw",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"profanity"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "lucaspawpaw"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit Caption",
			"item": [
				{
					"name": "Audit Caption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.hashtags, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.hashtags));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(hashtags)",
									"{",
									"    total=0;",
									"    for(let i=0; i< hashtags.length; ++i)",
									"    {",
									"        total+= hashtags[i].postCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/caption?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=melbournejade",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"caption"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid Platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.hashtags, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.hashtags));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(hashtags)",
									"{",
									"    total=0;",
									"    for(let i=0; i< hashtags.length; ++i)",
									"    {",
									"        total+= hashtags[i].postCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/caption?platform=FACEBOOK&since=2021-05-15&till=2021-11-15&username=melbournejade",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"caption"
							],
							"query": [
								{
									"key": "platform",
									"value": "FACEBOOK"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG NonExcisting Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.hashtags, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.hashtags));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(hashtags)",
									"{",
									"    total=0;",
									"    for(let i=0; i< hashtags.length; ++i)",
									"    {",
									"        total+= hashtags[i].postCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/caption?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=melbournejade13",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"caption"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "melbournejade13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Non Excisting SocialProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.hashtags, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.hashtags));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(hashtags)",
									"{",
									"    total=0;",
									"    for(let i=0; i< hashtags.length; ++i)",
									"    {",
									"        total+= hashtags[i].postCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/caption?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=brickwall",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"caption"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "brickwall"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG Invalid ProfileStatus - Brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Selected influencer: \"+ pm.request.url.query.toObject().username);",
									"",
									"    // call is only allowed for instagram",
									"    pm.test(\"Given platform is valid and returned, (INSTAGRAM)\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(\"INSTAGRAM\")",
									"        pm.expect(pm.request.url.query.toObject().platform).to.equal(\"INSTAGRAM\")    ",
									"    })",
									"",
									"    pm.test(\"Returned username is the same as requested username\", function(){",
									"        pm.expect(pm.request.url.query.toObject().username).to.equal(responseBody.object.username)",
									"    })",
									"",
									"    pm.test(\"Posts are within given dates\", function(){",
									"        pm.expect(withinDates(responseBody.object.hashtags, ",
									"                              Date.parse(pm.request.url.query.toObject().since), ",
									"                              Date.parse(pm.request.url.query.toObject().till))).to.equal(true);",
									"    })",
									"",
									"    //maybe not needed ",
									"    pm.test(\"Total matches: \"+totalMatches(responseBody.object.hashtags));",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Influencer not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else if(responseBody.notes.missingProfile!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given influencer doesn't have an instagram account\")",
									"    }",
									"    else if (responseBody.notes.notInfluencer!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Given username does not belong to a warminfluencer or an influencer\" )",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//----------------Function",
									"",
									"// returns the total matches",
									"function totalMatches(hashtags)",
									"{",
									"    total=0;",
									"    for(let i=0; i< hashtags.length; ++i)",
									"    {",
									"        total+= hashtags[i].postCount;",
									"    }",
									"    return total;",
									"}",
									"",
									"//takes the returned keywordlist, a since and till date which neads to be parsed to Date",
									"function withinDates(keywords, since, till)",
									"{",
									"    for(let i=0; i< keywords.length; ++i)",
									"    {",
									"        // referencedPosts will not be empty if post contains word",
									"        if(keywords[i].referencedPosts.length!=0)",
									"        {",
									"            for(let j =0; j< keywords[i].referencedPosts.length; ++j)",
									"            {",
									"                //keywords[i].referencedPosts[j] == the post object which contains the datePosted and other post data",
									"                if( (Date.parse(keywords[i].referencedPosts[j].datePosted) < since) ||  //if before given since date",
									"                    (Date.parse(keywords[i].referencedPosts[j].datePosted) > till ) )   //if after given till date",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;    //got here means all posts are within given dates",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}audit/caption?platform=INSTAGRAM&since=2021-05-15&till=2021-11-15&username=lucaspawpaw",
							"host": [
								"{{test}}audit"
							],
							"path": [
								"caption"
							],
							"query": [
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "since",
									"value": "2021-05-15"
								},
								{
									"key": "till",
									"value": "2021-11-15"
								},
								{
									"key": "username",
									"value": "lucaspawpaw"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
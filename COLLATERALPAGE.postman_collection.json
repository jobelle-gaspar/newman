{
	"info": {
		"_postman_id": "477db3e7-f913-462e-af4d-16af75a0dae6",
		"name": "COLLATERAL PAGE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves document to be able to check that same fields are returned in \"Get page\"",
									"    pm.variables.set(\"document\", responseBody.object);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    //test only for documents connected to a campaign",
									"    //collaborationID, collaborationName, tagline",
									"    pm.test(\"Document is linked to a campaign and contains required fields: CollaborationID, collaborationName and tagline.\", ",
									"    function(){",
									"        pm.expect(responseBody.object.collaborationId).to.not.be.oneOf([undefined, null, \"\"]);",
									"        pm.expect(responseBody.object.collaborationName).to.not.be.oneOf([undefined, null, \"\"]);",
									"        pm.expect(responseBody.object.tagline).to.not.be.oneOf([undefined, null, \"\"]);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/603ec1682181374b0bbb970d",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603ec1682181374b0bbb970d"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //getPage() returns the page of given id",
									"    // pm.variables.get(\"document\") contains the documnet retrived in in \"Get Document\"",
									"    //will pass if pageId from the \"Get Document\" equals the pageId returned in the response",
									"    pm.test(\"Returned pageId exist in document\", function(){",
									"        pm.expect(getPage( pm.variables.get(\"document\").pages, responseBody.object.id).id).to.equal(responseBody.object.id);",
									"    })",
									"",
									"    pm.test(\"Type is the same for retuned page as it is in the document\", function(){",
									"        pm.expect(getPage( pm.variables.get(\"document\").pages, responseBody.object.id).type).to.equal(responseBody.object.type);",
									"    })",
									"",
									"    pm.test(\"dateCreated is the same for retuned page as it is in the document\", function(){",
									"        pm.expect(getPage( pm.variables.get(\"document\").pages, responseBody.object.id).dateCreated).to.equal(responseBody.object.dateCreated);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/603ec1682181374b0bbb970d/page/85ccab0c-0dd2-496c-875f-6a4fb5e4cf6a",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603ec1682181374b0bbb970d",
								"page",
								"85ccab0c-0dd2-496c-875f-6a4fb5e4cf6a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Get Page",
			"item": [
				{
					"name": "Hypetap Employee login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+dj@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page Not Assigned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.variables.get(\"document\")",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/e5934a10-f113-49f9-94cb-aaedb3574c7f",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"e5934a10-f113-49f9-94cb-aaedb3574c7f"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page Non Existing DocId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.variables.get(\"document\")",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(undefined);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/00/page/e5934a10-f113-49f9-94cb-aaedb3574c7f",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"00",
								"page",
								"e5934a10-f113-49f9-94cb-aaedb3574c7f"
							]
						}
					},
					"response": []
				},
				{
					"name": "BUG Get Page Non Existing PageId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.variables.get(\"document\")",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60374ac521813748db1499ba/page/00",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60374ac521813748db1499ba",
								"page",
								"00"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CONTENT Body - Update Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save original page",
									"    pm.variables.set(\"originalPage\",responseBody.object)",
									"    pm.environment.set(\"originalBody\",JSON.stringify(responseBody.object.body))",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/ead7d83c-c081-4f83-91d7-9724b1b9f2f1",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"ead7d83c-c081-4f83-91d7-9724b1b9f2f1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"CONTENT\",\n        \"body\":\"Spend minimal\",\n        \"numberOfPages\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/ead7d83c-c081-4f83-91d7-9724b1b9f2f1",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"ead7d83c-c081-4f83-91d7-9724b1b9f2f1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"responsePlain ={};",
									"orgPlain ={};",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //checks if returned body is the same as the one given in the PUT calls request",
									"    pm.test(\"The body was successfuly updated. \", function(){",
									"        pm.expect(responseBody.object.body).to.equal( pm.variables.get(\"requestBody\").page.body);",
									"    });",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(responseBody.object, responsePlain,\"t\")",
									"    unNestObj(pm.variables.get(\"originalPage\"), orgPlain,\"t\")",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //excludes the field 'dateModified'",
									"    pm.test(\"No other fields than 'dateModified' have been updated\", function(){",
									"        pm.expect(compareTwoPlainObjects(responsePlain, orgPlain)).to.equal(true);",
									"    })    ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"//excludes dateModifiedas this will be different for each object",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"dateModified\")  &&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj, root)",
									"{    ",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/ead7d83c-c081-4f83-91d7-9724b1b9f2f1",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"ead7d83c-c081-4f83-91d7-9724b1b9f2f1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"CONTENT\",\n        \"body\":{{originalBody}},\n        \"numberOfPages\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/ead7d83c-c081-4f83-91d7-9724b1b9f2f1",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"ead7d83c-c081-4f83-91d7-9724b1b9f2f1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"responsePlain ={}; ",
									"orgPlain ={};",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //checks if returned body is the same as the one given in the PUT calls request",
									"    pm.test(\"The body was successfuly updated. \", function(){",
									"        pm.expect(responseBody.object.body).to.equal( pm.variables.get(\"requestBody\").page.body);",
									"    });",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(responseBody.object, responsePlain,\"t\")",
									"    unNestObj(pm.variables.get(\"originalPage\"), orgPlain,\"t\")",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //excludes the field 'dateModified'",
									"    pm.test(\"No other fields than 'dateModified' have been updated\", function(){",
									"        pm.expect(compareTwoPlainObjects(responsePlain, orgPlain)).to.equal(true);",
									"    })    ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"//excludes dateModifiedas this will be different for each object",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"dateModified\")  &&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj, root)",
									"{    ",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/ead7d83c-c081-4f83-91d7-9724b1b9f2f1",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"ead7d83c-c081-4f83-91d7-9724b1b9f2f1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "INFLUENCER PlannedPost- Update Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save original page",
									"    pm.variables.set(\"originalPage\",responseBody.object)",
									"    pm.environment.set(\"originalPlannedPost\",JSON.stringify(responseBody.object.plannedPosts))",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/45730fd4-658b-42e8-a582-d6ecfdd2278e",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"45730fd4-658b-42e8-a582-d6ecfdd2278e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"INFLUENCER\",\n        \"plannedPosts\":[\n            {\n                \"platform\":\"INSTAGRAM\",\n                \"type\":\"STORY7\",\n                \"postCount\":2\n            },\n            {\n                \"platform\":\"TIKTOK\",\n                \"type\":\"STORY\",\n                \"postCount\":1\n            }]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/45730fd4-658b-42e8-a582-d6ecfdd2278e",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"45730fd4-658b-42e8-a582-d6ecfdd2278e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"responsePlain ={};",
									"orgPlain ={};",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //plannedPost are set to what's given in the PUT request",
									"    // so if plannedPost contains 2 items then the page will be updated to 2 as well ",
									"    //checks if returned body is the same as the one given in the PUT calls request",
									"    pm.test(\"plannedPost was successfuly updated, is set to same values as the request. \", function(){",
									"        pm.expect(listsAreEqual(responseBody.object.plannedPosts,pm.variables.get(\"requestBody\").page.plannedPosts)).to.equal(true);",
									"    });",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(responseBody.object, responsePlain,\"t\")",
									"    unNestObj(pm.variables.get(\"originalPage\"), orgPlain,\"t\")",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //excludes the field 'dateModified'",
									"    pm.test(\"No other fields than 'dateModified' have been updated\", function(){",
									"        pm.expect(compareTwoPlainObjects(responsePlain, orgPlain)).to.equal(true);",
									"    })    ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if list x and y are equal",
									"function listsAreEqual(response, request)",
									"{",
									"    for(let i =0; i< response.length; ++i)",
									"    {",
									"        if(response[i].platform!=request[i].platform)",
									"        {",
									"            return false;",
									"        }",
									"        else if(response[i].type!=request[i].type)",
									"        {",
									"            return false;",
									"        }",
									"        else if(response[i].postCount!=request[i].postCount)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"//excludes dateModifiedas this will be different for each object",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"dateModified\")  &&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj, root)",
									"{    ",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/45730fd4-658b-42e8-a582-d6ecfdd2278e",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"45730fd4-658b-42e8-a582-d6ecfdd2278e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"INFLUENCER\",\n        \"plannedPosts\": {{originalPlannedPost}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/45730fd4-658b-42e8-a582-d6ecfdd2278e",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"45730fd4-658b-42e8-a582-d6ecfdd2278e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"responsePlain ={}; ",
									"orgPlain ={};",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //plannedPost are set to what's given in the PUT request",
									"    // so if plannedPost contains 2 items then the page will be updated to 2 as well ",
									"    //checks if returned body is the same as the one given in the PUT calls request",
									"    pm.test(\"plannedPost was successfuly updated, is set to same values as the request. \", function(){",
									"        pm.expect(listsAreEqual(responseBody.object.plannedPosts,pm.variables.get(\"requestBody\").page.plannedPosts)).to.equal(true);",
									"    });",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(responseBody.object, responsePlain,\"t\")",
									"    unNestObj(pm.variables.get(\"originalPage\"), orgPlain,\"t\")",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //excludes the field 'dateModified'",
									"    pm.test(\"No other fields than 'dateModified' have been updated\", function(){",
									"        pm.expect(compareTwoPlainObjects(responsePlain, orgPlain)).to.equal(true);",
									"    })    ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"",
									"//returns true if list x and y are equal",
									"function listsAreEqual(response, request)",
									"{",
									"    for(let i =0; i< response.length; ++i)",
									"    {",
									"        if(response[i].platform!=request[i].platform)",
									"        {",
									"            return false;",
									"        }",
									"        else if(response[i].type!=request[i].type)",
									"        {",
									"            return false;",
									"        }",
									"        else if(response[i].postCount!=request[i].postCount)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"//excludes dateModifiedas this will be different for each object",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"dateModified\")  &&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj, root)",
									"{    ",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/45730fd4-658b-42e8-a582-d6ecfdd2278e",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"45730fd4-658b-42e8-a582-d6ecfdd2278e"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reorder Pages and Reverse",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pageIds =[];",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves the pageIds in the order they are in the document",
									"    // to be able to revert reorder call",
									"    pageIdsToList(responseBody.object.pages)    //adds pageId to list \"pageIds\"",
									"    pm.environment.set(\"originalPageOrder\", JSON.stringify(pageIds));",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"function pageIdsToList(pages)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        pageIds.add(pages[i].id);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e1d1ec6218137307ccfeb6a",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e1d1ec6218137307ccfeb6a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reorder Pages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// reorders in the way pages are given in request",
									"// if the last page is to be moved up one spot then all the previous pageIds needs to be given as well ",
									"//for the document to have the same order and for it to not move the last page to the top",
									"",
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"    pm.test(\"Status 200, returns document with id \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    //pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ordering\":[\"276733d3-b5c3-484c-97de-cb611a3fda8b\", \"07fd376c-7ed5-4682-9719-3ac69021fe1a\"]\n\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e1d1ec6218137307ccfeb6a/page/reorder",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e1d1ec6218137307ccfeb6a",
								"page",
								"reorder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves document to be able to check that same fields are returned in \"Get page\"",
									"    pm.variables.set(\"document\", responseBody.object);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    pm.test(\"Pages have been reorderd successfuly, they are in the same order as the given request\", function(){",
									"        pm.expect(pagesAreReordered( pm.variables.get(\"requestBody\").ordering , responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//uses pageId list given in the request in PUT /reorder to check if returned document",
									"// has it's pageId's in the same order",
									"//(pages are order in the exact order that they are given in the PUT request",
									"function pagesAreReordered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e1d1ec6218137307ccfeb6a",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e1d1ec6218137307ccfeb6a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reverse Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// reorders in the way pages are given in request",
									"// if the last page is to be moved up one spot then all the previous pageIds needs to be given as well ",
									"//for the document to have the same order and for it to not move the last page to the top",
									"",
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"requestBody\",requestBody)",
									"",
									"    pm.test(\"Status 200, returns document with id \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //lastEdited by is sett to current session user",
									"    //pm.test(\"Last edited by \"+ responseBody.object.lastEditedBy.username)",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ordering\":{{originalPageOrder}}\n\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e1d1ec6218137307ccfeb6a/page/reorder",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e1d1ec6218137307ccfeb6a",
								"page",
								"reorder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves document to be able to check that same fields are returned in \"Get page\"",
									"    pm.variables.set(\"document\", responseBody.object);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    //checks the pageId order from the original document against the response",
									"    //will pass if the are the same, page order has been reversed",
									"    pm.test(\"Pages have been reorderd successfuly, they are in the same order as the original document\", function(){",
									"        pm.expect(pagesAreReordered( JSON.parse(pm.environment.get(\"originalPageOrder\")) , responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//uses pageId list given in the request in PUT /reorder to check if returned document",
									"// has it's pageId's in the same order",
									"//(pages are order in the exact order that they are given in the PUT request",
									"function pagesAreReordered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e1d1ec6218137307ccfeb6a",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e1d1ec6218137307ccfeb6a"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Duplicate Page Add After",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/duplicate/8c16f3cc-e626-49cf-83b5-ea2728050b57?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"duplicate",
								"8c16f3cc-e626-49cf-83b5-ea2728050b57"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG Duplicate Page Add Before (added 2 indexes before)",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/duplicate/895c21b8-cba1-445e-a0f2-29b07064a550?insertAfter=false",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"duplicate",
								"895c21b8-cba1-445e-a0f2-29b07064a550"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks if the duplicate page is before the original page, (index should be the same as the originals)",
									"    ",
									"    pm.test(\"BUG - Duplicate exist and is placed before the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1);",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  (findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))-1))",
									"    })",
									"",
									"",
									"    pm.test(\"BUG - Original page exist and is placed after the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))+1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG DISCLAIMER - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60bd78a021813756b4c143fe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60bd78a021813756b4c143fe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60bd78a021813756b4c143fe/page/duplicate/5f088990-81d5-46ac-80b1-703a730befeb?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60bd78a021813756b4c143fe",
								"page",
								"duplicate",
								"5f088990-81d5-46ac-80b1-703a730befeb"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60bd78a021813756b4c143fe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60bd78a021813756b4c143fe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60bd78a021813756b4c143fe/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60bd78a021813756b4c143fe",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60bd78a021813756b4c143fe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60bd78a021813756b4c143fe"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG CONTACTS - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/duplicate/b3673259-d2f8-4339-b842-449334e53c06?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"duplicate",
								"b3673259-d2f8-4339-b842-449334e53c06"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG COVER - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60dbf260218137029e13cc51",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60dbf260218137029e13cc51"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60dbf260218137029e13cc51/page/duplicate/e4eed5df-6f36-48e9-9833-7ba262a2ee35?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60dbf260218137029e13cc51",
								"page",
								"duplicate",
								"e4eed5df-6f36-48e9-9833-7ba262a2ee35"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60dbf260218137029e13cc51",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60dbf260218137029e13cc51"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60dbf260218137029e13cc51/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60dbf260218137029e13cc51",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60dbf260218137029e13cc51",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60dbf260218137029e13cc51"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG BRAND - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/duplicate/4f94ba0b-c4ba-4018-9568-a8436582e210?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"duplicate",
								"4f94ba0b-c4ba-4018-9568-a8436582e210"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG END_HYPETAP - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/duplicate/69060cf6-e140-4f7b-8f80-3d2ef03c7192?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"duplicate",
								"69060cf6-e140-4f7b-8f80-3d2ef03c7192"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG END_DASHBOARD - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/616656c308d15d2c34f58a5c",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"616656c308d15d2c34f58a5c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save request to check if any updates were made",
									"    pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/616656c308d15d2c34f58a5c/page/duplicate/5bd33661-e323-4d9b-9305-3e1e1efc863b?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"616656c308d15d2c34f58a5c",
								"page",
								"duplicate",
								"5bd33661-e323-4d9b-9305-3e1e1efc863b"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"duplicatePage ={};",
									"originalPage ={};",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate exist and is placed after the original page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")) +1 )",
									"    })",
									"",
									"    pm.test(\"Original page exist and is placed before the duplicate page.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\"))).to.not.equal(-1)",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"pageIdToDuplicate\")))",
									"                    .to.equal(  findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))-1)",
									"    })",
									"",
									"    //unNestObj() will \"untangle\" the two objects and return the key and values withou any structure",
									"    //is done so that th response object and the original response/documetn values can be compared ",
									"    unNestObj(findPage( responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\")), duplicatePage);",
									"    unNestObj(findPage(responseBody.object.pages , pm.variables.get(\"pageIdToDuplicate\")), originalPage);",
									"",
									"",
									"    //pass if the two objects, original response and current/new response is equal",
									"    //type is excluded since original and current response should have different types after the PUT call",
									"    // all fields containing dateModified are exluded as well as this would have been updated for the altered document",
									"",
									"    pm.test(\"The duplicate page has the same fields and values as the original.\", function(){",
									"        pm.expect(compareTwoPlainObjects(duplicatePage, originalPage)).to.equal(true);",
									"    }) ",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"//returns page if found",
									"function findPage(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"//compares two object with the same fields and structure",
									"//returns true if the value for the same key match each other",
									"",
									"function compareTwoPlainObjects(object1,object2)",
									"{    ",
									"",
									"    Object.entries(object1).forEach((entry) => ",
									"    {",
									"        const [key, value] = entry;",
									"        //console.log(\"1\"+ key,object1[key])",
									"        //console.log(\"2\"+ key,object2[key])",
									"",
									"        if( (key!=\"id\")&&(object1[key]!= object2[key]))",
									"        {",
									"            //console.log(\"test object key\",object1[key])",
									"            //console.log(\"test object key\",object2[key])",
									"            //console.log(\"test key\",key)",
									"",
									"            return false;",
									"        }",
									"    });",
									"    return true;",
									"}",
									"",
									"// to creat an object which is not nested ",
									"function unNestObj(object,newObj)",
									"{    ",
									"    root=\"\";",
									"    Object.entries(object).forEach((entry) => {",
									"    const [key, value] = entry;",
									"",
									"        //to avoid function from failing due to null values",
									"        if(value!=null)",
									"        {",
									"            if(typeof value === \"object\")",
									"            {",
									"                root=key;",
									"                unNestObj(value, newObj ,root);",
									"            }",
									"            else",
									"            {",
									"                //to stop function from overwriting fileds with same name, (ex username)",
									"                if(newObj.hasOwnProperty(key)==true) ",
									"                {",
									"                    newObj[root+key]= value;  //+\".\"+",
									"                }",
									"                else",
									"                {",
									"                    newObj[key]= value;",
									"                }",
									"",
									"            }",
									"        } ",
									"    });",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/616656c308d15d2c34f58a5c",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"616656c308d15d2c34f58a5c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" successfuly deleted.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/616656c308d15d2c34f58a5c/page/{{newPageIdDuplicate}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"616656c308d15d2c34f58a5c",
								"page",
								"{{newPageIdDuplicate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"//pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    //checks that the created/duplicated page exist in the collateral document",
									"    //findPageIndex() returns index of page if it's found otherwise -1",
									"    //second expect checks that the index of new page is after original page -> duplicate page index = orginal page index +1",
									"    ",
									"    pm.test(\"Duplicate page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"newPageIdDuplicate\"))).to.equal(-1)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/616656c308d15d2c34f58a5c",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"616656c308d15d2c34f58a5c"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG TALENT CARD - Duplicate Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/601252312181376988063413",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"601252312181376988063413"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.variables.set(\"pageIdToDuplicate\",pm.request.url.path[5])",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"newPageIdDuplicate\",responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. duplicating pageId \" + pm.request.url.path[5]);",
									"    pm.test(\"Duplicated pageId: \" + responseBody.object.id, function(){",
									"        pm.expect(responseBody.object).to.not.equal(null)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \" +  responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\")",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/601252312181376988063413/page/duplicate/92cab853-575e-46a5-9b01-7bbd2cc10fe3?insertAfter=true",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"601252312181376988063413",
								"page",
								"duplicate",
								"92cab853-575e-46a5-9b01-7bbd2cc10fe3"
							],
							"query": [
								{
									"key": "insertAfter",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    pm.test(\"Document is unchanged\", function(){",
									"        pm.expect(pm.variables.get(\"originalDocument\")).to.deep.eq(responseBody.object)",
									"    });",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/601252312181376988063413",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"601252312181376988063413"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Content Assets",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/61662e2508d15d2c34ead067",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"61662e2508d15d2c34ead067"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update content Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"requestUpdate\", requestBody);",
									"    pm.variables.set(\"contentId\", pm.request.url.path[5])",
									"",
									"",
									"    pm.test(\"Status 200, updated content with the id \" + pm.request.url.path[5])",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"asset\":\n    {\n        \"assetType\": \"CONTENT\",\n        \"emoji\": \"\",\n        \"title\": \"\",\n        \"content\": \"\",\n        \"tag\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/61662e2508d15d2c34ead067/page/asset/64a2cd69-9e3d-4064-aff2-92fc347cb1aa",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"61662e2508d15d2c34ead067",
								"page",
								"asset",
								"64a2cd69-9e3d-4064-aff2-92fc347cb1aa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // findContent() returns content object if it finds one with the given id ",
									"    pm.test(\"Document contains the asset content which was to be updated\", function(){",
									"        pm.expect(findContent(responseBody.object.pages, pm.variables.get(\"contentId\"))).to.not.be.oneOf([undefined, null]);",
									"    })",
									"",
									"    //checks if fields from the request, from PUT call, contains the same values in the returned response ",
									"    pm.test(\"Update was successful, fields have been updated.\", function(){",
									"        pm.expect(updateSuccessful(findContent(responseBody.object.pages, pm.variables.get(\"contentId\")), ",
									"                                pm.variables.get(\"requestUpdate\").asset )).to.equal(true);",
									"    })",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//iterates over pages in a document and checks if the have an asset which match the given contentId",
									"// will return the asset object if it finds a match ",
									"function findContent(pages, contentId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        //contents is a list with assets",
									"        if(pages[i].contents!=undefined)",
									"        {",
									"            for(let j=0; j<pages[i].contents.length; ++j)",
									"            {",
									"                if(pages[i].contents[j].id==contentId)",
									"                {",
									"                    return pages[i].contents[j];        //returns asset object which corresponds to given contentId",
									"                }    ",
									"            }",
									"        }",
									"    }",
									"}",
									"//returns true if fileds given in update request has the same values as returned asset",
									"function updateSuccessful(newAsset, requestedUpdates)",
									"{",
									"    updatedFields = Object.keys(requestedUpdates);",
									"",
									"    for(let i=0; i<updatedFields.length; ++i)",
									"    {",
									"",
									"        //contents is a list with assets",
									"        if(requestedUpdates[updatedFields[i]]!=newAsset[updatedFields[i]])",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/61662e2508d15d2c34ead067",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"61662e2508d15d2c34ead067"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, updated content with the id \" + pm.request.url.path[5])",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"originalContent = findContent( pm.variables.get(\"originalDocument\").pages,  pm.variables.get(\"contentId\"));",
									"",
									"pm.environment.set(\"assetType\", originalContent.assetType)",
									"pm.environment.set(\"emoji\", originalContent.emoji)",
									"pm.environment.set(\"title\", originalContent.title)",
									"pm.environment.set(\"content\", originalContent.content)",
									"pm.environment.set(\"tag\", originalContent.tag)",
									"",
									"",
									"",
									"function findContent(pages, contentId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        //contents is a list with assets",
									"        if(pages[i].contents!=undefined)",
									"        {",
									"            for(let j=0; j<pages[i].contents.length; ++j)",
									"            {",
									"                if(pages[i].contents[j].id==contentId)",
									"                {",
									"                    return pages[i].contents[j];        //returns asset object which corresponds to given contentId",
									"                }    ",
									"            }",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"asset\":\n    {\n        \"assetType\": \"{{assetType}}\",\n        \"emoji\": null,\n        \"title\": \"Campaign Report \",\n        \"content\": \"7 Elevens\",\n        \"tag\": null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/61662e2508d15d2c34ead067/page/asset/64a2cd69-9e3d-4064-aff2-92fc347cb1aa",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"61662e2508d15d2c34ead067",
								"page",
								"asset",
								"64a2cd69-9e3d-4064-aff2-92fc347cb1aa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // findContent() returns content object if it finds one with the given id ",
									"    pm.test(\"Document contains the asset content which was to be updated\", function(){",
									"        pm.expect(findContent(responseBody.object.pages, pm.variables.get(\"contentId\"))).to.not.be.oneOf([undefined, null]);",
									"    })",
									"",
									"    //checks if fields from the request, from PUT call, contains the same values in the returned response ",
									"    pm.test(\"Update was successful, original documnets asset is the same as updated documents asset.\", function(){",
									"        pm.expect(updateSuccessful(findContent(responseBody.object.pages, pm.variables.get(\"contentId\")), ",
									"                               findContent(pm.variables.get(\"originalDocument\").pages, pm.variables.get(\"contentId\")) )).to.equal(true);",
									"    })",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//iterates over pages in a document and checks if the have an asset which match the given contentId",
									"// will return the asset object if it finds a match ",
									"function findContent(pages, contentId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        //contents is a list with assets",
									"        if(pages[i].contents!=undefined)",
									"        {",
									"            for(let j=0; j<pages[i].contents.length; ++j)",
									"            {",
									"                if(pages[i].contents[j].id==contentId)",
									"                {",
									"                    return pages[i].contents[j];        //returns asset object which corresponds to given contentId",
									"                }    ",
									"            }",
									"        }",
									"    }",
									"}",
									"//returns true if fileds given in update request has the same values as returned asset",
									"function updateSuccessful(newAsset, requestedUpdates)",
									"{",
									"    updatedFields = Object.keys(requestedUpdates);",
									"",
									"    for(let i=0; i<updatedFields.length; ++i)",
									"    {",
									"",
									"        //contents is a list with assets",
									"        if(requestedUpdates[updatedFields[i]]!=newAsset[updatedFields[i]])",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/61662e2508d15d2c34ead067",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"61662e2508d15d2c34ead067"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create and Update Influencer Matrix",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"matrixPageId\", responseBody.object.id)",
									"",
									"    pm.test(\"Status 200, returns new matrix page with id \" + responseBody.object.id);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"INFLUENCER_MATRIX\",\n        \"index\":\"2\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Headings To Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"pageHeadings\", requestBody.page.headings)",
									"    pm.test(\"Status 200. Adding headings to page.\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"INFLUENCER_MATRIX\",\n        \"headings\":[\"heading 1\",\"heading 2\",\"heading 3\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Influencer To Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"addedInfluencer1\", requestBody)",
									"    pm.test(\"Status 200. Added influencer '\"+ requestBody.username+ \"' to matrix\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"ourcozyabode_\",\n    \"index\":0,\n    \"checked\":[false, false, false]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}/matrix",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}",
								"matrix"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Influencer To Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"addedInfluencer2\", requestBody)",
									"    ",
									"    pm.test(\"Status 200. Added influencer '\"+ requestBody.username+ \"' to matrix\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"flex_mami\",\n    \"index\":0,\n    \"checked\":[false, false, false]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}/matrix",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}",
								"matrix"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //check if headings are the same as requested in PUT call",
									"    pm.test(\"Page contains requested headings: \" + pm.variables.get(\"pageHeadings\"), function(){",
									"        pm.expect(responseBody.object.headings).to.eql(pm.variables.get(\"pageHeadings\"));",
									"    })",
									"",
									"    //findInfluencer() returns influencer object matching given username",
									"    // test will pass if found influencer objects 'checked' field match the checked field from the POST call",
									"    pm.test(\"Page contains influencer \"+pm.variables.get(\"addedInfluencer1\").username+\" and given fields in request match returned page\")",
									"        pm.expect(getInfluencer(responseBody.object.influencers, pm.variables.get(\"addedInfluencer1\").username)",
									"                                .checked).to.eql(pm.variables.get(\"addedInfluencer1\").checked);",
									"",
									"    //same test for the second added influencer",
									"    pm.test(\"Page contains influencer \"+pm.variables.get(\"addedInfluencer2\").username+\" and given fields in request match returned page\")",
									"        pm.expect(getInfluencer(responseBody.object.influencers, ",
									"                                pm.variables.get(\"addedInfluencer2\").username).checked)",
									"                .to.eql(pm.variables.get(\"addedInfluencer2\").checked);",
									"",
									"    //if both have the same index then the last added influencer will the one who's on the gioven index",
									"    //the first added influencer will be placed after since the lates call changes the order",
									"    if(pm.variables.get(\"addedInfluencer2\").index==pm.variables.get(\"addedInfluencer1\").index)",
									"    {",
									"        //last added influencer will be on the requested index",
									"        pm.test(pm.variables.get(\"addedInfluencer2\").username +\" was added last and is at the requested index \"+ pm.variables.get(\"addedInfluencer2\").index, function(){",
									"            pm.expect(responseBody.object.influencers.indexOf(getInfluencer(responseBody.object.influencers, ",
									"                                                                            pm.variables.get(\"addedInfluencer2\").username)))",
									"                     .to.eql(pm.variables.get(\"addedInfluencer2\").index);",
									"        })",
									"",
									"        pm.test(pm.variables.get(\"addedInfluencer1\").username +\" is placed after the last added influencer.\", function(){",
									"            pm.expect(responseBody.object.influencers.indexOf(getInfluencer(responseBody.object.influencers, ",
									"                                                                            pm.variables.get(\"addedInfluencer1\").username)))",
									"                     .to.eql(pm.variables.get(\"addedInfluencer1\").index+1);",
									"        })",
									"",
									"    }",
									"    //if different indexes are given then they should both be at the given index in POST call",
									"    else",
									"    {",
									"",
									"        //last added influencer will be on the requested index",
									"        pm.test(pm.variables.get(\"addedInfluencer2\").username +\" was added last and is at the requested index \"+ pm.variables.get(\"addedInfluencer2\").index, function(){",
									"            pm.expect(responseBody.object.influencers.indexOf(getInfluencer(responseBody.object.influencers, ",
									"                                                                            pm.variables.get(\"addedInfluencer2\").username)))",
									"                     .to.eql(pm.variables.get(\"addedInfluencer2\").index);",
									"        })",
									"",
									"        pm.test(pm.variables.get(\"addedInfluencer1\").username +\" was added first and is at the requested index \"+ pm.variables.get(\"addedInfluencer1\").index, function(){",
									"            pm.expect(responseBody.object.influencers.indexOf(getInfluencer(responseBody.object.influencers, ",
									"                                                                            pm.variables.get(\"addedInfluencer1\").username)))",
									"                     .to.eql(pm.variables.get(\"addedInfluencer1\").index);",
									"        })",
									"",
									"    }",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns influencer object",
									"function getInfluencer(influencers, username)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        if(influencers[i].details.username==username)",
									"        {",
									"            //console.log(influencers[i])",
									"            return influencers[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Checked List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"updateInfluencerRequest\", requestBody)",
									"    pm.variables.set(\"influencerName\",pm.request.url.path[6])",
									"    pm.test(\"Status 200. Requested to update '\"+pm.request.url.path[6] +\"'.\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"checked\":[true,false,true]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}/matrix/ourcozyabode_/",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}",
								"matrix",
								"ourcozyabode_",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //findInfluencer() returns influencer object matching given username",
									"    // test will pass if found influencer objects 'checked' field match the checked field from the PUT call",
									"    pm.test(\"Page contains influencer \"+pm.variables.get(\"influencerName\")+\" and checked fields are updated successfully\")",
									"        pm.expect(getInfluencer(responseBody.object.influencers, pm.variables.get(\"influencerName\")).checked)",
									"                .to.eql(pm.variables.get(\"updateInfluencerRequest\").checked);",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"",
									"}",
									"",
									"//returns influencer object",
									"function getInfluencer(influencers, username)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        if(influencers[i].details.username==username)",
									"        {",
									"            //console.log(influencers[i])",
									"            return influencers[i];",
									"        }",
									"    }",
									"    return null;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" was successfuly deleted.\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/{{matrixPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"{{matrixPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    ",
									"    //findPageIndex() returns index of page if it's found otherwise -1    ",
									"    pm.test(\"Page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"matrixPageId\"))).to.equal(-1)",
									"    })",
									"",
									"    pm.test(\"Document contains the same pageIds in the same order as originla document\", function(){",
									"        pm.expect(getPageIds(responseBody.object.pages)).to.eql(getPageIds(pm.variables.get(\"originalDocument\").pages));",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"function getPageIds(pages)",
									"{",
									"    ids = [];",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        ids.add(pages[i].id);",
									"    }",
									"    return ids;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Update Matrix Non Existing Influencer",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Influencer Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"influencerUsernames =[];",
									"",
									" if(pm.response.code==200)",
									"{",
									"    //save influencers usernames to check if given username in ",
									"    //following PUT call",
									"    getUsernames(responseBody.object.influencers);",
									"    pm.variables.set(\"influencerUsernames\", influencerUsernames);",
									"    pm.variables.set(\"orginalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is  INFLUENCER_MATRIX\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    })",
									"",
									"}  ",
									"",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns influencer object",
									"function getUsernames(influencers)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        influencerUsernames.add(influencers[i].details.username);",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Influencer Matrix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"updateInfluencerRequest\", requestBody)",
									"    pm.variables.set(\"influencerName\",pm.request.url.path[6])",
									"    ",
									"    pm.test(\"Status 200. Requested to update '\"+pm.request.url.path[6] +\"'.\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Influencer doesn't exist in the INFLUENCER MATRIX page\", function(){",
									"        pm.expect(pm.variables.get(\"influencerUsernames\")).to.not.contain(pm.request.url.path[6] )",
									"    })",
									"",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"         pm.test(\"Status 400. userMessage: \"+responseBody.notes.userMessage );",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"checked\":[true,false,true]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6010bdd1218137698805e7a6/page/62a36e11-0e8d-4120-86a9-a67c3db150e9/matrix/melbournejade/",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6010bdd1218137698805e7a6",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9",
								"matrix",
								"melbournejade",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Influencer Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is  INFLUENCER_MATRIX\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    })",
									"",
									"    pm.test(\"Page has not been updated\", function(){",
									"        pm.expect(responseBody.object).to.deep.eq(pm.variables.get(\"orginalPage\"))",
									"    })",
									"",
									"}  ",
									"",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns influencer object",
									"function getInfluencer(influencers, username)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        if(influencers[i].details.username==username)",
									"        {",
									"            //console.log(influencers[i])",
									"            return influencers[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Refresh Page Data",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//dateDataRefreshed",
									"",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Page is refreshed\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/608ba65c2181373377fa6c45/page/d0c03419-6c7d-47c8-b002-df3faeead710/refresh",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"608ba65c2181373377fa6c45",
								"page",
								"d0c03419-6c7d-47c8-b002-df3faeead710",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    //using \"dateNow\" from pre-requested scripts, (todays date), to check if updated pages",
									"    // field \"dateDataRefreshed\" is set to todays date",
									"    dateRegex = new RegExp(\"(\"+pm.variables.get(\"dateNow\")+\")\")",
									"    ",
									"    pm.test(\"Status 200. dateDataRefreshed is set to current date:  \" + responseBody.object.dateDataRefreshed, function(){",
									"        pm.expect(dateRegex.test(responseBody.object.dateDataRefreshed)).to.equal(true)",
									"    });",
									"",
									"   ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}",
									"",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/608ba65c2181373377fa6c45/page/d0c03419-6c7d-47c8-b002-df3faeead710",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"608ba65c2181373377fa6c45",
								"page",
								"d0c03419-6c7d-47c8-b002-df3faeead710"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//sets variable \"dateNow\"  with current date",
							"//GET records requires a date range",
							"month = '' + (new Date().getMonth() + 1)",
							"if(month.length<2 )",
							"{",
							"    month='0'+month;",
							"}",
							"",
							"",
							"day = ''+ (new Date().getDate() )",
							"if(day.length<2 )",
							"{",
							"    day='0'+ day;",
							"",
							"}",
							"date = [ new Date().getFullYear(), month, day].join('-');",
							"",
							"pm.variables.set(\"dateNow\", date);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add POST_HIGHLIGHT_LIKES Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pageIds =[];",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"    pageIdsToList(responseBody.object.pages)",
									"    pm.variables.set(\"originalPageOrder\",pageIds);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"",
									"function pageIdsToList(pages)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        pageIds.add(pages[i].id);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add REPORT_POST_HIGHLIGHT Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"newPageRequest\", requestBody)",
									"    pm.variables.set(\"reportHighlightPageId\", responseBody.object.id)",
									"",
									"    pm.test(\"Status 200, returns new report highlight page with id \" + responseBody.object.id);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_POST_HIGHLIGHT\",\n        \"index\":13,\n        \"reportPageSubtype\":\"POST_HIGHLIGHT_LIKES\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"   ",
									"       ",
									"    //findPageIndex() returns index of page if it's found otherwise -1    ",
									"    pm.test(\"Page has been added at given index: \"+pm.variables.get(\"newPageRequest\").page.index, function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"reportHighlightPageId\"))).to.equal(pm.variables.get(\"newPageRequest\").page.index)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns page object which corresponds to given pageId.",
									"//returns null if not found",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"",
									"function pagesAreInSameOrdered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Page type is same as requested in POST call\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(pm.variables.get(\"newPageRequest\").page.type)",
									"    });",
									"    ",
									"    //checks if a bigStats with given name exits",
									"    //if a bigStats is found then it will check if any of bigStats fields are empty",
									"    pm.test(\"Contains bigStats 'Likes over average' and 'Likes'. bigStats contains required fields\", function(){",
									"        pm.expect(bigStatsContainsName(responseBody.object.bigStats, \"Likes over average\")).to.equal(true);",
									"        pm.expect(bigStatsContainsName(responseBody.object.bigStats, \"Likes\")).to.equal(true)",
									"    })",
									"",
									"    pm.test(\"Page has a tag for 'Top post' and 'Likes'\", function(){",
									"        pm.expect(responseBody.object.tag).to.equal(\"Top post\");",
									"        pm.expect(responseBody.object.secondaryTag).to.equal(\"Likes\");",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function bigStatsContainsName(bigStats, name)",
									"{",
									"    count=0;",
									"    for(let i =0; i< bigStats.length; ++i)",
									"    {",
									"",
									"        if(bigStats[i].name==name)",
									"        {",
									"            count+=1;",
									"            if( (isEmpty(bigStats[i].statType)==true) ||",
									"                (isEmpty(bigStats[i].value)==true) || ",
									"                (isEmpty(bigStats[i].icon)==true) ||",
									"                (isEmpty(bigStats[i].assetType)==true) ) ",
									"            {",
									"                return false;",
									"            }",
									"        }  ",
									"            ",
									"",
									"    }",
									"    if(count>0)",
									"    {",
									"        return true;",
									"    }",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page/{{reportHighlightPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page",
								"{{reportHighlightPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" was successfuly deleted.\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page/{{reportHighlightPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page",
								"{{reportHighlightPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"   ",
									"       ",
									"    //findPageIndex() returns index of page if it's found otherwise -1    ",
									"    pm.test(\"Page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"reportHighlightPageId\"))).to.equal(-1)",
									"    })",
									"",
									"    //checks the pageId order from the original document against the response",
									"    //will pass if the are the same, page order has been reversed",
									"    pm.test(\"Document contains the same pages as the original document\", function(){",
									"        pm.expect(pagesAreInSameOrdered( pm.variables.get(\"originalPageOrder\") , responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns page object which corresponds to given pageId.",
									"//returns null if not found",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"",
									"function pagesAreInSameOrdered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add POST_HIGHLIGHT_SAVES Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pageIds =[];",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"originalDocument\", responseBody.object);",
									"    pageIdsToList(responseBody.object.pages)",
									"    pm.variables.set(\"originalPageOrder\",pageIds);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"",
									"function pageIdsToList(pages)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        pageIds.add(pages[i].id);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add REPORT_POST_HIGHLIGHT Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"newPageRequest\", requestBody)",
									"    pm.variables.set(\"reportHighlightPageId\", responseBody.object.id)",
									"",
									"    pm.test(\"Status 200, returns new report highlight page with id \" + responseBody.object.id);",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_POST_HIGHLIGHT\",\n        \"index\":13,\n        \"reportPageSubtype\":\"POST_HIGHLIGHT_SAVES\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"   ",
									"       ",
									"    //findPageIndex() returns index of page if it's found otherwise -1    ",
									"    pm.test(\"Page has been added at given index: \"+pm.variables.get(\"newPageRequest\").page.index, function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"reportHighlightPageId\"))).to.equal(pm.variables.get(\"newPageRequest\").page.index)",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns page object which corresponds to given pageId.",
									"//returns null if not found",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"",
									"function pagesAreInSameOrdered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Page type is same as requested in POST call\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(pm.variables.get(\"newPageRequest\").page.type)",
									"    });",
									"    ",
									"    //",
									"    pm.test(\"Contains bigStats 'Saves over average' and 'Saves'. bigStats contains required fields\", function(){",
									"        pm.expect(bigStatsContainsName(responseBody.object.bigStats, \"Saves over average\")).to.equal(true);",
									"        pm.expect(bigStatsContainsName(responseBody.object.bigStats, \"Saves\")).to.equal(true)",
									"    })",
									"",
									"    pm.test(\"Page has a tag for 'Top post' and 'Saves'\", function(){",
									"        pm.expect(responseBody.object.tag).to.equal(\"Top post\");",
									"        pm.expect(responseBody.object.secondaryTag).to.equal(\"Saves\");",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function bigStatsContainsName(bigStats, name)",
									"{",
									"    count=0;",
									"    for(let i =0; i< bigStats.length; ++i)",
									"    {",
									"",
									"        if(bigStats[i].name==name)",
									"        {",
									"            count+=1;",
									"            if( (isEmpty(bigStats[i].statType)==true) ||",
									"                (isEmpty(bigStats[i].value)==true) || ",
									"                (isEmpty(bigStats[i].icon)==true) ||",
									"                (isEmpty(bigStats[i].assetType)==true) ) ",
									"            {",
									"                return false;",
									"            }",
									"        }  ",
									"            ",
									"",
									"    }",
									"    if(count>0)",
									"    {",
									"        return true;",
									"    }",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page/{{reportHighlightPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page",
								"{{reportHighlightPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" was successfuly deleted.\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65/page/{{reportHighlightPageId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65",
								"page",
								"{{reportHighlightPageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"   ",
									"       ",
									"    //findPageIndex() returns index of page if it's found otherwise -1    ",
									"    pm.test(\"Page has been deleted, doesn't exist in document.\", function(){",
									"        pm.expect(findPageIndex(responseBody.object.pages, pm.variables.get(\"reportHighlightPageId\"))).to.equal(-1)",
									"    })",
									"",
									"    //checks the pageId order from the original document against the response",
									"    //will pass if the are the same, page order has been reversed",
									"    pm.test(\"Document contains the same pages as the original document\", function(){",
									"        pm.expect(pagesAreInSameOrdered( pm.variables.get(\"originalPageOrder\") , responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns page object which corresponds to given pageId.",
									"//returns null if not found",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									"",
									"function pagesAreInSameOrdered(pageIdList, responsePages)",
									"{",
									"    for(let i=0; i<pageIdList.length; ++i)",
									"    { ",
									"        //compares id in pageIdList against the pageId from the response",
									"        if( (pageIdList[i]!= responsePages[i].id))",
									"        {",
									"            //console.log(\"1\",pageIdList[i])",
									"            //console.log(\"2\", responsePages[i].id)",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//returns page index if page is found",
									"// will return -1 if it can't find page",
									"function findPageIndex(pages, pageId)",
									"{",
									"    for(let i=0; i<pages.length; ++i)",
									"    {",
									"        if( pages[i].id== pageId)",
									"        {",
									"            return pages.indexOf(pages[i]);",
									"        }",
									"    }",
									"    return -1;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60c06d3221813712295eea65",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60c06d3221813712295eea65"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Content-Pillars Page and Reverse",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"orgPage\", responseBody);",
									"",
									"    pm.test(\"Status 200. Page type is INFLUENCER_CONTENT_PILLARS\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_CONTENT_PILLARS\")",
									"    });",
									"    ",
									" ",
									"    pm.test(\"Page has influencer row for \" + getInfluencers(responseBody.object.influencers), function(){",
									"        pm.expect(getInfluencers(responseBody.object.influencers).length).to.not.equal(0);",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        return listInfluencers.add(influencers[i].details.username);",
									"    }",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									"function getPostByCategory(responseInfluencers, influencer)",
									"{",
									"    for(let i =0; i< responseInfluencers.length; ++i)",
									"    {",
									"        if(responseInfluencers[i].details.username== influencer)",
									"        {",
									"            return responseInfluencers[i].postsByCategory;",
									"        }",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/d39ad56f-9516-44f0-9e8f-01bd36c1cdfe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"d39ad56f-9516-44f0-9e8f-01bd36c1cdfe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Content-Pillars Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"updatePageRequest\", requestBody)",
									"    pm.variables.set(\"influencerRow\", pm.request.url.path[6])",
									"    pm.environment.set(\"postsByCategory\", JSON.stringify(getPostByCategory(pm.variables.get(\"orgPage\").object.influencers,",
									"                                                                        pm.request.url.path[6]) ));",
									"",
									"    pm.test(\"Status 200. Updates content-pillar page\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"",
									"//---------------Functions",
									"",
									"",
									"",
									"function getPostByCategory(responseInfluencers, influencer)",
									"{",
									"    for(let i =0; i< responseInfluencers.length; ++i)",
									"    {",
									"        if(responseInfluencers[i].details.username== influencer)",
									"        {",
									"            return responseInfluencers[i].postsByCategory;",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"postsByCategory\":[\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/d39ad56f-9516-44f0-9e8f-01bd36c1cdfe/content-pillars/flex_mami",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"d39ad56f-9516-44f0-9e8f-01bd36c1cdfe",
								"content-pillars",
								"flex_mami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Page type is INFLUENCER_CONTENT_PILLARS\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_CONTENT_PILLARS\")",
									"    });",
									" ",
									"    pm.test(\"Page has influencer row for \" + getInfluencers(responseBody.object.influencers), function(){",
									"        pm.expect(getInfluencers(responseBody.object.influencers).length).to.not.equal(0);",
									"    })",
									"",
									"    pm.test(\"Update was successful\", function(){",
									"        pm.expect(getPostByCategory(responseBody.object.influencers, pm.variables.get(\"influencerRow\")))",
									"                .to.deep.eq(pm.variables.get(\"updatePageRequest\").postsByCategory);",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns postsByCategory",
									"function getPostByCategory(responseInfluencers, influencer)",
									"{",
									"    for(let i =0; i< responseInfluencers.length; ++i)",
									"    {",
									"        if(responseInfluencers[i].details.username== influencer)",
									"        {",
									"            return responseInfluencers[i].postsByCategory;",
									"        }",
									"    }",
									"}",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        listInfluencers.add(influencers[i].details.username);",
									"    }",
									"    return listInfluencers;           ",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/d39ad56f-9516-44f0-9e8f-01bd36c1cdfe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"d39ad56f-9516-44f0-9e8f-01bd36c1cdfe"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reverse Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"updatePageRequest\", requestBody)",
									"",
									"    pm.test(\"Status 200. Updates content-pillar page\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"postsByCategory\":{{postsByCategory}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/d39ad56f-9516-44f0-9e8f-01bd36c1cdfe/content-pillars/flex_mami",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"d39ad56f-9516-44f0-9e8f-01bd36c1cdfe",
								"content-pillars",
								"flex_mami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Page type is INFLUENCER_CONTENT_PILLARS\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_CONTENT_PILLARS\")",
									"    });",
									" ",
									"    pm.test(\"Page has influencer row for \" + getInfluencers(responseBody.object.influencers), function(){",
									"        pm.expect(getInfluencers(responseBody.object.influencers).length).to.not.equal(0);",
									"    })",
									"",
									"    pm.test(\"Update was successful\", function(){",
									"        pm.expect(getPostByCategory(responseBody.object.influencers, pm.variables.get(\"influencerRow\")))",
									"                .to.deep.eq(pm.variables.get(\"updatePageRequest\").postsByCategory);",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns postsByCategory",
									"function getPostByCategory(responseInfluencers, influencer)",
									"{",
									"    for(let i =0; i< responseInfluencers.length; ++i)",
									"    {",
									"        if(responseInfluencers[i].details.username== influencer)",
									"        {",
									"            return responseInfluencers[i].postsByCategory;",
									"        }",
									"    }",
									"}",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        return listInfluencers.add(influencers[i].details.username);",
									"    }",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/6020ba182181375df0970530/page/d39ad56f-9516-44f0-9e8f-01bd36c1cdfe",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"6020ba182181375df0970530",
								"page",
								"d39ad56f-9516-44f0-9e8f-01bd36c1cdfe"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reorder Matrix Table and Reverse",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"orginalOrder\", responseBody);",
									"",
									"    pm.test(\"Status 200. Page type is INFLUENCER_MATRIX'\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"    ",
									" ",
									"    pm.test(\"Page contains following influencers in order: \" + getInfluencers(responseBody.object.influencers))",
									"    pm.environment.set(\"originalOrder\", JSON.stringify(getInfluencers(responseBody.object.influencers)))",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        listInfluencers.add(influencers[i].details.username);",
									"    }",
									"    return listInfluencers;",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reorder Influencers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"reorderRequest\", requestBody)",
									"",
									"    pm.test(\"Status 200. Reorders influencers\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernames\":[\"dicolaaa\",\"flex_mami\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9/influencer-table/order",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9",
								"influencer-table",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Page type is INFLUENCER_MATRIX'\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"",
									"    //Checks if the response has the same order of names as given in the request",
									"    //will iterate through the request names",
									"    pm.test(\"Reorder was successful\", function(){",
									"        pm.expect( isReordered(getInfluencers(responseBody.object.influencers),",
									"                                pm.variables.get(\"reorderRequest\").usernames) ).to.eq(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"",
									"//checks if order is the same ",
									"function isReordered(responseInfluencersOrder, requestedOrder)",
									"{",
									"    for(let i =0; i< requestedOrder.length; ++i)",
									"    {",
									"        if(requestedOrder[i] != responseInfluencersOrder[i])",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        listInfluencers.add(influencers[i].details.username);",
									"    }",
									"    return listInfluencers;           ",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revers Reorder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"reorderRequest\", requestBody)",
									"",
									"    pm.test(\"Status 200. Reorders influencers\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"usernames\":{{originalOrder}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9/influencer-table/order",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9",
								"influencer-table",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Page type is INFLUENCER_MATRIX'\",function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"",
									"    //Checks if the response has the same order of names as given in the request",
									"    pm.test(\"Returned page is the same as the original page. Influencers in order: \" + getInfluencers(responseBody.object.influencers), function(){",
									"        pm.expect(responseBody).to.deep.equal(pm.variables.get(\"orginalOrder\"));",
									"    })",
									"        ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//----------------Functions",
									"//checks if order is the same ",
									"function isReordered(responseInfluencersOrder, requestedOrder)",
									"{",
									"    for(let i =0; i< requestedOrder.length; ++i)",
									"    {",
									"        if(requestedOrder[i] != responseInfluencersOrder[i])",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//returns true if bigStats match given name and if no fields are empty",
									"function getInfluencers(influencers)",
									"{",
									"    listInfluencers=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        listInfluencers.add(influencers[i].details.username);",
									"    }",
									"    return listInfluencers;           ",
									"}",
									"",
									"function isEmpty(text)",
									"{",
									"   //var notOnlySpace = (/\\S/);",
									"    if ((text==null) || (text==\"\") || (text.length==0) ||  ( (/\\S/).test(text)==false))",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5d8052e72181372381281fae/page/62a36e11-0e8d-4120-86a9-a67c3db150e9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5d8052e72181372381281fae",
								"page",
								"62a36e11-0e8d-4120-86a9-a67c3db150e9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add and Remove Platform",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is REPORT_OVERVIEW.\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_OVERVIEW\");",
									"    })",
									"",
									"    pm.test(\"No platform is chosen.\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(null);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/603d6d6b2181374b0bbb83cf/page/339dbf6a-3e4b-4cb7-a0eb-d568f74fa021",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603d6d6b2181374b0bbb83cf",
								"page",
								"339dbf6a-3e4b-4cb7-a0eb-d568f74fa021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Platform To Report Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"requestPlatform\", requestBody.page.platform)",
									"",
									"    pm.test(\"Status 200. \"+requestBody.page.platform+\" is added to page.\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(requestBody.page.platform);",
									"    })",
									"",
									"    pm.test(\"Page type is REPORT_OVERVIEW.\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_OVERVIEW\");",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_OVERVIEW\",\n        \"platform\":\"INSTAGRAM\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/603d6d6b2181374b0bbb83cf/page/339dbf6a-3e4b-4cb7-a0eb-d568f74fa021",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603d6d6b2181374b0bbb83cf",
								"page",
								"339dbf6a-3e4b-4cb7-a0eb-d568f74fa021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is REPORT_OVERVIEW.\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_OVERVIEW\");",
									"    })",
									"",
									"    pm.test(\"Platform set to \"+ responseBody.object.platform, function(){",
									"        pm.expect(responseBody.object.platform).to.equal(pm.variables.get(\"requestPlatform\"));",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"//returns page object which corresponds to given pageId.",
									"function getPage(pages, pageId)",
									"{",
									"    for(let i =0; i< pages.length; ++i)",
									"    {",
									"        if(pages[i].id==pageId)",
									"        {",
									"            return pages[i];",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{test}}collateral/603d6d6b2181374b0bbb83cf/page/339dbf6a-3e4b-4cb7-a0eb-d568f74fa021",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603d6d6b2181374b0bbb83cf",
								"page",
								"339dbf6a-3e4b-4cb7-a0eb-d568f74fa021"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Platform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Attemting to remove platform\");",
									"",
									"    pm.test(\"Page type is REPORT_OVERVIEW.\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_OVERVIEW\");",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/603d6d6b2181374b0bbb83cf/page/339dbf6a-3e4b-4cb7-a0eb-d568f74fa021/remove-platform",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603d6d6b2181374b0bbb83cf",
								"page",
								"339dbf6a-3e4b-4cb7-a0eb-d568f74fa021",
								"remove-platform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is REPORT_OVERVIEW.\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_OVERVIEW\");",
									"    })",
									"",
									"    pm.test(\"No platform is chosen.\", function(){",
									"        pm.expect(responseBody.object.platform).to.equal(null);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/603d6d6b2181374b0bbb83cf/page/339dbf6a-3e4b-4cb7-a0eb-d568f74fa021",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"603d6d6b2181374b0bbb83cf",
								"page",
								"339dbf6a-3e4b-4cb7-a0eb-d568f74fa021"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Content Asset and Reverse -(CHECK ID VALUE)",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/619fbaee-44c4-410c-a229-6382708c6fd5",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"619fbaee-44c4-410c-a229-6382708c6fd5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Content Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									"//pageHasAsset() returns asset if found",
									"pm.variables.set(\"deletedAsset\", pageHasAsset(pm.variables.get(\"originalPage\").contents, pm.request.url.path[5]));",
									"",
									"//POST call will fail if it's not reset after db is restored",
									"if(pm.variables.get(\"deletedAsset\") ==null)",
									"{",
									"    console.log(\"Make sure collection variable 'assetIdDelete' current value is set to it's initial value if db has been restored!\")",
									"}",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"",
									"    pm.test(\"Status 200. Deleting asset\");",
									"",
									"    //checks if given assetId exists in page ",
									"    //returns asset if found",
									"    pm.test(\"Page has requested content asset.\", function(){",
									"        pm.expect(pageHasAsset(pm.variables.get(\"originalPage\").contents, pm.request.url.path[5])).to.not.equal(null);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"// returns asset if given id is found in contents list",
									"function pageHasAsset(contents, assetId)",
									"{",
									"",
									"    for(let i =0; i< contents.length; ++i)",
									"    {",
									"        if(contents[i].id==assetId)",
									"        {",
									"",
									"            return contents[i];",
									"        }",
									"    }      ",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/asset/{{assetIdDelete}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"asset",
								"{{assetIdDelete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"    pm.test(\"Page does not contain assetId\", function(){",
									"        pm.expect(pageHasAsset(responseBody.object.contents, pm.variables.get(\"assetIdDelete\"))).to.equal(false);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"",
									"//----------------Functions",
									"",
									"// returns true if given id is found in contents list",
									"function pageHasAsset(contents, assetId)",
									"{",
									"",
									"    for(let i =0; i< contents.length; ++i)",
									"    {",
									"        if(contents[i].id==assetId)",
									"        {",
									"            return true;",
									"        }",
									"    }      ",
									"    return false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/619fbaee-44c4-410c-a229-6382708c6fd5",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"619fbaee-44c4-410c-a229-6382708c6fd5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Content Asset",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"assetType\", pm.variables.get(\"deletedAsset\").assetType);",
									"pm.environment.set(\"emoji\", pm.variables.get(\"deletedAsset\").emoji);",
									"pm.environment.set(\"tag\", pm.variables.get(\"deletedAsset\").tag);",
									"pm.environment.set(\"title\", pm.variables.get(\"deletedAsset\").title);",
									"pm.environment.set(\"content\", pm.variables.get(\"deletedAsset\").content);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"addedAsset\", responseBody)",
									"    ",
									"    //Sets the assetId which is to be deleted with the new id",
									"    // since the assetId will be different when the asset is added back to the page ",
									"    pm.collectionVariables.set(\"assetIdDelete\", responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. Added new asset\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"asset\":\n    {\n        \"assetType\":\"{{assetType}}\",\n        \"emoji\":\"{{emoji}}\",\n        \"tag\":\"{{tag}}\",\n        \"title\":\"{{title}}\",\n        \"content\":\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in volupt\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/619fbaee-44c4-410c-a229-6382708c6fd5/asset",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"619fbaee-44c4-410c-a229-6382708c6fd5",
								"asset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"    ",
									"",
									"    //pm.variables.get(\"addedAsset\") is set to same values as the deleted asset",
									"    // except form it's id which is generated in the POST call.",
									"    // Test will pass if it is found in the response",
									"    pm.test(\"Deleted asset has been added back to page.\", function(){",
									"        pm.expect(pageHasAsset(responseBody.object.contents,pm.variables.get(\"addedAsset\").object.id)).to.not.equal(null);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"// returns asset if given id is found in contents list",
									"function pageHasAsset(contents, assetId)",
									"{",
									"",
									"    for(let i =0; i< contents.length; ++i)",
									"    {",
									"        if(contents[i].id==assetId)",
									"        {",
									"",
									"            return contents[i];",
									"        }",
									"    }      ",
									"    return null;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5e8174e7218137579ed668b2/page/619fbaee-44c4-410c-a229-6382708c6fd5",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5e8174e7218137579ed668b2",
								"page",
								"619fbaee-44c4-410c-a229-6382708c6fd5"
							]
						}
					},
					"response": []
				}
			],
			"description": "If db i restored then the collection variable \"assetIdDelete\" current value needs to be reset to it's initial value."
		},
		{
			"name": "Add Task and Delete",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"addedTaskrequest\", requestBody)",
									"    ",
									"    pm.variables.set(\"taskId\", responseBody.object.id)",
									"",
									"    pm.test(\"Status 200. Added task.\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\":\"add dotpoints\",\n    \"coordinateX\":1024,\n    \"coordinateY\":495,\n    \"pageNumber\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356/task",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Assignee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"addedAssigneeId\", requestBody.assignee.id)",
									"    ",
									"    pm.test(\"Status 200. Added assignee.\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assignee\":\n    {\n        \"id\":\"5dddff262181375d25d61a9a\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356/task/{{taskId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356",
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"addedTask =getTask(responseBody.object.tasks.tasks, pm.variables.get(\"taskId\"));",
									"",
									"if (pm.response.code == 200) {",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function () {",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" + responseBody.object.type);",
									"",
									"    pm.test(\"Task is added to the requested page and has the requested coordinates and description.\", function () {",
									"        pm.expect(addedTask.body).to.equal(pm.variables.get(\"addedTaskrequest\").body);",
									"        pm.expect(addedTask.coordinateX).to.equal(pm.variables.get(\"addedTaskrequest\").coordinateX);",
									"        pm.expect(addedTask.coordinateY).to.equal(pm.variables.get(\"addedTaskrequest\").coordinateY);",
									"    })",
									"",
									"    pm.test(\"Task is assigned to requested employer.\", function () {",
									"        pm.expect(addedTask.assignee.id).to.equal(pm.variables.get(\"addedAssigneeId\"));",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) {",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code == 400) {",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"//returns task object which corresponds to given taskId",
									"function getTask(tasks, taskId)",
									"{",
									"    for(let i =0; i< tasks.length; ++i)",
									"    {",
									"        if(tasks[i].id==taskId)",
									"        {",
									"            return tasks[i];",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Description ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"updatedBody\", requestBody.body)",
									"    ",
									"    pm.test(\"Status 200. Updated task description.\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\":\"fix text style\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356/task/{{taskId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356",
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if (pm.response.code == 200) {",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function () {",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" + responseBody.object.type);",
									"",
									"    pm.test(\"Task description has been updated.\", function () {",
									"        pm.expect(getTask(responseBody.object.tasks.tasks, pm.variables.get(\"taskId\")).body)",
									"                .to.equal(pm.variables.get(\"updatedBody\"));",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function () {",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) {",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code == 400) {",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"//returns task object which corresponds to given taskId",
									"function getTask(tasks, taskId)",
									"{",
									"    for(let i =0; i< tasks.length; ++i)",
									"    {",
									"        if(tasks[i].id==taskId)",
									"        {",
									"            return tasks[i];",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Deleting task\");",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"// returns asset if given id is found in contents list",
									"function pageHasAsset(contents, assetId)",
									"{",
									"",
									"    for(let i =0; i< contents.length; ++i)",
									"    {",
									"        if(contents[i].id==assetId)",
									"        {",
									"",
									"            return contents[i];",
									"        }",
									"    }      ",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356/task/{{taskId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356",
								"task",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"    //getTask() returns null if task is not found in the response",
									"    pm.test(\"Task has been deleted successfully\", function(){",
									"        pm.expect(getTask(responseBody.object.tasks.tasks, pm.variables.get(\"taskId\"))).to.equal(null);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"//returns task object which corresponds to given taskId",
									"function getTask(tasks, taskId)",
									"{",
									"    for(let i =0; i< tasks.length; ++i)",
									"    {",
									"        if(tasks[i].id==taskId)",
									"        {",
									"            return tasks[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Delete Task (Not Assigned)",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				},
				{
					"name": "Employee login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+dj@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Deleting task\");",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"// returns asset if given id is found in contents list",
									"function pageHasAsset(contents, assetId)",
									"{",
									"",
									"    for(let i =0; i< contents.length; ++i)",
									"    {",
									"        if(contents[i].id==assetId)",
									"        {",
									"",
									"            return contents[i];",
									"        }",
									"    }      ",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/604ee8f92181371dfb699f2c/page/27f30b31-5885-40ad-a138-83a24d706214/task/38d1841d-7a81-4d8c-88cb-9bf6977c09a2",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"604ee8f92181371dfb699f2c",
								"page",
								"27f30b31-5885-40ad-a138-83a24d706214",
								"task",
								"38d1841d-7a81-4d8c-88cb-9bf6977c09a2"
							]
						}
					},
					"response": []
				},
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    //compares page before delete call and page after",
									"    // will pass if they are the same/unchanged",
									"    pm.test(\"Page remains unchanged\", function(){",
									"        pm.expect(pm.variables.get(\"originalPage\")).to.deep.equal(responseBody.object);",
									"    });",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5ee061552181377fd2d24d19/page/41e817d9-f4bb-40ce-a87c-9e7c48a36356",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5ee061552181377fd2d24d19",
								"page",
								"41e817d9-f4bb-40ce-a87c-9e7c48a36356"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Override Creator Table Values",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Report Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"originalPage\", responseBody.object)",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/5541b091-a8b9-4841-8dd9-862086e180a9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"5541b091-a8b9-4841-8dd9-862086e180a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Override",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"overrideRequest\", requestBody)",
									"",
									"    ",
									"    //if there's no overrides field in the original page then there will only be",
									"    // one override, (the created override), returned in the current response",
									"    if(pm.variables.get(\"originalPage\").overrides==undefined)",
									"    {",
									"        pm.environment.set(\"overrideId\", responseBody.object.overrides[0].id);",
									"    }",
									"    //call returns entire page",
									"    // so have to compare the original pages overrides to returned overrides ",
									"    // to get the id of the added override    ",
									"    else",
									"    {",
									"        pm.environment.set(\"overrideId\", getNewOverrideId(getOverrideIds(responseBody.object.overrides),",
									"                                                    getOverrideIds(pm.variables.get(\"originalPage\").overrides) ))",
									"    }",
									"",
									"    pm.test(\"Status 200. Added override.\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"",
									"//-------------------Functions",
									"",
									"function getOverrideIds(overrides)",
									"{",
									"    idList=[];",
									"    for(let i =0; i< overrides.length; ++i)",
									"    {",
									"        idList.add(overrides[i].id)",
									"    }",
									"    return idList;",
									"}",
									"",
									"//returns the id which is part of the first given list but not the other",
									"function getNewOverrideId(responseIds, originalIds)",
									"{",
									"    for(let i =0; i< responseIds.length; ++i)",
									"    {",
									"        if(originalIds.indexOf(responseIds[i])==-1)",
									"        {",
									"            return responseIds[i];",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"override\":\n    {\n        \"assetType\":\"OVERRIDE\",\n        \"type\":\"CREATOR_TABLE\",\n        \"userId\":\"5c3821a0cdeecf527babcd87\",\n        \"value\":\n        {\n            \"columnName\":\"Influencer\",\n            \"value\":\"flex.mami\",\n            \"mergedStatus\":\"UNMERGED\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/5541b091-a8b9-4841-8dd9-862086e180a9/override",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"5541b091-a8b9-4841-8dd9-862086e180a9",
								"override"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Report Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"addedOverride = getOverride(responseBody.object.overrides, pm.environment.get(\"overrideId\"));",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"    //compares returned response against requestbody from POST call ",
									"    // will pass if response contains same values as created override",
									"    pm.test(\"Page contains override and it contains requested values\", function(){",
									"        pm.expect(addedOverride.assetType).to.equal(pm.variables.get(\"overrideRequest\").override.assetType);",
									"        pm.expect(addedOverride.type).to.equal(pm.variables.get(\"overrideRequest\").override.type);",
									"        pm.expect(addedOverride.userId).to.equal(pm.variables.get(\"overrideRequest\").override.userId);",
									"        pm.expect(addedOverride.value).to.deep.equal(pm.variables.get(\"overrideRequest\").override.value);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"function getOverride(overrides, overrideId)",
									"{",
									"    for(let i =0; i< overrides.length; ++i)",
									"    {",
									"        if(overrides[i].id==overrideId)",
									"        {",
									"            return overrides[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/5541b091-a8b9-4841-8dd9-862086e180a9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"5541b091-a8b9-4841-8dd9-862086e180a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating Override",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.variables.set(\"overrideUpdate\", requestBody)",
									"",
									"    pm.test(\"Status 200. Updating override.\");",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"override\":\n    {\n        \"assetType\":\"OVERRIDE\",\n        \"id\":\"{{overrideId}}\",\n        \"type\":\"CREATOR_TABLE\",\n        \"reference\":\"5c3821a0cdeecf527babcd87_Influencer\",\n        \"value\":\n        {\n            \"columnName\":\"Influencer\",\n            \"value\":\"Flex.Mami\",\n            \"mergedStatus\":\"UNMERGED\"\n        },\n        \"profile\":null,\n        \"userId\":\"5c3821a0cdeecf527babcd87\",\n        \"postId\":null\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/override/{{overrideId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"override",
								"{{overrideId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Report Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"addedOverride = getOverride(responseBody.object.overrides, pm.variables.get(\"overrideId\"));",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"    //compares returned response against requestbody from PUT call ",
									"    // will pass if response contains same values as the updated override",
									"    pm.test(\"Page contains override and it contains requested values\", function(){",
									"        pm.expect(addedOverride.assetType).to.equal(pm.variables.get(\"overrideUpdate\").override.assetType);",
									"        pm.expect(addedOverride.type).to.equal(pm.variables.get(\"overrideUpdate\").override.type);",
									"        pm.expect(addedOverride.userId).to.equal(pm.variables.get(\"overrideUpdate\").override.userId);",
									"        pm.expect(addedOverride.value).to.deep.equal(pm.variables.get(\"overrideUpdate\").override.value);",
									"",
									"        pm.expect(addedOverride.reference).to.equal(pm.variables.get(\"overrideUpdate\").override.reference);",
									"        pm.expect(addedOverride.profile).to.equal(pm.variables.get(\"overrideUpdate\").override.profile);",
									"        pm.expect(addedOverride.postId).to.equal(pm.variables.get(\"overrideUpdate\").override.postId);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"function getOverride(overrides, overrideId)",
									"{",
									"    for(let i =0; i< overrides.length; ++i)",
									"    {",
									"        if(overrides[i].id==overrideId)",
									"        {",
									"            return overrides[i];",
									"        }",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/5541b091-a8b9-4841-8dd9-862086e180a9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"5541b091-a8b9-4841-8dd9-862086e180a9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Override",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Deleting override\");",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/asset/{{overrideId}}",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"asset",
								"{{overrideId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Report Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"addedOverride = getOverride(responseBody.object.overrides, pm.environment.get(\"overrideId\"));",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200, returns page with id \" + pm.request.url.path[4]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[4])",
									"    };",
									"",
									"    pm.test(\"Page type is \" +responseBody.object.type);",
									"",
									"",
									"    //compares original page with current page",
									"    //passes if they are equal",
									"    //dateModified is not updated so can use deep.equal ",
									"    pm.test(\"Override was successfully deleted from page\", function(){",
									"        pm.expect(responseBody.object).to.deep.equal(pm.variables.get(\"originalPage\"));",
									"",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\")",
									"}",
									"//----------------Functions",
									"",
									"function getOverride(overrides, overrideId)",
									"{",
									"    for(let i =0; i< overrides.length; ++i)",
									"    {",
									"        if(overrides[i].id==overrideId)",
									"        {",
									"            return overrides[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60b5d6e621813761b8bcc70f/page/5541b091-a8b9-4841-8dd9-862086e180a9",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60b5d6e621813761b8bcc70f",
								"page",
								"5541b091-a8b9-4841-8dd9-862086e180a9"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Last Title Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves document to be able to check that same fields are returned in \"Get page\"",
									"    pm.variables.set(\"document\", responseBody.object);",
									"",
									"    pm.test(\"Status 200, returns document with documentId \" + pm.request.url.path[2]), function(){",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2])",
									"    };",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    //Will pass if document has only one TITLE page",
									"    pm.test(\"Document only has one title page\", function(){",
									"        pm.expect(totalTitlePages(responseBody.object.pages)).to.equal(1);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns the total tilte pages a document consist of",
									"function totalTitlePages(documentPages)",
									"{",
									"    count=0;",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( documentPages[i].type==\"TITLE\")",
									"        {",
									"            count+=1;",
									"        }",
									"    }",
									"    return count;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5f4c99dd21813741afe10a5f",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5f4c99dd21813741afe10a5f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Last Title Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. PageId \"+pm.request.url.path[4]+\" was successfuly deleted.\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5f4c99dd21813741afe10a5f/page/b25edaea-93e6-4cbb-b43c-a1ab306f139c",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5f4c99dd21813741afe10a5f",
								"page",
								"b25edaea-93e6-4cbb-b43c-a1ab306f139c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    //checks if the document is the same as it was before the delete call ",
									"    pm.test(\"Status 200. Document has not been updated.\", function(){",
									"        pm.expect(responseBody.object).to.deep.equal(pm.variables.get(\"document\"));",
									"    })",
									"",
									"    // will pass if document has a type, is connected to a brand and if it has a ",
									"    // TITLE page with a title which isn't empty",
									"    pm.test(\"Document contains required fields. Has a type, a title page and is connected to a brand.\", function(){",
									"        pm.expect(responseBody.object.type).to.be.oneOf([\"UNSPECIFIED\", \"PROPOSAL\", \"ESTIMATES\", \"SAMPLE\"]);",
									"        pm.expect(responseBody.object.brandDetails.username).to.not.be.oneOf([undefined, null, \"\"])",
									"        pm.expect(containsOneTitlepage(responseBody.object.pages)).to.equal(true);",
									"    })",
									"",
									"    //Will pass if document has only one TITLE page",
									"    pm.test(\"Document only has one title page\", function(){",
									"        pm.expect(totalTitlePages(responseBody.object.pages)).to.equal(1);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns true if it finds a page of type \"TITLE\" and the field titel isn't null",
									"//returns false for all other scenarios ",
									"",
									"function containsOneTitlepage(documentPages)",
									"{",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( (documentPages[i].type==\"TITLE\") && (documentPages[i].title!= null))",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns the total tilte pages a document consist of",
									"function totalTitlePages(documentPages)",
									"{",
									"    count=0;",
									"    for(let i=0; i<documentPages.length; ++i)",
									"    {",
									"        if( documentPages[i].type==\"TITLE\")",
									"        {",
									"            count+=1;",
									"        }",
									"    }",
									"    return count;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/5f4c99dd21813741afe10a5f",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"5f4c99dd21813741afe10a5f"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Remove Influencer From Matrix",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns INFLUENCER_MATRIX page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of matrix",
									"    pm.test(\"Matrix contains following influencers: \"+ getAllInfluencers(responseBody.object.influencers))",
									"    ",
									"    pm.variables.set(\"originalInfluencers\", responseBody.object.influencers)",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].details.username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60346f98218137676e8c47ba/page/d84fd3cf-c739-4ba4-a2d6-5dc03d542462",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60346f98218137676e8c47ba",
								"page",
								"d84fd3cf-c739-4ba4-a2d6-5dc03d542462"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    ",
									"    //saves the influencer and it's \"matrix data\"",
									"    // so that chnages can be reversed ",
									"    pm.variables.set(\"removedInfluencer\", getInfluencer( pm.variables.get(\"originalInfluencers\"),",
									"                                                            pm.request.url.path[6]))",
									"    ",
									"    pm.test(\"Status 200. Removed influencer  \"+pm.request.url.path[6]);",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"function getInfluencer(influencers, username)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        if(influencers[i].details.username==username)",
									"        {",
									"            return influencers[i];",
									"        }",
									"    }",
									"    return null;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60346f98218137676e8c47ba/page/d84fd3cf-c739-4ba4-a2d6-5dc03d542462/influencer-table/flex_mami",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60346f98218137676e8c47ba",
								"page",
								"d84fd3cf-c739-4ba4-a2d6-5dc03d542462",
								"influencer-table",
								"flex_mami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns INFLUENCER_MATRIX page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"",
									"    pm.test(\"Matrix contains following influencers: \"+ getAllInfluencers(responseBody.object.influencers))",
									"",
									"    // checks if current page list of influencers contains the username of the removed influencer",
									"    //will pass if removed influencer is not part of list",
									"    pm.test(\"Influencer was successfully removed\", function(){",
									"        pm.expect(getAllInfluencers(responseBody.object.influencers).indexOf(pm.variables.get(\"removedInfluencer\").details.username ))",
									"                .to.equal(-1);",
									"    })",
									"  ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        username.add( influencers[i].details.username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60346f98218137676e8c47ba/page/d84fd3cf-c739-4ba4-a2d6-5dc03d542462",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60346f98218137676e8c47ba",
								"page",
								"d84fd3cf-c739-4ba4-a2d6-5dc03d542462"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Influencer Back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    ",
									"    pm.test(\"Status 200. Added influencer '\"+ requestBody.username+ \"' to matrix\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"username\",   pm.variables.get(\"removedInfluencer\").details.username)",
									"pm.environment.set(\"checked\",   pm.variables.get(\"removedInfluencer\").checked)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"{{username}}\",\n    \"checked\": [{{checked}}]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/60346f98218137676e8c47ba/page/d84fd3cf-c739-4ba4-a2d6-5dc03d542462/matrix",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60346f98218137676e8c47ba",
								"page",
								"d84fd3cf-c739-4ba4-a2d6-5dc03d542462",
								"matrix"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Matrix Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns INFLUENCER_MATRIX page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"INFLUENCER_MATRIX\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of matrix",
									"    pm.test(\"Matrix contains following influencers: \"+ getAllInfluencers(responseBody.object.influencers))",
									"    ",
									"    // will pass if removed username is found in current page list of influencers",
									"    pm.test(\"Influencer was successfully added back to matrix\", function(){",
									"        pm.expect(getAllInfluencers(responseBody.object.influencers).indexOf(pm.variables.get(\"removedInfluencer\").details.username ))",
									"                .to.not.equal(-1);",
									"    })",
									"",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].details.username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/60346f98218137676e8c47ba/page/d84fd3cf-c739-4ba4-a2d6-5dc03d542462",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"60346f98218137676e8c47ba",
								"page",
								"d84fd3cf-c739-4ba4-a2d6-5dc03d542462"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Remove Influencer Creator Table",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"   pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"    ",
									"   pm.variables.set(\"originalInfluencers\", responseBody.object.selectedInfluencers)",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"if(pm.response.code==200)",
									"{",
									"",
									"    //saves the removed influencer and it's \"table data\"",
									"    // so that changes can be reversed ",
									"    //(better way of doing this?)",
									"    pm.environment.set(\"removedInfluencer\", getInfluencer(pm.variables.get(\"originalInfluencers\") ,",
									"                                                        getRemovedUsername( getAllInfluencers(pm.variables.get(\"originalInfluencers\")),",
									"                                                                            getAllInfluencers(requestBody.page.selectedInfluencers) ) ) );",
									"",
									"    pm.environment.set(\"originalSlectedInfluencers\", ",
									"                        JSON.stringify(requestBody.page.selectedInfluencers.add(pm.environment.get(\"removedInfluencer\"))));",
									"                                                ",
									"    ",
									"    pm.test(\"Status 200. Removed influencer from table\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									"",
									"//------------------------Functions",
									"",
									"function getInfluencer(influencers, username)",
									"{",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        if(influencers[i].username==username)",
									"        {",
									"            return influencers[i];",
									"        }",
									"    }",
									"    return null;",
									"}",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									"//returns the influencer object which isn't found in the newList, (has been removed)",
									"function getRemovedUsername(originalList, newList)",
									"{",
									"    for(let i=0; i< originalList.length; ++i)",
									"    {",
									"        if(newList.includes(originalList[i])==false)",
									"        {",
									"            return originalList[i];",
									"        }",
									"",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"page\":\n    {\n        \"type\":\"REPORT_CREATOR_TABLE\",\n        \"selectedInfluencers\":[\n            {\n                \"userId\":\"5e151b8421813765340ed19a\",\n                \"username\":\"theorganisedhousewife\",\n                \"featured\":\"NOT_FEATURED\"\n            },\n            {\n                \"userId\":\"5e71aeb62181375569bed508\",\n                \"username\":\"sbendixsen\",\n                \"featured\":\"NOT_FEATURED\"\n            }]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"    pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"",
									"    // checks if current page list of influencers contains the username of the removed influencer",
									"    //will pass if removed influencer is not part of list",
									"    pm.test(\"Influencer '\"+ pm.environment.get(\"removedInfluencer\").username  +\"' was successfully removed\", function(){",
									"        pm.expect(getAllInfluencers(responseBody.object.selectedInfluencers).indexOf(pm.environment.get(\"removedInfluencer\").username ))",
									"                .to.equal(-1);",
									"    })",
									"  ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Influencer Back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    ",
									"    pm.test(\"Status 200. Adding influencer back to table\")",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400.\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_CREATOR_TABLE\",\n        \"selectedInfluencers\": {{originalSlectedInfluencers}}\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"    pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"",
									"    // checks if current page list of influencers contains the username of the removed influencer",
									"    //will pass if removed influencer is not part of list",
									"    pm.test(\"Influencer '\"+ pm.environment.get(\"removedInfluencer\").username  +\"' was successfully added\", function(){",
									"        pm.expect(getAllInfluencers(responseBody.object.selectedInfluencers).indexOf(pm.environment.get(\"removedInfluencer\").username ))",
									"                .to.not.equal(-1);",
									"    })",
									"  ",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Split and Reverse Creator Table Page",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"   pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"    ",
									"   pm.variables.set(\"originalInfluencers\", responseBody.object.selectedInfluencers)",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existinmg pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Split Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{                                              ",
									"    pm.variables.set(\"requestBodySplit\", requestBody);",
									"",
									"    pm.test(\"Status 200. Splits table at \"+ requestBody.page.splitAt);",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_CREATOR_TABLE\",\n        \"splitAt\":[\"5e71aeb62181375569bed508\"],\n        \"numberOfPages\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"   pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"    ",
									"    //pm.variables.get(\"requestBodySplit\")",
									"",
									"   pm.test(\"Page contains splitAt field and it's the same value as given in the request\", function(){",
									"       pm.expect(responseBody.object.splitAt).to.eql(pm.variables.get(\"requestBodySplit\").page.splitAt);",
									"   })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existing pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reverse Split",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{                                              ",
									"    pm.variables.set(\"requestBodySplit\", requestBody);",
									"",
									"    pm.test(\"Status 200. Removes split\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400.\");",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"page\":\n    {\n        \"type\":\"REPORT_CREATOR_TABLE\",\n        \"splitAt\":[],\n        \"numberOfPages\":1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Creator Table Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									" if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status 200. Returns REPORT_CREATOR_TABLE page\", function(){",
									"        pm.expect(responseBody.object.type).to.equal(\"REPORT_CREATOR_TABLE\")",
									"    });",
									"",
									"    //getAllInfluencers() returns a list of influencers which is part of table",
									"   pm.test(\"Table contains following influencers: \"+ getAllInfluencers(responseBody.object.selectedInfluencers))",
									"    ",
									"    //pm.variables.get(\"requestBodySplit\")",
									"",
									"   pm.test(\"Pages contains splitAt field and it's set to an empty list\", function(){",
									"       pm.expect(responseBody.object.splitAt).to.eql([]);",
									"   })",
									"",
									"}",
									"else if(pm.response.code==404)  //retuns 500 for non existing pageId",
									"{",
									"    pm.test(\"Document not found\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Not hypetap or not assigned to brand.\");",
									"}",
									"",
									"//----------------Functions",
									"",
									"//returns all influencers usernames",
									"function getAllInfluencers(influencers)",
									"{",
									"    usernames=[];",
									"    for(let i =0; i< influencers.length; ++i)",
									"    {",
									"        usernames.add( influencers[i].username);",
									"    }",
									"    return usernames;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}collateral/600908262181372f7a1db4e9/page/a2d10b54-b18e-45c4-9b7f-ff2cadd76324",
							"host": [
								"{{test}}collateral"
							],
							"path": [
								"600908262181372f7a1db4e9",
								"page",
								"a2d10b54-b18e-45c4-9b7f-ff2cadd76324"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\" ms\");",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accumulateResponseTime",
			"value": "0"
		},
		{
			"key": "assetIdDelete",
			"value": "cc115c53-d643-4b2e-85da-c9ef7f5161f3"
		}
	]
}
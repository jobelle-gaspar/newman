{
	"info": {
		"_postman_id": "a663b156-e7b7-4465-a3e9-075ea1101ec7",
		"name": "EOI",
		"description": "Needs restoring.\n\nCollection test might fail if the request body is ticked as 'raw' even though it's empty/not used for any other calls than GET in the collection.\n\nTick 'none' and save to resolve error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Accept Influencer",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Use Email to Find EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"influenceremail\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different fields depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "melbournejade",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//will delete betaInvitation and create new user if successful",
									"//sends email to user",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200. Username generated: \" + responseBody.object);",
									"",
									"    //saves returned username to check if it exit in the user collection!",
									"    pm.variables.set(\"generatedUsername\", responseBody.object);",
									"",
									"    //if 200 then the email should be valid",
									"",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"influenceremail\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"",
									"if(pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status is 400\");",
									"",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    if(responseBody.notes.userMessage!=undefined&&responseBody.notes.clashes!=undefined)",
									"    {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"",
									"     //influencer validate usernames and email",
									"        pm.test(\"Invalid email or username. userMessage: \"+ responseBody.notes.userMessage , function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Cannot accept EOI, email already in use\",",
									"                                                                    \"Email may not be empty\",",
									"                                                                    \"Instagram username contains invalid characters\",",
									"                                                                    \"Facebook username contains invalid characters\",",
									"                                                                    \"Pinterest username contains invalid characters\",",
									"                                                                    \"Twitter username contains invalid characters\",",
									"                                                                    \"Youtube username contains invalid characters\",",
									"                                                                    \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{influenceremail}}\",\n    \"description\":\"t\",\n    \"descriptionLong\":\"t\",\n    \"categories\":[\"Beauty\"],\n    \"gender\": \"OTHER\", \n    \"profileImage\":\n    {\n        \"bytes\":\"\",\n        \"contentType\":\"image/jpeg\"\n        },\n        \n\n\n\n        \n        \"coverImage\":\n        {\n            \"bytes\":\"\",\n    \"contentType\":\"image/jpeg\"\n    }\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/accept/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "EOI Deleted from EOI List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    //if PUT call is successful then eoi is deleted in betaInvitation collection and eoi is added to users instead",
									"    pm.test(\"Eoi doesn't exist in eoi collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"influenceremail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check EOI Is Added to Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//the current call should return a user object if the eoi has been added ",
									"pm.test(\"Eoi with username '\" + pm.variables.get(\"generatedUsername\") +\" has been added to user collection\", function () {",
									"    pm.expect(responseBody.object.username).to.equal(pm.variables.get(\"generatedUsername\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{test}}user/{{generatedUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{generatedUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Accept TM",
			"item": [
				{
					"name": "Use Email to Find EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"tmemail\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept TM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//will delete betaInvitation and create new user if successful",
									"//sends email user",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200. Username generated: \" + responseBody.object);",
									"",
									"    //save username whcih is returned to check if it exit in user collection!",
									"    pm.variables.set(\"generatedUsername\", responseBody.object);",
									"",
									"    //if 200 then the email should be valid",
									"",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"tmemail\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"if(pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status is 400\");",
									"",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    if(responseBody.notes.userMessage!=undefined&&responseBody.notes.clashes!=undefined)",
									"    {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"",
									"     //influencer validate usernames and email",
									"        pm.test(\"Invalid email or username. userMessage: \"+ responseBody.notes.userMessage , function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Cannot accept EOI, email already in use\",",
									"                                                                    \"Email may not be empty\",",
									"                                                                    \"Instagram username contains invalid characters\",",
									"                                                                    \"Facebook username contains invalid characters\",",
									"                                                                    \"Pinterest username contains invalid characters\",",
									"                                                                    \"Twitter username contains invalid characters\",",
									"                                                                    \"Youtube username contains invalid characters\",",
									"                                                                    \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{tmemail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/accept/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "EOI Is Deleted from EOIs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    //if PUT call is successful then eoi is deleted in betaInvitation collection and eoi is added to users instead",
									"    pm.test(\"Eoi doesn't exist in eoi collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"tmemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EOI Is Added to Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//the current call should return a user object if the eoi has been added ",
									"pm.test(\"Eoi with username '\" + pm.variables.get(\"generatedUsername\") +\"has been added to user collection\", function () {",
									"    pm.expect(responseBody.object.username).to.equal(pm.variables.get(\"generatedUsername\"));",
									"});",
									"//pm.variables.set(\"createdUsername\")",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{test}}user/{{generatedUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{generatedUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reject TM",
			"item": [
				{
					"name": "Use Email to Find EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi is part of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"rejectTMemail\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// rejects influencer or manager",
									"//deletes from betaInvitation",
									"",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200. Given eoi is rejected\");",
									"",
									"    //if 200 then the email should be valid",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"rejectTMemail\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status is 400\");",
									"    ",
									"    // call returns 400 if email is empty or if incorrect betaInvitation type is given, (only allowed for influencers)",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email or invalid eoi type\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Email may not be empty\", \"Invalid BetaInvite type. No email template found.\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{rejectTMemail}}\"\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/reject/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"reject",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Doesn't Exist After Reject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi is not part of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"rejectTMemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reject INF EOI",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify EOI Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //should return an eoi iobject if status i 200",
									"    //last part of url contains id -pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, returns eoi object with id \"+responseBody.object.id, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //testing to see if returned object is an eoi",
									"    // eoi statuses: \"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"",
									"    pm.test(\"Returned eoi has the status \"+ responseBody.object.status, function(){",
									"        pm.expect(responseBody.object.status).to.be.oneOf([\"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"]);",
									"    })",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes != null && responseBody.notes.userMessage==null)",
									"    {",
									"        pm.test(\"Status 400. Given eoi id '\"+pm.request.url.path[2] +\"' doesn't exist\", function(){",
									"            pm.expect(responseBody.notes.exists).to.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised, only for hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi/{{id}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//deletes given id from betaInvitation collections",
									"// no checks are done before deleting in backend",
									"//will return 200 even if no eoi is found and no eoi is deleted",
									"",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //should return an eoi object if status i 200",
									"    //last part of url contains id -pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, deletes eoi object with id \"+pm.request.url.path[2], function () {",
									"        pm.response.to.have.status(200);",
									"",
									"    });",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes != null && responseBody.notes.userMessage==null)",
									"    {",
									"        pm.test(\"Given eoi id '\"+pm.request.url.path[2] +\"' doesn't exist\", function(){",
									"            pm.expect(responseBody.notes.exists).to.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised, only for hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}eoi/{{id}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify EOI has Been Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //should return an eoi iobject if status i 200",
									"    //last part of url contains id pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, returns eoi object with id \"+responseBody.object.id, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //testing to see if returned object is an eoi",
									"    // eoi statuses: \"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"",
									"    pm.test(\"Returned eoi has the status \"+ responseBody.object.status, function(){",
									"        pm.expect(responseBody.object.status).to.be.oneOf([\"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"]);",
									"    })",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes != null && responseBody.notes.userMessage==null)",
									"    {",
									"        pm.test(\"Status 400. Given eoi id '\"+pm.request.url.path[2] +\"' doesn't exist\", function(){",
									"            pm.expect(responseBody.notes.exists).to.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised, only for hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi/{{id}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reject INF ARCHIVED",
			"item": [
				{
					"name": "Use Email to Find EOI (influencers, ARCHIVED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi is not part of ARCHIVED eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"email\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&status=ARCHIVED&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED",
									"description": "500 if not enum"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//only for influencers",
									"//sends email",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200.\");",
									"",
									"    //if 200 then the email should be valid",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"email\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status is 400\");",
									"    ",
									"    // call returns 400 if email is empty or if incorrect betaInvitation type is given, (only allowed for influencers)",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email or invalid eoi type\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Email may not be empty\", \"Invalid BetaInvite type. No email template found.\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/archive/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"archive",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "EOI Part of Archived List (inluencer, ARCHIVED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    //if PUT call is successful then the status of given eoi is changed to ARCHIVED",
									"    pm.test(\"Eoi exist in archived eoi list\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"email\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&status=ARCHIVED&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED",
									"description": "500 if not enum"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// rejects influencer or manager",
									"//sends email to influencer ",
									"//deletes from betaInvitation",
									"",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200. Given eoi is rejected\");",
									"",
									"    //if 200 then the email should be valid",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"email\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status is 400\");",
									"    ",
									"    // call returns 400 if email is empty or if incorrect betaInvitation type is given, (only allowed for influencers)",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email or invalid eoi type\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Email may not be empty\", \"Invalid BetaInvite type. No email template found.\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"{{email}}\"\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/reject/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"reject",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Use Email to Find EOI (influencers)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi is not part of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"email\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Influencer EOI Not WARM (Sends ConfirmationEmail)",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email in Use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    pm.test(\"Email is not used by an influencer or warminfluencer. Given email: \"+ pm.variables.get(\"newINFemail\"),function(){",
									"        pm.expect( emailExist(responseBody.page.content, pm.variables.get(\"newINFemail\"))).to.equal(false);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//------------Function",
									"",
									"function emailExist(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}search/user?size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "keyword",
									"value": "thenotsoperfectmum",
									"disabled": true
								},
								{
									"key": "categories",
									"value": "1",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify EOI Doesn't Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi doesn't exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"newINFemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Inf EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Status is 200, for given email \" + pm.variables.get(\"newINFemail\"));",
									"",
									"    pm.test(\"Given email does not belong to a warminfluencer\",function(){",
									"        pm.expect(responseBody.notes.isWarm).to.equal(false);",
									"    })",
									"",
									"    //if status is 200 then non of the reqierd fields should be missing/not given in request",
									"    pm.test(\"All required fields are given\", function () {",
									"        pm.expect(missingFields()).to.equal(false);",
									"    });",
									"}",
									"",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status is 400\");",
									"",
									"    if(requestBody.type==\"\" || requestBody.type==undefined)",
									"    {",
									"        pm.test(\"No type given\");",
									"    }",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    else if (responseBody.notes.userMessage != undefined && responseBody.notes.clashes != undefined) {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if (responseBody.notes.userMessage != undefined) {",
									"",
									"        // Check if email is already used and if usernames contains invalid characters ",
									"        pm.test(\"Invalid email or username. userMessage: \" + responseBody.notes.userMessage, function () {",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([",
									"                \"Email already in use. Contact support@hypetap.com if you have any questions.\",",
									"                \"Instagram username contains invalid characters\",",
									"                \"Facebook username contains invalid characters\",",
									"                \"Pinterest username contains invalid characters\",",
									"                \"Twitter username contains invalid characters\",",
									"                \"Youtube username contains invalid characters\",",
									"                \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"    // call also returns \"missingFields:true\" for an invalid email",
									"    // the function missingFields() returns true if any required fields are empty of if email is invalid",
									"    // fields will be undefined in postman if they don't exist/ can't be found",
									"    else if (responseBody.notes.missingFields != undefined || responseBody.notes.locationMissing!=undefined) ",
									"    {",
									"        pm.test(\"Required fields are missing or email is invalid\", function () {",
									"            pm.expect(missingFields()).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//-----------Functions",
									"",
									"function missingFields() ",
									"{",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./;",
									"",
									"    if (requestBody.firstName == undefined || requestBody.firstName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.lastName == undefined || requestBody.lastName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.email == undefined || requestBody.email == \"\" ||",
									"            validEmail.test(pm.variables.get(\"newINFemail\"))==false) //invalid email also returns \"missingFields: true\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.type == undefined || requestBody.type == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.currentLocation == undefined || requestBody.currentLocation == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if ( (requestBody.socialUrls.facebook == undefined || requestBody.socialUrls.facebook == \"\") &&",
									"            (requestBody.socialUrls.twitter == undefined || requestBody.socialUrls.twitter == \"\") &&",
									"            (requestBody.socialUrls.instagram==undefined || requestBody.socialUrls.instagram==\"\") &&",
									"            (requestBody.socialUrls.youtube==undefined || requestBody.socialUrls.youtube==\"\") &&",
									"            (requestBody.socialUrls.pinterest==undefined || requestBody.socialUrls.pinterest==\"\") &&",
									"            (requestBody.socialUrls.blog==undefined || requestBody.socialUrls.blog==\"\") )",
									"    {",
									"        return true;",
									"    }",
									"    else ",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"Kobe\",\n    \"lastName\": \"Bryant\",\n    \"email\":\"{{newINFemail}}\",\n    \"currentLocation\":\"Melbourne (Australia)\",\n    \"type\":\"influencer\",\n    \"socialUrls\":\n    {\n        \"facebook\":\"\",\n        \"twitter\":\"\",\n        \"instagram\":\"kobebryant\",\n        \"youtube\":\"\",\n        \"pinterest\":\"\",\n        \"blogs\":[]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi",
							"host": [
								"{{test}}eoi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate EOI Is in New EOI Lists (influencer, NEW)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi exist in list of NEW eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"newINFemail\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&status=NEW&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Influencer EOI WARM (Sends AcceptEOIEmail)",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email in Use (Returns Warm and Influncer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    pm.test(\"Email belongs to warminfluencer. Given email: \"+ pm.variables.get(\"warmNewINFemail\"),function(){",
									"        pm.expect( emailExist(responseBody.page.content, pm.variables.get(\"warmNewINFemail\"))).to.equal(true);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//------------Function",
									"",
									"function emailExist(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}search/user?profileStatus=warminfluencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "keyword",
									"value": "thenotsoperfectmum",
									"disabled": true
								},
								{
									"key": "categories",
									"value": "1",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "warminfluencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify EOI Doesn't Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi doesn't exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"warmNewINFemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Inf EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Status is 200, for given email \" + pm.variables.get(\"newINFemail\"));",
									"",
									"    pm.test(\"Given email belongs to a warminfluencer, an accepted eoi email will be sent to the warminfluencer\",function(){",
									"        pm.expect(responseBody.notes.isWarm).to.equal(true);",
									"    })",
									"",
									"    //if status is 200 then non of the reqierd fields should be missing/not given in request",
									"    pm.test(\"All required fields are given\", function () {",
									"        pm.expect(missingFields()).to.equal(false);",
									"    });",
									"}",
									"",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status is 400\");",
									"",
									"    if(requestBody.type==\"\" || requestBody.type==undefined)",
									"    {",
									"        pm.test(\"No type given\");",
									"    }",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    else if (responseBody.notes.userMessage != undefined && responseBody.notes.clashes != undefined) {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if (responseBody.notes.userMessage != undefined) {",
									"",
									"        // Check if email is already used and if usernames contains invalid characters ",
									"        pm.test(\"Invalid email or username. userMessage: \" + responseBody.notes.userMessage, function () {",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([",
									"                \"Email already in use. Contact support@hypetap.com if you have any questions.\",",
									"                \"Instagram username contains invalid characters\",",
									"                \"Facebook username contains invalid characters\",",
									"                \"Pinterest username contains invalid characters\",",
									"                \"Twitter username contains invalid characters\",",
									"                \"Youtube username contains invalid characters\",",
									"                \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"    // call also returns \"missingFields:true\" for an invalid email",
									"    // the function missingFields() returns true if any required fields are empty of if email is invalid",
									"    // fields will be undefined in postman if they don't exist/ can't be found",
									"    else if (responseBody.notes.missingFields != undefined || responseBody.notes.locationMissing!=undefined) ",
									"    {",
									"        pm.test(\"Required fields are missing or email is invalid\", function () {",
									"            pm.expect(missingFields()).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//-----------Functions",
									"",
									"function missingFields() ",
									"{",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./;",
									"",
									"    if (requestBody.firstName == undefined || requestBody.firstName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.lastName == undefined || requestBody.lastName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.email == undefined || requestBody.email == \"\" ||",
									"            validEmail.test(pm.variables.get(\"newINFemail\"))==false) //invalid email also returns \"missingFields: true\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.type == undefined || requestBody.type == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.currentLocation == undefined || requestBody.currentLocation == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if ( (requestBody.socialUrls.facebook == undefined || requestBody.socialUrls.facebook == \"\") &&",
									"            (requestBody.socialUrls.twitter == undefined || requestBody.socialUrls.twitter == \"\") &&",
									"            (requestBody.socialUrls.instagram==undefined || requestBody.socialUrls.instagram==\"\") &&",
									"            (requestBody.socialUrls.youtube==undefined || requestBody.socialUrls.youtube==\"\") &&",
									"            (requestBody.socialUrls.pinterest==undefined || requestBody.socialUrls.pinterest==\"\") &&",
									"            (requestBody.socialUrls.blog==undefined || requestBody.socialUrls.blog==\"\") )",
									"    {",
									"        return true;",
									"    }",
									"    else ",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"Kobe\",\n    \"lastName\": \"Bryant\",\n    \"email\":\"{{warmNewINFemail}}\",\n    \"currentLocation\":\"Melbourne (Australia)\",\n    \"type\":\"influencer\",\n    \"socialUrls\":\n    {\n        \"facebook\":\"\",\n        \"twitter\":\"\",\n        \"instagram\":\"kobebryant\",\n        \"youtube\":\"\",\n        \"pinterest\":\"\",\n        \"blogs\":[]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi",
							"host": [
								"{{test}}eoi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Not Added to EOI List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Warminfluencer was not added to the list of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"warmNewINFemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Create and Accept EOI Existing Social Account",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Inf EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Status is 200, for given email \" + pm.variables.get(\"newINFemail\"));",
									"",
									"    pm.test(\"Given email does not belong to a warminfluencer\",function(){",
									"        pm.expect(responseBody.notes.isWarm).to.equal(false);",
									"    })",
									"",
									"    //if status is 200 then non of the reqierd fields should be missing/not given in request",
									"    pm.test(\"All required fields are given\", function () {",
									"        pm.expect(missingFields()).to.equal(false);",
									"    });",
									"}",
									"",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status is 400\");",
									"",
									"    if(requestBody.type==\"\" || requestBody.type==undefined)",
									"    {",
									"        pm.test(\"No type given\");",
									"    }",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    else if (responseBody.notes.userMessage != undefined && responseBody.notes.clashes != undefined) {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if (responseBody.notes.userMessage != undefined) {",
									"",
									"        // Check if email is already used and if usernames contains invalid characters ",
									"        pm.test(\"Invalid email or username. userMessage: \" + responseBody.notes.userMessage, function () {",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([",
									"                \"Email already in use. Contact support@hypetap.com if you have any questions.\",",
									"                \"Instagram username contains invalid characters\",",
									"                \"Facebook username contains invalid characters\",",
									"                \"Pinterest username contains invalid characters\",",
									"                \"Twitter username contains invalid characters\",",
									"                \"Youtube username contains invalid characters\",",
									"                \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"    // call also returns \"missingFields:true\" for an invalid email",
									"    // the function missingFields() returns true if any required fields are empty of if email is invalid",
									"    // fields will be undefined in postman if they don't exist/ can't be found",
									"    else if (responseBody.notes.missingFields != undefined || responseBody.notes.locationMissing!=undefined) ",
									"    {",
									"        pm.test(\"Required fields are missing or email is invalid\", function () {",
									"            pm.expect(missingFields()).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//-----------Functions",
									"",
									"function missingFields() ",
									"{",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./;",
									"",
									"    if (requestBody.firstName == undefined || requestBody.firstName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.lastName == undefined || requestBody.lastName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.email == undefined || requestBody.email == \"\" ||",
									"            validEmail.test(pm.variables.get(\"newINFemail\"))==false) //invalid email also returns \"missingFields: true\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.type == undefined || requestBody.type == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.currentLocation == undefined || requestBody.currentLocation == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if ( (requestBody.socialUrls.facebook == undefined || requestBody.socialUrls.facebook == \"\") &&",
									"            (requestBody.socialUrls.twitter == undefined || requestBody.socialUrls.twitter == \"\") &&",
									"            (requestBody.socialUrls.instagram==undefined || requestBody.socialUrls.instagram==\"\") &&",
									"            (requestBody.socialUrls.youtube==undefined || requestBody.socialUrls.youtube==\"\") &&",
									"            (requestBody.socialUrls.pinterest==undefined || requestBody.socialUrls.pinterest==\"\") &&",
									"            (requestBody.socialUrls.blog==undefined || requestBody.socialUrls.blog==\"\") )",
									"    {",
									"        return true;",
									"    }",
									"    else ",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"Kobe\",\n    \"lastName\": \"Bryant\",\n    \"email\":\"dumbanddummy1+kobybryaant@gmail.com\",\n    \"currentLocation\":\"Melbourne (Australia)\",\n    \"type\":\"influencer\",\n    \"socialUrls\":\n    {\n        \"facebook\":\"\",\n        \"twitter\":\"\",\n        \"instagram\":\"melbournejade\",\n        \"youtube\":\"\",\n        \"pinterest\":\"\",\n        \"blogs\":[]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi",
							"host": [
								"{{test}}eoi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate EOI Is in New EOI Lists (influencer, NEW)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi exist in list of NEW eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, \"dumbanddummy1+kobybryaant@gmail.com\" )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&status=NEW&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum"
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//will delete betaInvitation and create new user if successful",
									"//sends email to user",
									"",
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200. Username generated: \" + responseBody.object);",
									"",
									"    //saves returned username to check if it exit in the user collection!",
									"    pm.variables.set(\"generatedUsername\", responseBody.object);",
									"",
									"    //if 200 then the email should be valid",
									"",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"influenceremail\"))).to.equal(true);",
									"    });",
									"",
									"}",
									"",
									"if(pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status is 400\");",
									"",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    if(responseBody.notes.userMessage!=undefined&&responseBody.notes.clashes!=undefined)",
									"    {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"",
									"     //influencer validate usernames and email",
									"        pm.test(\"Invalid email or username. userMessage: \"+ responseBody.notes.userMessage , function(){",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Cannot accept EOI, email already in use\",",
									"                                                                    \"Email may not be empty\",",
									"                                                                    \"Instagram username contains invalid characters\",",
									"                                                                    \"Facebook username contains invalid characters\",",
									"                                                                    \"Pinterest username contains invalid characters\",",
									"                                                                    \"Twitter username contains invalid characters\",",
									"                                                                    \"Youtube username contains invalid characters\",",
									"                                                                    \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Invalid email. \" + responseBody.notes.userMessage, function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"EOI for email not found\");",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"dumbanddummy1+kobybryaant@gmail.com\",\n    \"description\":\"t\",\n    \"descriptionLong\":\"t\",\n    \"categories\":[\"Beauty\"],\n    \"gender\": \"OTHER\", \n    \"profileImage\":\n    {\n        \"bytes\":\"\",\n        \"contentType\":\"image/jpeg\"\n        },\n        \n\n\n\n        \n        \"coverImage\":\n        {\n            \"bytes\":\"\",\n    \"contentType\":\"image/jpeg\"\n    }\n}   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/accept/",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"accept",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "EOI Is Deleted from EOIs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    //if PUT call is successful then eoi is deleted in betaInvitation collection and eoi is added to users instead",
									"    pm.test(\"Eoi still exists in eoi collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, \"dumbanddummy1+kobybryaant@gmail.com\" )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Create Influencer EOI (Used Email)",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Email in Use",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    pm.test(\"Email is already used by an influencer or warminfluencer. Given email: \"+ pm.variables.get(\"negNewINFemail\"),function(){",
									"        pm.expect(emailExist(responseBody.page.content, pm.variables.get(\"negNewINFemail\"))).to.equal(true);",
									"    })",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//------------Function",
									"",
									"function emailExist(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}search/user?size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "keyword",
									"value": "thenotsoperfectmum",
									"disabled": true
								},
								{
									"key": "categories",
									"value": "1",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify EOI Doesn't Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi doesn't exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"negNewINFemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Inf EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Status is 200, for given email \" + pm.variables.get(\"newINFemail\"));",
									"",
									"    pm.test(\"Given email does not belong to a warminfluencer\",function(){",
									"        pm.expect(responseBody.notes.isWarm).to.equal(false);",
									"    })",
									"",
									"    //if status is 200 then non of the reqierd fields should be missing/not given in request",
									"    pm.test(\"All required fields are given\", function () {",
									"        pm.expect(missingFields()).to.equal(false);",
									"    });",
									"}",
									"",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status is 400\");",
									"",
									"    if(requestBody.type==\"\" || requestBody.type==undefined)",
									"    {",
									"        pm.test(\"No type given\");",
									"    }",
									"    // notes.clashes is only returned when one of the social media accounts are already connected to hypetap",
									"    else if (responseBody.notes.userMessage != undefined && responseBody.notes.clashes != undefined) {",
									"        pm.test(\"Invalid platform. \" + responseBody.notes.userMessage);",
									"    }",
									"    else if (responseBody.notes.userMessage != undefined) {",
									"",
									"        // Check if email is already used and if usernames contains invalid characters ",
									"        pm.test(\"Invalid email or username. userMessage: \" + responseBody.notes.userMessage, function () {",
									"            pm.expect(responseBody.notes.userMessage).to.be.oneOf([",
									"                \"Email already in use. Contact support@hypetap.com if you have any questions.\",",
									"                \"Instagram username contains invalid characters\",",
									"                \"Facebook username contains invalid characters\",",
									"                \"Pinterest username contains invalid characters\",",
									"                \"Twitter username contains invalid characters\",",
									"                \"Youtube username contains invalid characters\",",
									"                \"Blog link cannot contain spaces\"]);",
									"        });",
									"    }",
									"    // call also returns \"missingFields:true\" for an invalid email",
									"    // the function missingFields() returns true if any required fields are empty of if email is invalid",
									"    // fields will be undefined in postman if they don't exist/ can't be found",
									"    else if (responseBody.notes.missingFields != undefined || responseBody.notes.locationMissing!=undefined) ",
									"    {",
									"        pm.test(\"Required fields are missing or email is invalid\", function () {",
									"            pm.expect(missingFields()).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"//-----------Functions",
									"",
									"function missingFields() ",
									"{",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./;",
									"",
									"    if (requestBody.firstName == undefined || requestBody.firstName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.lastName == undefined || requestBody.lastName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.email == undefined || requestBody.email == \"\" ||",
									"            validEmail.test(pm.variables.get(\"newINFemail\"))==false) //invalid email also returns \"missingFields: true\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.type == undefined || requestBody.type == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.currentLocation == undefined || requestBody.currentLocation == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if ( (requestBody.socialUrls.facebook == undefined || requestBody.socialUrls.facebook == \"\") &&",
									"            (requestBody.socialUrls.twitter == undefined || requestBody.socialUrls.twitter == \"\") &&",
									"            (requestBody.socialUrls.instagram==undefined || requestBody.socialUrls.instagram==\"\") &&",
									"            (requestBody.socialUrls.youtube==undefined || requestBody.socialUrls.youtube==\"\") &&",
									"            (requestBody.socialUrls.pinterest==undefined || requestBody.socialUrls.pinterest==\"\") &&",
									"            (requestBody.socialUrls.blog==undefined || requestBody.socialUrls.blog==\"\") )",
									"    {",
									"        return true;",
									"    }",
									"    else ",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"Kobe\",\n    \"lastName\": \"Bryant\",\n    \"email\":\"{{negNewINFemail}}\",\n    \"currentLocation\":\"Melbourne (Australia)\",\n    \"type\":\"influencer\",\n    \"socialUrls\":\n    {\n        \"facebook\":\"\",\n        \"twitter\":\"\",\n        \"instagram\":\"kobebryant\",\n        \"youtube\":\"\",\n        \"pinterest\":\"\",\n        \"blogs\":[]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi",
							"host": [
								"{{test}}eoi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate EOI in EOI List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi was not added to list of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"negNewINFemail\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=influencer",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Notes and/or SocialUrls",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check EOI Details Before Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //saves the response so that it can be used to revert changes",
									"    pm.variables.set(\"eoi\", responseBody.object); ",
									"    pm.environment.set(\"eoiOriginal\", JSON.stringify(pm.variables.get(\"eoi\")));",
									"",
									"    ",
									"",
									"    //should return an eoi iobject if status i 200",
									"    //last part of url contains id -pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, returns eoi object with id \"+responseBody.object.id + \", type \" +responseBody.object.type, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //testing to see if returned object is an eoi",
									"    // eoi statuses: \"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"",
									"    pm.test(\"Returned eoi has the status \"+ responseBody.object.status+\" and type \"+responseBody.object.type, function(){",
									"        pm.expect(responseBody.object.status).to.be.oneOf([\"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"]);",
									"    });",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes != null && responseBody.notes.userMessage==null)",
									"    {",
									"        pm.test(\"Given eoi id doesn't exist\", function(){",
									"            pm.expect(responseBody.notes.exists).to.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised, only for hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi/{{notesUpdateId}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{notesUpdateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates Notes or Social Url  (BetaInvitation)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    //saves request to be able to check if right updates where made",
									"    pm.variables.set(\"eoiRequest\", requestBody); ",
									"    pm.environment.set(\"eoiRequest\", JSON.stringify(pm.variables.get(\"eoiRequest\")));",
									"",
									"    //should return an eoi object if status i 200",
									"    //last part of url contains id -pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, returns eoi object with id \"+responseBody.object.id + \" with type \"+responseBody.object.type, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //testing to see if returned object is an eoi",
									"    // eoi statuses: \"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"",
									"    pm.test(\"Status is of an eoi. Returned eoi has the status \"+ responseBody.object.status, function(){",
									"        pm.expect(responseBody.object.status).to.be.oneOf([\"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"]);",
									"    })",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    //call checks given platform and username aginst users not eois (betaInvitation)",
									"    pm.test(\"Status 400. Social profile account for platform \"+ responseBody.notes.clashes + \" already exist at Hypetap\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"The INSTAGRAM account(s) you entered already exists on our platform. Contact support@hypetap.com if you have any questions.\");",
									"    })",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Eoi id not found\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"EOI not found\");",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notes\":\"notes not in australia\",\n    \"socialUrls\":{\n        \"instagram\":\"theinspiredd\",\n        \"facebook\":\"hej\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi/{{notesUpdateId}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{notesUpdateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If EOI was Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //should return an eoi iobject if status i 200",
									"    //last part of url contains id -pm.request.url.path[2]",
									"    pm.test(\"Status code is 200, returns eoi object with id \"+responseBody.object.id, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(responseBody.object.id).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    //testing to see if returned object is an eoi",
									"    // eoi statuses: \"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"",
									"    pm.test(\"Returned eoi has the status \"+ responseBody.object.status+\" and type \"+responseBody.object.type,function(){",
									"        pm.expect(responseBody.object.status).to.be.oneOf([\"ACCEPTED\",\"REJECTED\",\"COMPLETE\",\"PULLED\",\"NEW\",\"ARCHIVED\"]);",
									"    });",
									"",
									"    //check if update was made",
									"    // notes or socialUrls may not exist in saved request if non were given  ",
									"    if(pm.variables.get(\"eoiRequest\").notes!=undefined && pm.variables.get(\"eoiRequest\").socialUrls!=undefined)",
									"    {",
									"        ",
									"        pm.test(\"Notes have been updated\", function(){",
									"            pm.expect(responseBody.object.latestNote.body).to.equal(pm.variables.get(\"eoiRequest\").notes);",
									"        });",
									"",
									"        pm.test(\"SocialUrls have been updated\", function(){",
									"           pm.expect( socialUrlMatch(responseBody.object.socialUrls, pm.variables.get(\"eoiRequest\").socialUrls) )",
									"           .to.not.equal(false);",
									"        }); ",
									"    }",
									"    else if(pm.variables.get(\"eoiRequest\").notes!=undefined)",
									"    {",
									"        pm.test(\"Notes have been updated\", function(){",
									"            pm.expect(responseBody.object.latestNote.body).to.equal(pm.variables.get(\"eoiRequest\").notes);",
									"",
									"        });",
									"    }",
									"    else if (pm.variables.get(\"eoiRequest\").socialUrls!=undefined)",
									"    {",
									"        pm.test(\"SocialUrls have been updated\", function()",
									"        {",
									"            pm.expect( (socialUrlMatch(responseBody.object.socialUrls, pm.variables.get(\"eoiRequest\").socialUrls)) )",
									"            .to.not.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes != null && responseBody.notes.userMessage==null)",
									"    {",
									"        pm.test(\"Given eoi id doesn't exist\", function(){",
									"            pm.expect(responseBody.notes.exists).to.equal(false);",
									"        });",
									"    }",
									"",
									"}",
									"else if (pm.response.code==403)",
									"{",
									"    pm.test(\"Not authorised, only for hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"//-----------------Functions",
									"",
									"// checks if the two given socialUrls match",
									"// returnedSocialUrls = response from this get call,",
									"//updatedSocialUrls = given in request part of PUT eoi/id",
									"function socialUrlMatch(returnedSocialUrls, updatedSocialUrls)",
									"{",
									"    for (let socialUrl in updatedSocialUrls)// for(let i=0; i< updatedSocialUrls.length; ++i)",
									"    {",
									"       switch (socialUrl)",
									"       {",
									"            case \"facebook\":",
									"                if(returnedSocialUrls.facebook!=updatedSocialUrls.facebook)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"instagram\":",
									"            ",
									"                if(returnedSocialUrls.instagram!=updatedSocialUrls.instagram)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"twitter\":",
									"                if(returnedSocialUrls.twitter!=updatedSocialUrls.twitter)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"youtube\":",
									"                if(returnedSocialUrls.youtube!=updatedSocialUrls.youtube)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"pinterest\":",
									"                if(returnedSocialUrls.pinterest!=updatedSocialUrls.pinterest)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"blog\":",
									"                if(returnedSocialUrls.blog!=updatedSocialUrls.blog)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"            case \"tiktok\":",
									"                if(returnedSocialUrls.tiktok!=updatedSocialUrls.tiktok)",
									"                {      ",
									"                    return false;",
									"                }",
									"            break;",
									"       }",
									"    }",
									"    return true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi/{{notesUpdateId}}",
							"host": [
								"{{test}}eoi"
							],
							"path": [
								"{{notesUpdateId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Manager EOI",
			"item": [
				{
					"name": "EOI Doesn't Already Exist (Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi doesn't exist in list of eois\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"email\") )).to.equal(false);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create TM EOI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status is 200, for given email \" +pm.variables.get(\"newTMemail\"));",
									"",
									"    //if 200 then the email should be valid",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"",
									"    pm.test(\"Given email is valid\", function(){",
									"        pm.expect(validEmail.test(pm.variables.get(\"newTMemail\"))).to.equal(true);",
									"    });",
									"",
									"    //if status is 200 then non of the required fields should be missing/not given in request",
									"    pm.test(\"All required fields are given\", function () {",
									"        pm.expect(missingFields()).to.equal(false);",
									"    });",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status is 400\");",
									"",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status is 400. userMessage: \"+ responseBody.notes.userMessage);",
									"    }",
									"    else if(requestBody.type==\"\" || requestBody.type==undefined)",
									"    {",
									"        pm.test(\"No type given\");",
									"    }",
									"    // call also returns \"missingFields:true\" for an invalid email",
									"    // the function missingFields() returns true if any required fields are empty of if email is invalid",
									"    // fields will be undefined in postman if they don't exist/ can't be found",
									"    else if (responseBody.notes.missingFields != undefined || responseBody.notes.locationMissing!=undefined) ",
									"    {",
									"        pm.test(\"Required fields are missing or email is invalid\", function () {",
									"            pm.expect(missingFields()).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
									"}",
									"",
									"",
									"//-----------Functions",
									"",
									"function missingFields() ",
									"{",
									"    var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; ",
									"",
									"    if (requestBody.firstName == undefined || requestBody.firstName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.lastName == undefined || requestBody.lastName == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.email == undefined || requestBody.email == \"\" ||",
									"                validEmail.test(pm.variables.get(\"newTMemail\"))==false) //invalid email also returns \"missingFields: true\"",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.type == undefined || requestBody.type == \"\") ",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.officeLocation == undefined || requestBody.officeLocation == \"\") //manager specific",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.companyName == undefined || requestBody.companyName == \"\") //manager specific",
									"    {",
									"        return true;",
									"    }",
									"    else if (requestBody.website == undefined || requestBody.website == \"\") //manager specific",
									"    {",
									"        return true;",
									"    }",
									"    else ",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\":\"Dianaa\",\n    \"lastName\":\"Rosss\",\n    \"email\":\"{{newTMemail}}\",\n    \"type\":\"manager\",\n    \"companyName\":\"Dee Dum\",\n    \"officeLocation\":\"Melbourne (Australia)\",\n    \"website\":\"www.deedum.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi",
							"host": [
								"{{test}}eoi"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate EOI Is in NEW EOI Lists (Manager, NEW)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"    pm.test(\"Eoi exist in list of eois/ in the betaInvitation collection\", function(){",
									"        pm.expect(eoiExists(responseBody.object.content, pm.variables.get(\"newTMemail\") )).to.equal(true);",
									"    });",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//Checks if eoi exists by using given email ",
									"//Checks if eoi exists by using given email ",
									"function eoiExists(list, email)",
									"{",
									"    for(let i=0; i<list.length; ++i)",
									"    {",
									"        if(list[i].body.email==email)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"        if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 )",
									"        {",
									"            return false;",
									"        }",
									"        else        //socialUrls is an object, need to compair each field in it ",
									"        {",
									"            foreach(platform in eoi.socialUrls)",
									"            {",
									"                if(platform.search(keyword)==-1)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if(eoi.firstName.search(keyword)==-1 || ",
									"        eoi.lastName.search(keyword)==-1 || ",
									"        eoi.email.search(keyword)==-1 ||",
									"        eoi.website.search(keyword)==-1 ||",
									"        eoi.companyName.search(keyword)==-1)",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.socialUrls.facebook == null || list[i].body.socialUrls.facebook ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.instagram.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.socialUrls.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}eoi?size=1000&type=manager",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1000",
									"description": "Needed for tests to work"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW",
									"description": "500 if not enum",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{keyword}}",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\"",
									"disabled": true
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"description": "Melbourne%20(Australia)",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "500 if not enum, only influencers",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search EOI (Lists All EOI)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//Can be used to access query parameter values",
							"//console.log(pm.request.url.query.toObject().keyword);",
							"",
							"",
							"if (pm.response.code == 200) ",
							"{",
							"    var responseBody = pm.response.json();",
							"",
							"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois\");",
							"",
							"    //only check if response contains any results",
							"    if (responseBody.type != undefined) ",
							"    {",
							"        //call only allows type to be either influencer or manager",
							"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
							"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
							"        });",
							"    }",
							"",
							"",
							"    //check if resoponse contains given search filters",
							"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
							"   // will return true if list is empty, if there are no eois returned",
							"    pm.test(\"Filter options are working\", function(){",
							"        pm.expect(responseContainsSearch(responseBody.object.content, ",
							"                                                pm.request.url.query.toObject().keyword, ",
							"                                                pm.request.url.query.toObject().gender, ",
							"                                                pm.request.url.query.toObject().status, ",
							"                                                pm.request.url.query.toObject().currentLocation,",
							"                                                pm.request.url.query.toObject().platform, ",
							"                                                pm.request.url.query.toObject().minFollowing, ",
							"                                                pm.request.url.query.toObject().maxFollowing, ",
							"                                                pm.request.url.query.toObject().type, ",
							"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
							"    });",
							"",
							"",
							"}",
							"else if (pm.response.code == 400) ",
							"{",
							"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
							"",
							"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
							"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
							"    });",
							"",
							"}",
							"else if (pm.response.code == 403) ",
							"{",
							"    var responseBody = pm.response.json();",
							"",
							"    if (responseBody.notes != null) ",
							"    {",
							"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
							"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
							"        });",
							"    }",
							"}",
							"",
							"//------------Functions",
							"",
							"//returns false if any objects in given list doesn't have the given type",
							"function matchesType(list, type) {",
							"    for (let i; i < list.length; ++i) ",
							"    {",
							"        if (list[i].body.type != type) ",
							"        {",
							"            return false;",
							"        }",
							"    }",
							"    return true;",
							"}",
							"",
							"//takes one eoi and searches different field depending on type",
							"// keyword search for type influencer matches on fields:",
							"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
							"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
							"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
							"function keywordSearch(eoi, type, keyword)",
							"{",
							"    var regexKeyword = new RegExp('('+ keyword +')',\"i\");",
							"",
							"    // search function will return -1 if no match",
							"    if(type==\"influencer\")",
							"   {",
							"       //if all false then no match, return false",
							"        if( (regexKeyword.test(eoi.firstName) ==false) && ",
							"            (regexKeyword.test(eoi.lastName)==false ) && ",
							"            (regexKeyword.test(eoi.email)==false) &&",
							"            ",
							"            ( (eoi.socialUrls.facebook!=\"\" || eoi.socialUrls.facebook!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.facebook)==false) ) &&",
							"            ",
							"            ( (eoi.socialUrls.instagram!=\"\" || eoi.socialUrls.instagram!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.instagram)==false) ) &&",
							"            ",
							"            ( (eoi.socialUrls.twitter!=\"\" || eoi.socialUrls.twitter!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.twitter)==false) ) &&",
							"            ",
							"            ( (eoi.socialUrls.youtube!=\"\" || eoi.socialUrls.youtube!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.youtube)==false) ) &&",
							"            ",
							"            ( (eoi.socialUrls.pinterest!=\"\" || eoi.socialUrls.pinterest!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.pinterest)==false) ) &&",
							"            ",
							"            ( (eoi.socialUrls.blog!=\"\" || eoi.socialUrls.blog!=null)",
							"            && (regexKeyword.test(eoi.socialUrls.blog)==false) )            ",
							"            )",
							"        {",
							"            return false;",
							"        }",
							"        ",
							"        return true; ",
							"   }",
							"   else //manager",
							"   {",
							"       if( (regexKeyword.test(eoi.firstName)==false) && ",
							"        (regexKeyword.test(eoi.lastName)==false) && ",
							"        (regexKeyword.test(eoi.email)==false) &&",
							"        (regexKeyword.test(eoi.website)==false) &&",
							"        (regexKeyword.test(eoi.companyName)==false))",
							"        {",
							"            return false;",
							"        }",
							"        return false; ",
							"   } ",
							"",
							"}",
							"",
							"//checks each eoi in response to see if they contain/match the given search filter",
							"// will return true if list is empty, if there are no eois returned",
							"//list = response ",
							"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
							"{",
							"",
							"    for (let i = 0; i < list.length; ++i) ",
							"    {",
							"        //type has to be given for call to work",
							"",
							"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
							"        if (keyword != undefined && keyword!=\"\")  ",
							"        {",
							"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
							"        }",
							"        if (status != undefined && status!=\"\") ",
							"        {",
							"            if (list[i].body.status != status) ",
							"            {",
							"               return false;",
							"            }",
							"        }",
							"        if (currentLocation != undefined && currentLocation!=\"\") ",
							"        {",
							"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
							"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
							"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
							"            {",
							"                return false;",
							"            }",
							"        }",
							"    ",
							"        // these fields are only filtered on if type is influencer",
							"        // tiktok is not used in backend ",
							"        if (type == \"influencer\") ",
							"        {",
							"            if (platform != undefined && platform!=\"\") ",
							"            {",
							"                if (platform == \"FACEBOOK\")",
							"                {",
							"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only want to show influencer with a fb account",
							"                    if(parseFloat(list[i].body.socialUrls.facebook) == null || parseFloat(list[i].body.socialUrls.facebook) ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) < parseFloat(minFollowing)) ",
							"                            { ",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }   ",
							"                }                ",
							"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
							"                {",
							"                    ",
							"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
							"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only check for insta",
							"                        if (businessVerified != undefined && businessVerified!=\"\") ",
							"                        {",
							"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) < parseFloat(minFollowing)) ",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }  ",
							"                }",
							"                else if (platform == \"TWITTER\") ",
							"                {",
							"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) < parseFloat(minFollowing)) ",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }   ",
							"                }",
							"                else if(platform==\"YOUTUBE\")",
							"                {",
							"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) < parseFloat(minFollowing)) ",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }   ",
							"                }",
							"                else if(platform==\"PINTEREST\")",
							"                {",
							"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) < parseFloat(minFollowing)) ",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }   ",
							"                }",
							"                else if(platform==\"BLOG\")",
							"                {",
							"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
							"                    {",
							"                        return false;",
							"                    }",
							"                    else",
							"                    {",
							"                        //only filtered on if a platform is given",
							"                        if (minFollowing != undefined && minFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) < parseFloat(minFollowing)) ",
							"                            {",
							"                                return false;",
							"                            }",
							"                        }",
							"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
							"                        {",
							"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) > parseFloat(maxFollowing)) ",
							"                            {",
							"                               return false;",
							"                            }",
							"                        }",
							"                    }   ",
							"                }",
							"            }",
							"            if (gender != undefined && gender!=\"\" ) ",
							"            {",
							"                if(list[i].body.gender!=gender)",
							"                {",
							"                    return false;",
							"                }",
							"            }",
							"        }",
							"    }",
							"    //got here if non of the checks failed ",
							"    return true;",
							"}",
							"",
							"   "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{test}}eoi?size=100000&keyword=dumband&maxFollowing=10000&minFollowing=0&status=NEW&currentLocation=Melbourne (Australia)&platform=INSTAGRAM&type=influencer&pageStart=1&pageEnd=10000",
					"host": [
						"{{test}}eoi"
					],
					"query": [
						{
							"key": "size",
							"value": "100000"
						},
						{
							"key": "sort",
							"value": "dateCreated%2CDESC",
							"disabled": true
						},
						{
							"key": "keyword",
							"value": "dumband",
							"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\""
						},
						{
							"key": "maxFollowing",
							"value": "10000",
							"description": "500 if not number"
						},
						{
							"key": "minFollowing",
							"value": "0",
							"description": "500 if not number"
						},
						{
							"key": "businessVerified",
							"value": "true",
							"description": "500 if not bolean, only influencers",
							"disabled": true
						},
						{
							"key": "gender",
							"value": "FEMALE",
							"description": "gender doesn't exist in betaInvitations, will not filter on gender",
							"disabled": true
						},
						{
							"key": "status",
							"value": "NEW"
						},
						{
							"key": "currentLocation",
							"value": "Melbourne (Australia)"
						},
						{
							"key": "platform",
							"value": "INSTAGRAM"
						},
						{
							"key": "type",
							"value": "influencer"
						},
						{
							"key": "pageStart",
							"value": "1"
						},
						{
							"key": "pageEnd",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Social-update/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//invalid id gives 500",
							"//as well as eoi with invalid/ non existing profile username",
							"// when creating eoi usernames are only checked for invalid characters",
							"",
							"var responseBody = pm.response.json();",
							"",
							"if (pm.response.code == 200) ",
							"{",
							"    pm.test(\"Status is 200 for eoi with id \" +pm.request.url.path[3]);",
							"",
							"    ",
							"    let social = [\"facebookProfile\", \"instagramProfile\", \"twitterProfile\", \"youtubeProfile\",\"pinterestProfile\",\"blogProfile\",\"tiktokProfile\"];",
							"",
							"    // Only check if profile are updated if they exist i.e are not undefined",
							"    for(let i=0; i<social.length; ++i)",
							"    {        ",
							"        if(responseBody.object.socialUrls[social[i]]!=undefined)",
							"        {",
							"            pm.test(\"Update for \"+social[i]+\" was successful. lastResult: \"+ responseBody.object.socialUrls[social[i]].lastResult, function(){",
							"                pm.expect( updateSuccessful( responseBody.object.socialUrls[social[i]] ) ).to.equal(true);",
							"            });",
							"        }",
							"",
							"    }",
							"}",
							"else if (pm.response.code == 403) ",
							"{",
							"    pm.test(\"Unauthorised to make call, only allowed for hypetap\");",
							"}",
							"",
							"//-----------Function",
							"",
							"//returns true if successful otherwise false",
							"// updateSuccess is set to true if successful and to false if not",
							"// dateUpdated and dateLastAttempt will be the same if call is succesfull",
							"function updateSuccessful(socialProfile)",
							"{",
							"    if(socialProfile.updateSuccess==true",
							"        && socialProfile.dateUpdated==socialProfile.dateLastAttempt)",
							"    {",
							"        return true;",
							"    }",
							"    return false;",
							"",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{test}}eoi/social-update/{{socialUpdateId}}",
					"host": [
						"{{test}}eoi"
					],
					"path": [
						"social-update",
						"{{socialUpdateId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\"ms\");",
					"",
					"if(pm.response.code==200)",
					"{",
					"",
					"    //Will only run validation test if call has a request body in mode \"raw\"",
					"    if( pm.request.method!=\"GET\" && pm.request.body!=undefined && pm.request.body.mode==\"raw\")",
					"    {  ",
					"        //language add for list in object key func.",
					"",
					"        var request = JSON.parse(pm.request.body.raw);",
					"        convertedRequest = {};",
					"        obj(request,\"t\");",
					"        //console.log(\"new\",convertedRequest)",
					"",
					"        var containDigits= /\\d{1,}/;",
					"        var onlyDigits =/^[0-9]{1,}$/; //only allows numbers no space",
					"        var notOnlySpace = (/\\S/);",
					"",
					"",
					"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
					"        var validNameNoSpecialChar =/^([A-Z])[A-Za-z\" \"]{1,}$/; //not numbers, start with capital. Allows \" \" for (South Australia) ",
					"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
					"        var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; //have existing func. in backend",
					"        var validPhoneNum = /^[0-9+-]{1,}$/;   // numbers only and - +",
					"    ",
					"        //social profile usernames",
					"        var validateTikTokUsername= /^[\\w\\d_.]+$/;",
					"        var validateFBUsername= /^[\\w\\d\\-.]+$/;",
					"        var validateInstaUsername= /^[\\w\\d_.]+$/;",
					"        var validatePineterestUsername= /^[\\w\\d]+$/;",
					"        var validateTwitterUsername= /[\\w\\d\\-_]+$/;",
					"        var validateYoutubeUsername= /^[\\w\\d\\-_]+$/;",
					"        var validateBlogUsername= /\\s/;    //blog should not contain space",
					"",
					"        //company",
					"        //not only number or only blank space",
					"        if(convertedRequest.company!=undefined)",
					"        {",
					"            pm.test(\"Valid company\", function(){",
					"                pm.expect(onlyDigits.test(convertedRequest.company)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.company)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //websiteUrl\":\" \"",
					"        //needs futher validation",
					"        if(convertedRequest.websiteUrl!=undefined)",
					"        {",
					"            pm.test(\"Valid websiteUrl\", function(){",
					"                pm.expect(notOnlySpace.test(convertedRequest.websiteUrl)).to.equal(true)",
					"            })",
					"        }",
					"        //currentLocation",
					"        // Perth (Australia)",
					"        if(convertedRequest.currentLocation!=undefined)",
					"        {",
					"            pm.test(\"Valid currentLocation\", function(){",
					"                pm.expect(containDigits.test(convertedRequest.currentLocation)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.currentLocation)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //location",
					"        // example Stockholm (Sweden), needs to be allowed space",
					"        if(convertedRequest.location!=undefined)",
					"        {",
					"            pm.test(\"Valid location\", function(){",
					"                pm.expect(containDigits.test(convertedRequest.location)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.location)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //title",
					"        if(convertedRequest.title!=undefined)",
					"        {",
					"            pm.test(\"Valid title\", function(){",
					"                pm.expect(convertedRequest.title).to.not.be.oneOf([\"\", null])",
					"                pm.expect(notOnlySpace.test(convertedRequest.title)).to.equal(true);    //not only spaces",
					"            })",
					"        }",
					"",
					"        //companyName",
					"        if(convertedRequest.companyName!=undefined)",
					"        {",
					"            pm.test(\"Valid company name\", function(){",
					"                pm.expect(convertedRequest.companyName).to.not.be.oneOf([\"\", null])",
					"                pm.expect(notOnlySpace.test(convertedRequest.companyName)).to.equal(true);    //not only spaces",
					"            })",
					"        }",
					"",
					"",
					"        //Address",
					"        //all fields needs to be provided to be valid otherwise get 400. So it's enough to check if one field is given ",
					"        if( (convertedRequest.addressOne!=undefined))",
					"        {",
					"            pm.test(\"Address is valid\", function(){",
					"                pm.expect( convertedRequest.addressOne).to.not.equal(null);",
					"                pm.expect(notOnlySpace.test(convertedRequest.addressOne)).to.equal(true);",
					"",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.state) ).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.country) ).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.suburb) ).to.equal(true);              ",
					"                pm.expect( onlyDigits.test(convertedRequest.postcode) ).to.equal(true);            ",
					"            })",
					"        }",
					"        //first name",
					"        if(convertedRequest.firstName!=undefined)",
					"        {",
					"            pm.test(\"First name is valid\", function(){",
					"                pm.expect((validName.test(convertedRequest.firstName))).to.equal(true);",
					"            });",
					"        }",
					"        //last name",
					"        if(convertedRequest.lastName!=undefined)",
					"        {",
					"            pm.test(\"Last name is valid\", function(){",
					"                pm.expect(validName.test(convertedRequest.lastName)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        if(convertedRequest.gender!=undefined)",
					"        {",
					"            pm.test(\"Gender is valid\", function(){",
					"                pm.expect(convertedRequest.gender).to.be.oneOf([\"FEMALE\", \"MALE\", \"OTHER\"]);",
					"            });",
					"        }",
					"",
					"",
					"        //username",
					"        if(convertedRequest.username!=undefined)",
					"        {",
					"            pm.test(\"Username is valid\", function(){",
					"                pm.expect(validUsername.test(convertedRequest.username)).to.equal(true);",
					"            });",
					"        }",
					"        // displayName",
					"        if(convertedRequest.displayName!=undefined)",
					"        {",
					"            pm.test(\"displayName is valid\", function(){",
					"                pm.expect(notOnlySpace.test(convertedRequest.displayName)).to.equal(true);",
					"            });",
					"        }",
					"        //gender",
					"        if(convertedRequest.gender!=undefined)",
					"        {",
					"            pm.test(\"gender is valid\", function(){",
					"                pm.expect(convertedRequest.gender).to.be.oneOf([\"FEMALE\", \"MALE\", \"OTHER\"]);",
					"            })",
					"        }",
					"",
					"        //socialUrls can be left empty, (\"\"), in sso/manage/add/user for a brand ",
					"        //tiktokProfile.username",
					"        if(convertedRequest.tiktok!=undefined && convertedRequest.tiktok!=\"\")",
					"        {",
					"            pm.test(\"Tiktok username is valid\", function(){",
					"                pm.expect(validateTikTokUsername.test(convertedRequest.tiktok)).to.equal(true);",
					"            });",
					"        }",
					"        ",
					"        //facebookProfile.username",
					"        if(convertedRequest.facebook!=undefined&&convertedRequest.facebook!=\"\")",
					"        {",
					"            pm.test(\"Facebook username is valid\", function(){",
					"                pm.expect(validateFBUsername.test(convertedRequest.facebook)).to.equal(true);",
					"            });",
					"        }",
					"        //instagramProfile.username",
					"        if(convertedRequest.instagram!=undefined&&convertedRequest.instagram!=\"\")",
					"        {",
					"            pm.test(\"Instagram username is valid\", function(){",
					"                pm.expect(validateInstaUsername.test(convertedRequest.instagram)).to.equal(true);",
					"            });",
					"        }",
					"        //pinterestProfile.username",
					"        if(convertedRequest.pinterest!=undefined&&convertedRequest.pinterest!=\"\")",
					"        {",
					"            pm.test(\"Pinterest username is valid\", function(){",
					"                pm.expect(validatePineterestUsername.test(convertedRequest.pinterest)).to.equal(true);",
					"            });",
					"        }",
					"        //twitter.username",
					"        if(convertedRequest.twitter!=undefined&&convertedRequest.twitter!=\"\")",
					"        {",
					"            pm.test(\"Twitter username is valid\", function(){",
					"                pm.expect(validateTwitterUsername.test(convertedRequest.twitter)).to.equal(true);",
					"            });",
					"        }  ",
					"",
					"        //youtube.username",
					"        if(convertedRequest.youtube!=undefined&&convertedRequest.youtube!=\"\")",
					"        {",
					"            pm.test(\"Youtube username is valid\", function(){",
					"                pm.expect(validateYoutubeUsername.test(convertedRequest.youtube)).to.equal(true);",
					"            });",
					"        } ",
					"        ",
					"        //blog",
					"        if(convertedRequest.blog!=undefined&&convertedRequest.blog!=\"\")",
					"        {",
					"            //validateBlog will return true if white space is found",
					"            //so if it returns false, (i.e no space found) then its a valid username",
					"            pm.test(\"Blog username is valid\", function(){",
					"                pm.expect(validateBlogUsername.test(convertedRequest.blog)).to.equal(false);",
					"            });",
					"        }",
					"",
					"        //number",
					"        if(convertedRequest.number!=undefined)",
					"        {",
					"            pm.test(\"number is valid\", function(){",
					"            pm.expect(validPhoneNum.test(convertedRequest.number)).to.equal(true);",
					"            });",
					"        }",
					"",
					"",
					"        //email",
					"        if(convertedRequest.email!=undefined)",
					"        {",
					"            pm.test(\"Email is valid\", function(){",
					"            pm.expect(validEmail.test(convertedRequest.email)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        //description",
					"        if(convertedRequest.description!=undefined)",
					"        {",
					"        pm.test(\"Valid description\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.description)).to.equal(true);",
					"        })",
					"        }",
					"            //descriptionLong",
					"        if(convertedRequest.descriptionLong!=undefined)",
					"        {",
					"        pm.test(\"Valid descriptionLong\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.descriptionLong)).to.equal(true);",
					"        })",
					"        }",
					"        ",
					"    }",
					"",
					"}",
					"",
					"//------------------Functions",
					"",
					"function obj(object,root)",
					"{    ",
					"    Object.entries(object).forEach((entry) => {",
					"    const [key, value] = entry;",
					"",
					"        //to avoid function from failing due to null values",
					"        if(value!=null)",
					"        {",
					"            if(typeof value === \"object\")",
					"            {",
					"                root=key;",
					"                obj(value,root);",
					"            }",
					"            else",
					"            {",
					"                //to stop function from overwriting fileds with same name, (ex username)",
					"                if(convertedRequest.hasOwnProperty(key)==true)  //new test",
					"                {",
					"                    convertedRequest[root+key]= value;  //+\".\"+",
					"                }",
					"                else",
					"                {",
					"                    convertedRequest[key]= value;",
					"                }",
					"",
					"            }",
					"        } ",
					"    });",
					"    ",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "60ac5a3c2181376c976effe7"
		},
		{
			"key": "tmemail",
			"value": "dumbanddummy1+lizcarlson@gmail.com"
		},
		{
			"key": "influenceremail",
			"value": "dumbanddummy1+rhinarafa@gmail.com"
		},
		{
			"key": "rejectTMemail",
			"value": "dumbanddummy1+jojo@gmail.com"
		},
		{
			"key": "newINFemail",
			"value": "dumbanddummy1+kobebryant@gmail.com"
		},
		{
			"key": "newTMemail",
			"value": "dumbanddummy1+dee@gmail.com"
		},
		{
			"key": "email",
			"value": "dumbanddummy1+july@gmail.com"
		},
		{
			"key": "accumulateResponseTime",
			"value": "0"
		},
		{
			"key": "negNewINFemail",
			"value": "a.hypetap+jen@gmail.com"
		},
		{
			"key": "warmNewINFemail",
			"value": "dumbanddummy1+bulbasaur@gmail.com"
		},
		{
			"key": "socialUpdateId",
			"value": "60ac67872181377422ef7993"
		},
		{
			"key": "notesUpdateId",
			"value": "612340752181375cd261e9cb"
		}
	]
}
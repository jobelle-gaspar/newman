{
	"info": {
		"_postman_id": "b6745ad8-c788-40c7-a739-fbdece2d0f48",
		"name": "SEARCH",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search Collaboration -- FINAL",
			"item": [
				{
					"name": "Sort Options",
					"item": [
						{
							"name": "BOSS login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "dumbanddummy1+brooke@gmail.com",
											"description": "dumbanddummy1+melbournejade@gmail.com, dumbanddummy1+brooke@gmail.com",
											"type": "text"
										},
										{
											"key": "password",
											"value": "hypetap1",
											"type": "text"
										},
										{
											"key": "remember-me",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{test}}login",
									"host": [
										"{{test}}login"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Sort (saves unsorted list)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//, start/endDate, dateClosed, budget (only works if a budget type is given)",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.variables.set(\"noSort\", responseBody.content);",
											"",
											"",
											"     //creatingCreators, invitedCreators,",
											"    ascCreatingCreators = responseBody.content.sort(function(a, b) {",
											"    return ( a.creatingCreators -b.creatingCreators);",
											"    });",
											"    //console.log(ascCreatingCreators)",
											"//need to remove null",
											"  /*  ascdateClosed = responseBody.content.sort(function(a, b) {",
											"    return ( a.dateClosed.localeCompare(b.dateClosed));",
											"    });",
											"    console.log(ascdateClosed)",
											"    */",
											"",
											"}",
											"",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Name ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"ascName = noSort.sort(function(a, b) {",
											"    return ( a.name.localeCompare(b.name));",
											"    });",
											"//console.log(ascName)",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"Name is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascName, responseBody.content, \"name\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {",
											"",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=name%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name%2CASC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Name DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascName = noSort.sort(function(a, b) {",
											"    return ( a.name.localeCompare(b.name));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"Name is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascName, responseBody.content, \"name\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i][field])",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)][field])",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=name%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name%2CDESC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Company ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"ascCompany = noSort.sort(function(a, b) {",
											"    return ( a.brand.company.localeCompare(b.brand.company));",
											"    });",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"Company name is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascCompany, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i].brand.company!=response[i].brand.company)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=company%2CASC&page=0&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "company%2CASC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Company DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascCompany = noSort.sort(function(a, b) {",
											"    return ( a.brand.company.localeCompare(b.brand.company));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"Company name is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascCompany, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i].brand.company)",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)].brand.company)",
											"        if(sortedList[i].brand.company!=response[((sortedList.length-1)-i)].brand.company)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=company%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "company%2CDESC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Brand Username ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"ascUsername = noSort.sort(function(a, b) {",
											"    return ( a.brand.username.localeCompare(b.brand.username));",
											"    });",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"Brand username is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascUsername, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i].brand.username!=response[i].brand.username)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=username%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Brand Username DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascUsername = noSort.sort(function(a, b) {",
											"    return ( a.brand.username.localeCompare(b.brand.username));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"Brand username is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascUsername, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i].brand.username)",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)].brand.username)",
											"        if(sortedList[i].brand.username!=response[((sortedList.length-1)-i)].brand.username)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=username%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username"
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort interestedCreators ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascInterestedCreators = noSort.sort(function(a, b) {",
											"    return ( (a.interestedCreators)-(b.interestedCreators));",
											"    });",
											"    ",
											"    //console.log(ascInterestedCreators)",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"InterestedCreators is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascInterestedCreators, responseBody.content, \"interestedCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {         console.log(\"i\"+i, sortedList[i][field])",
											"         console.log(\"j \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=interestedCreators%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CASC"
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort interestedCreators DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascInterestedCreators = noSort.sort(function(a, b) {",
											"    return ( a.interestedCreators-(b.interestedCreators));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"interestedCreators is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascInterestedCreators, responseBody.content, \"interestedCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i].brand.username)",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)].brand.username)",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=interestedCreators%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC"
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort invitedCreators ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascInvitedCreators = noSort.sort(function(a, b) {",
											"    return ( (a.invitedCreators)-(b.invitedCreators));",
											"    });",
											"    ",
											"   // console.log(ascInterestedCreators)",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"invitedCreators is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascInvitedCreators, responseBody.content, \"invitedCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {   ",
											"            console.log(\"i\"+i, sortedList[i][field])",
											"            console.log(\"j \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=invitedCreators%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CASC"
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort invitedCreators DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascInvitedCreators = noSort.sort(function(a, b) {",
											"    return ( a.invitedCreators-(b.invitedCreators));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"invitedCreators is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascInvitedCreators, responseBody.content, \"invitedCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i].brand.username)",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)].brand.username)",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=invitedCreators%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC"
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort creatingCreators ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascCreatingCreators = noSort.sort(function(a, b) {",
											"    return ( (a.creatingCreators)-(b.creatingCreators));",
											"    });",
											"    ",
											"   // console.log(ascInterestedCreators)",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"creatingCreators is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascCreatingCreators, responseBody.content, \"creatingCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {   ",
											"            console.log(\"i\"+i, sortedList[i][field])",
											"            console.log(\"j \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=creatingCreators%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE"
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort creatingCreators DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort name in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascCreatingCreators = noSort.sort(function(a, b) {",
											"    return ( a.creatingCreators-(b.creatingCreators));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"creatingCreators is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascCreatingCreators, responseBody.content, \"creatingCreators\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i, sortedList[i].brand.username)",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)].brand.username)",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=creatingCreators%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC"
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort startDate ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascStartDate = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.startDate).getTime())-(new Date(b.startDate).getTime()));",
											"    });",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"startDate is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascStartDate, responseBody.content, \"startDate\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {   ",
											"            console.log(\"i\"+i, sortedList[i][field])",
											"            console.log(\"i \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=startDate%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "startDate%2CASC",
											"description": "subStatus HYPE"
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort startDate DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascStartDate = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.startDate).getTime())-(new Date(b.startDate).getTime()));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"startDate is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascStartDate, responseBody.content, \"startDate\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i,sortedList[i][field])",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)][field])",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=startDate%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "startDate%2CDESC"
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort endDate ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascEndDate = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.endDate).getTime())-(new Date(b.endDate).getTime()));",
											"    });",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"endDate is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascEndDate, responseBody.content, \"endDate\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {   ",
											"            console.log(\"i\"+i, sortedList[i][field])",
											"            console.log(\"i \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=endDate%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "endDate%2CASC",
											"description": "subStatus HYPE"
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort endDate DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascEndDate = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.endDate).getTime())-(new Date(b.endDate).getTime()));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"endDate is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascEndDate, responseBody.content, \"endDate\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i,sortedList[i][field])",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)][field])",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=endDate%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "endDate%2CDESC"
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort dateClosed ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"ascDateClosed = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.dateClosed).getTime())-(new Date(b.dateClosed).getTime()));",
											"    });",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test(\"dateClosed is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascDateClosed, responseBody.content, \"dateClosed\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        if(sortedList[i][field]!=response[i][field])",
											"        {   ",
											"            console.log(\"i\"+i, sortedList[i][field])",
											"            console.log(\"i \"+i ,response[i][field])",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=dateClosed%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateClosed%2CASC",
											"description": "subStatus HYPE"
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort dateClosed DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in asc",
											"//desc is just the oposite order to asc so using the same function",
											"ascDateClosed = noSort.sort(function(a, b) {",
											"    return ( (new Date(a.dateClosed).getTime())-(new Date(b.dateClosed).getTime()));",
											"    });",
											"",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    //isSorted() will go through the sorted asc list starting from the end",
											"    // and compare it to the response (starting from the first object)",
											"    pm.test(\"dateClosed is sorted in descending order\", function(){",
											"            pm.expect(isSorted(ascDateClosed, responseBody.content, \"dateClosed\")).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"",
											"//goes through the sorted list backwards since it's sorted in asc and we want to test desc",
											"function isSorted(sortedList, response, field)",
											"{",
											"    for(let i=(sortedList.length-1); i>=0; --i)",
											"    {",
											"        //console.log(\"i\"+i,sortedList[i][field])",
											"        //console.log(\"j \"+((sortedList.length-1)-i),response[((sortedList.length-1)-i)][field])",
											"        if(sortedList[i][field]!=response[((sortedList.length-1)-i)][field])",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?sort=dateClosed%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_ORGANIC",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
											"disabled": true
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateClosed%2CDESC"
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No Sort CAMPAGIN (saves response)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.variables.set(\"noSort\", responseBody.content);",
											"",
											"}",
											"",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=CAMPAIGN&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "CAMPAIGN",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CAMPAIGN ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"budgetType= pm.request.url.query.toObject().budgetType;",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//response contain a list of budget objects-> \"budgets\":[{\"CAMPAIGN, 400\"..}, {\"INFLUENCER\", 300..}]",
											"// this function goes through each objects \"budgets\" and compares the value found ",
											"// at the given budgetType",
											"//sort in asc",
											"ascBudget = noSort.sort(",
											"    function(a, b) ",
											"    {",
											"        for(let i=0; i<a.budgets.length; ++i)",
											"        {",
											"            if(a.budgets[i].type===budgetType)",
											"            {",
											"                for(let j=0; j<b.budgets.length; ++j)",
											"                {",
											"                    if(b.budgets[j].type===budgetType)",
											"                    {",
											"                        return ( (a.budgets[i].value)-(b.budgets[j].value) );",
											"                    }",
											"                }",
											"            }          ",
											"            ",
											"        }",
											"    });",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test( budgetType + \" is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascBudget, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"//checks if ids are the same on the same index for the response and sorted list",
											"//returns false if ids are not the same",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        //console.log(sortedList[i].name)",
											"        //console.log(response[i].name)",
											"        if(sortedList[i].id!=response[i].id)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=CAMPAIGN&sort=budget%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "CAMPAIGN",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CASC",
											"description": "Only works with a given BudgetType"
										},
										{
											"key": "sort",
											"value": "dateClosed%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CAMPAIGN DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"budgetType= pm.request.url.query.toObject().budgetType;",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in desc",
											"//response contain a list of budget objects-> \"budgets\":[{\"CAMPAIGN, 400\"..}, {\"INFLUENCER\", 300..}]",
											"// this function goes through each objects \"budgets\" and compares the value found ",
											"// at the given budgetType",
											"descBudget = noSort.sort(",
											"    function(a, b) ",
											"    {",
											"        for(let i=0; i<a.budgets.length; ++i)",
											"        {",
											"            if(a.budgets[i].type===budgetType)",
											"            {",
											"                for(let j=0; j<b.budgets.length; ++j)",
											"                {",
											"                    if(b.budgets[j].type===budgetType)",
											"                    {",
											"                        return ( (b.budgets[j].value) -(a.budgets[i].value));",
											"                    }",
											"                }",
											"            }          ",
											"            ",
											"        }",
											"    });",
											"",
											"//console.log(\"sorted\", descBudget);",
											"//console.log(\"resp\", responseBody.content)",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test( budgetType + \" is sorted in descending order\", function(){",
											"            pm.expect(isSorted(descBudget, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"//-------------------Functions",
											"//checks if ids are the same on the same index for the response and sorted list",
											"//returns false if ids are not the same",
											"function isSorted(sortedList, response)",
											"{",
											"",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"       // console.log(sortedList[i].name)",
											"        //console.log(response[i].name)",
											"        if(sortedList[i].id!=response[i].id)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=CAMPAIGN&sort=budget%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "CAMPAIGN",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType"
										},
										{
											"key": "sort",
											"value": "dateClosed%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "No Sort INFLUENCER_AMPLIFICATION (saves response)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.variables.set(\"noSort\", responseBody.content);",
											"",
											"}",
											"",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=INFLUENCER_AMPLIFICATION&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_AMPLIFICATION",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name%2CDESC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "creatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "interestedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "INFLUENCER_AMPLIFICATION ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"budgetType= pm.request.url.query.toObject().budgetType;",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//response contain a list of budget objects-> \"budgets\":[{\"CAMPAIGN, 400\"..}, {\"INFLUENCER\", 300..}]",
											"// this function goes through each objects \"budgets\" and compares the value found ",
											"// at the given budgetType",
											"//sort in asc",
											"ascBudget = noSort.sort(",
											"    function(a, b) ",
											"    {",
											"        for(let i=0; i<a.budgets.length; ++i)",
											"        {",
											"            if(a.budgets[i].type===budgetType)",
											"            {",
											"                for(let j=0; j<b.budgets.length; ++j)",
											"                {",
											"                    if(b.budgets[j].type===budgetType)",
											"                    {",
											"                        return ( (a.budgets[i].value)-(b.budgets[j].value) );",
											"                    }",
											"                }",
											"            }          ",
											"            ",
											"        }",
											"    });",
											"",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test( budgetType + \" is sorted in ascending order\", function(){",
											"            pm.expect(isSorted(ascBudget, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"//checks if ids are the same on the same index for the response and sorted list",
											"//returns false if ids are not the same",
											"function isSorted(sortedList, response)",
											"{",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"        //console.log(sortedList[i].name)",
											"        //console.log(response[i].name)",
											"        if(sortedList[i].id!=response[i].id)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=INFLUENCER_AMPLIFICATION&sort=budget%2CASC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_AMPLIFICATION",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CASC",
											"description": "Only works with a given BudgetType"
										},
										{
											"key": "sort",
											"value": "dateClosed%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "INFLUENCER_AMPLIFICATION DESC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();",
											"",
											"budgetType= pm.request.url.query.toObject().budgetType;",
											"",
											"//the response without any sort option applied",
											"//saved variable from \"No sort\"",
											"noSort = pm.variables.get(\"noSort\");",
											"",
											"//sort in desc",
											"//response contain a list of budget objects-> \"budgets\":[{\"CAMPAIGN, 400\"..}, {\"INFLUENCER\", 300..}]",
											"// this function goes through each objects \"budgets\" and compares the value found ",
											"// at the given budgetType",
											"descBudget = noSort.sort(",
											"    function(a, b) ",
											"    {",
											"        for(let i=0; i<a.budgets.length; ++i)",
											"        {",
											"            if(a.budgets[i].type===budgetType)",
											"            {",
											"                for(let j=0; j<b.budgets.length; ++j)",
											"                {",
											"                    if(b.budgets[j].type===budgetType)",
											"                    {",
											"                        return ( (b.budgets[j].value) -(a.budgets[i].value));",
											"                    }",
											"                }",
											"            }          ",
											"            ",
											"        }",
											"    });",
											"",
											"//console.log(\"sorted\", descBudget);",
											"//console.log(\"resp\", responseBody.content)",
											"",
											"if(pm.response.code==200)",
											"{",
											"    //Checks if status is 200",
											"    pm.test(\"Status code is 200 \");",
											"",
											"    pm.test( budgetType + \" is sorted in descending order\", function(){",
											"            pm.expect(isSorted(descBudget, responseBody.content)).to.equal(true);",
											"        })",
											"}",
											"else if(pm.response.code==403)",
											"{",
											"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
											"}",
											"",
											"//-------------------Functions",
											"//-------------------Functions",
											"//checks if ids are the same on the same index for the response and sorted list",
											"//returns false if ids are not the same",
											"function isSorted(sortedList, response)",
											"{",
											"",
											"    for(let i=0; i<sortedList.length; ++i)",
											"    {",
											"       // console.log(sortedList[i].name)",
											"        //console.log(response[i].name)",
											"        if(sortedList[i].id!=response[i].id)",
											"        {",
											"            return false;",
											"        }",
											"    }",
											"    return true;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{test}}search/collaboration-search?budgetType=INFLUENCER_AMPLIFICATION&sort=budget%2CDESC&size=100000",
									"host": [
										"{{test}}search"
									],
									"path": [
										"collaboration-search"
									],
									"query": [
										{
											"key": "keyword",
											"value": "uniqlO",
											"description": "name, .user.username, user.brand.company, accountingCode",
											"disabled": true
										},
										{
											"key": "platform",
											"value": "INSTAGRAM",
											"description": "INSTAGRAM, TWITTER, FACEBOOK",
											"disabled": true
										},
										{
											"key": "country",
											"value": "australia",
											"disabled": true
										},
										{
											"key": "city",
											"value": "Melbourne (Australia)",
											"description": "Melbourne (Australia)",
											"disabled": true
										},
										{
											"key": "category",
											"value": "Books",
											"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
											"disabled": true
										},
										{
											"key": "categoriesMatch",
											"value": "ALL",
											"description": "ANY default",
											"disabled": true
										},
										{
											"key": "language",
											"value": "English",
											"disabled": true
										},
										{
											"key": "username",
											"value": "uniqlo",
											"description": "brand username",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "PRIVATE",
											"description": "anything else than PRIVATE will filter by PUBLIC",
											"disabled": true
										},
										{
											"key": "dateType",
											"value": "dateModified",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "fromDate",
											"value": "2020-01-01",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "toDate",
											"value": "2021-05-30",
											"description": "only works if date type is given",
											"disabled": true
										},
										{
											"key": "budgetType",
											"value": "INFLUENCER_AMPLIFICATION",
											"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC"
										},
										{
											"key": "minBudget",
											"value": "0",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "maxBudget",
											"value": "100000",
											"description": "Requires a given budgetTyper",
											"disabled": true
										},
										{
											"key": "status",
											"value": "LOCKED",
											"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
											"disabled": true
										},
										{
											"key": "instanceStatus",
											"value": "DECLINED",
											"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "username%2CASC",
											"description": "company or username",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "budget%2CDESC",
											"description": "Only works with a given BudgetType"
										},
										{
											"key": "sort",
											"value": "dateClosed%2CASC",
											"description": "subStatus HYPE",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dateModified%2CDESC",
											"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "surveyCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "negotiatingCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "completedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "invitedCreators%2CDESC",
											"disabled": true
										},
										{
											"key": "sort",
											"value": " ",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"disabled": true
										},
										{
											"key": "size",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keyword Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().keyword+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        //keyword seraches on the following fields so if any of them contain the request then this test will pass",
									"        pm.test(\"Keyword '\"+ pm.request.url.query.toObject().keyword+ \"'. Matches fields in response body.\", function () {",
									"            pm.expect(keywordMatch(responseBody.content, pm.request.url.query.toObject().keyword)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().keyword +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"function keywordMatch(response, keyword)",
									"{",
									"    var regexKeyword = new RegExp('.*['+ keyword +'].*');",
									"",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        // regexKeyword will return true if there's a match ",
									"        //if no fields return true then there was no match and function returns false",
									"        if( (response[i].accountingCode!=undefined && regexKeyword.test(response[i].accountingCode)==false ) && ",
									"            (response[i].brand.username!=undefined && regexKeyword.test(response[i].brand.username)==false ) && ",
									"            (response[i].brand.company!=undefined && regexKeyword.test(response[i].brand.company)==false) &&",
									"            (response[i].name!=undefined && regexKeyword.test(response[i].name)==false) )",
									"            {",
									"                return false;",
									"            }",
									"            return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?keyword=uniqlO&status=DRAFT&size=100000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlO",
									"description": "name, .user.username, user.brand.company, accountingCode"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default",
									"disabled": true
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC",
									"disabled": true
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "DRAFT",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN"
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "100000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().status);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().status+\"'.\");",
									"",
									"    //If there's more then one match then any of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given statuses\", function(){",
									"            pm.expect(matchStatus(responseBody.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().status +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(statuses)",
									"{",
									"    let status=\"\";",
									"",
									"    for(var i =0; i<statuses.length; ++i)",
									"    {",
									"        if( (statuses[i]==\"%\") || (statuses[i]==\",\") || (statuses[i]==\"2\") || (statuses[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (statuses[i+1]!=\"%\") && (statuses[i+1]!=\",\") && (statuses[i]!=\"2\") && (statuses[i]!=\"0\") )",
									"            {",
									"                inputList.add(status);",
									"                status=\"\";",
									"            }",
									"        }",
									"        else if(i==(statuses.length-1))   //end of string",
									"        {",
									"            status+= statuses[i];",
									"            inputList.add(status)",
									"        }",
									"        else",
									"        {",
									"            status += statuses[i];",
									"        }",
									"    }",
									"}",
									"",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchStatus(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        //indexOf() looks in list of given input for example [\"OPEN\", \"LOCKED\"]",
									"        //  and checks if status of current collaboration is one of them",
									"        // if not found then it indexOf will return -1 and function false",
									"        if( inputList.indexOf(response[i].status) ==-1)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?status=LOCKED, OPEN&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default",
									"disabled": true
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC",
									"disabled": true
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED, OPEN",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN"
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Visibillity Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200\");",
									"",
									"    //If there's more then one match then any of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Returns collaboration with the visibility  \" +pm.request.url.query.toObject().visibility, function(){",
									"            pm.expect(matchVisibility(responseBody.content, pm.request.url.query.toObject().visibility)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().visibility +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchVisibility(response, visibility)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        //indexOf() will return -1 and if given visibility is not found in list of options",
									"        //function will return false if that's the case",
									"        if( response[i].options.indexOf(visibility) ==-1)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?visibility=PRIVATE&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default",
									"disabled": true
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC"
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED, OPEN",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
									"disabled": true
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Brand Username Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200\");",
									"",
									"    //If there's more then one match then any of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Returns collaborations of given brand username  \" +pm.request.url.query.toObject().username, function(){",
									"            pm.expect(matchBrand(responseBody.content, pm.request.url.query.toObject().username)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().username +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchBrand(response, username)",
									"{",
									"    var regexBrand = new RegExp(username, 'i');",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        if( regexBrand.test(response[i].brand.username)==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?username=uniqlo&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default",
									"disabled": true
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username"
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC",
									"disabled": true
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED, OPEN",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
									"disabled": true
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Platform Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().platform);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().platform+\"'.\");",
									"",
									"    //If there's more then one match then any of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given platforms\", function(){",
									"            pm.expect(matchPlatform(responseBody.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().platform +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(platforms)",
									"{",
									"    let platform=\"\";",
									"",
									"    for(var i =0; i<platforms.length; ++i)",
									"    {",
									"        if( (platforms[i]==\"%\") || (platforms[i]==\",\") || (platforms[i]==\"2\") || (platforms[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (platforms[i+1]!=\"%\") && (platforms[i+1]!=\",\") && (platforms[i]!=\"2\") && (platforms[i]!=\"0\") )",
									"            {",
									"                inputList.add(platform);",
									"                platform=\"\";",
									"            }",
									"        }",
									"        else if(i==(platforms.length-1))   //end of string",
									"        {",
									"            platform+= platforms[i];",
									"            inputList.add(platform)",
									"        }",
									"        else",
									"        {",
									"            platform += platforms[i];",
									"        }",
									"    }",
									"}",
									"//channelPreferences is the list belonging to one collaboration object",
									"// inputList is the list of platforms requested by the user",
									"function listContainsPlatform(channelPreferences, inputList)",
									"{",
									"    count=0;",
									"    for(let i=0; i<channelPreferences.length; ++i)",
									"    {",
									"        //if the platform from the response is found in given input list then count will increment",
									"        // if the response never match any of the given platforms then function will return false ",
									"        if(inputList.indexOf(channelPreferences[i].platform)!=-1)",
									"        {",
									"            count+=1;",
									"        }",
									"    }",
									"    if(count==0)",
									"    {",
									"        return false;",
									"    }",
									"    return true;",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchPlatform(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        //channelPreferences is a list so need to iterate over it in another function to determine if one of the values",
									"        // match given input",
									"        // if not found then it indexOf will return -1 and function false",
									"        if( listContainsPlatform(response[i].channelPreferences, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?platform=INSTAGRAM, FACEBOOK&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM, FACEBOOK",
									"description": "INSTAGRAM, TWITTER, FACEBOOK"
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default",
									"disabled": true
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC",
									"disabled": true
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED, OPEN",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
									"disabled": true
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category Search ANY",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().category);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().category+\"'.\");",
									"",
									"    //If there's more then one match then any of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given categories\", function(){",
									"            pm.expect(matchANYCategories(responseBody.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().category +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each obj contain a list of categories",
									"//this function takes a list and returns true if any of the categories given are found in the list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        // the list of categories for each creator only need to contain one category for ANY  ",
									"        if(list.indexOf(categoriesList[i])>-1)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchANYCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the given categories ",
									"        if( listContainsCategories(response[i].categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?category=Books&categoriesMatch=ANY",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography"
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"description": "ANY default"
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC",
									"disabled": true
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
									"disabled": true
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Category Search ALL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().category);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().category+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given categories\", function(){",
									"            pm.expect(matchAllCategories(responseBody.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().category +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each obj contain a list of categories",
									"//this function takes a list and returns true if all categories given is found in a list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        //if a category is not found it will return false since all categories should be found in the category list of the creator ",
									"        if(list.indexOf(categoriesList[i])==-1)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchAllCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the given categories ",
									"        if( listContainsCategories(response[i].categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{test}}search/collaboration-search?category=Books&categoriesMatch=ALL&visibility=PRIVATE",
							"host": [
								"{{test}}search"
							],
							"path": [
								"collaboration-search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "uniqlo",
									"description": "name, .user.username, user.brand.company, accountingCode",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"description": "INSTAGRAM, TWITTER, FACEBOOK",
									"disabled": true
								},
								{
									"key": "country",
									"value": "australia",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"description": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "category",
									"value": "Books",
									"description": "Lifestyle,Beauty,Children's Fashion,Music,Photography"
								},
								{
									"key": "categoriesMatch",
									"value": "ALL",
									"description": "ANY default"
								},
								{
									"key": "language",
									"value": "English",
									"disabled": true
								},
								{
									"key": "username",
									"value": "uniqlo",
									"description": "brand username",
									"disabled": true
								},
								{
									"key": "visibility",
									"value": "PRIVATE",
									"description": "anything else than PRIVATE will filter by PUBLIC"
								},
								{
									"key": "dateType",
									"value": "dateModified",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "fromDate",
									"value": "2020-01-01",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "toDate",
									"value": "2021-05-30",
									"description": "only works if date type is given",
									"disabled": true
								},
								{
									"key": "budgetType",
									"value": "INFLUENCER_ORGANIC",
									"description": "INFLUENCER_AMPLIFICATION, INFLUENCER_ORGANIC",
									"disabled": true
								},
								{
									"key": "minBudget",
									"value": "0",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "maxBudget",
									"value": "100000",
									"description": "Requires a given budgetTyper",
									"disabled": true
								},
								{
									"key": "status",
									"value": "LOCKED",
									"description": "DRAFT, OPEN, LOCKED, CLOSED, DELETED, CLOSED_ADMIN",
									"disabled": true
								},
								{
									"key": "instanceStatus",
									"value": "DECLINED",
									"description": "NEW, ACTIVE, COMPLETE, DECLINED, CANCELLED, CLOSED, DISPUTE, RETRACTED, CLOSED_ADMIN, DELETED",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "company%2CDESC",
									"description": "company or username",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "budget%2CDESC",
									"description": "Only works with a given BudgetType",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CASC",
									"description": "subStatus HYPE",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "dateModified%2CDESC",
									"description": "dateModified, dateCreated, dateClosed, endDate, startDate",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "surveyCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "negotiatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "creatingCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "completedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "interestedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "invitedCreators%2CDESC",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Creator -- FINAL",
			"item": [
				{
					"name": "BOSS login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keyword Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().keyword+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        //keyword seraches on the following fields so if any of them contain the request then this test will pass",
									"        pm.test(\"Keyword '\"+ pm.request.url.query.toObject().keyword+ \"'. Matches fields in response body.\", function () {",
									"            pm.expect(keywordMatch(responseBody.page.content, pm.request.url.query.toObject().keyword)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().keyword +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"function keywordMatch(response, keyword)",
									"{",
									"    //keword contains space",
									"    if((/,%20/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replaceAll(\",%20\", \"|\") +')', \"i\");",
									"    }",
									"    //keyword contains comma no space",
									"    else if((/,/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replaceAll(\",\", \"|\") +')', \"i\");",
									"    }",
									"    //one word",
									"    else",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword +')', \"i\");",
									"    }",
									"",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        // search function will return -1 if no match",
									"        //i f return -1 then there's no match for given keyword",
									"        if( (response[i].body.firstName!=undefined && regexKeyword.test(response[i].body.firstName)==false ) && ",
									"            (response[i].body.lastName!=undefined && regexKeyword.test(response[i].body.lastName)==false ) && ",
									"            (response[i].body.displayName!=undefined && regexKeyword.test(response[i].body.displayName)==false) &&",
									"            ",
									"            (response[i].body.influencer.facebookProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.facebookProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.instagramProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.instagramProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.twitterProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.twitterProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.youtubeProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.youtubeProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.pinterestProfile!=undefined",
									"            && regexKeyword.test(response[i].body.influencer.pinterestProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.tiktokProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.tiktokProfile.username)==false )",
									"            ",
									"            )",
									"            {",
									"                return false;",
									"            }",
									"            return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?size=10000&keyword=food",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Travel",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories Search - ALL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().categories);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().categories+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        pm.test(\"Response contains given categories\", function(){",
									"            pm.expect(matchAllCategories(responseBody.page.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().categories +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each creator obj contain a list of categories",
									"//this function takes a list and returns true if all categories given is found in a list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        //if a category is not found it will return false since all categories should be found in the category list of the creator ",
									"        if(list.indexOf(categoriesList[i])==-1)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchAllCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the given categories ",
									"        if( listContainsCategories(response[i].body.influencer.categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?categories=Beauty, Travel&categoriesMatch=ALL&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty, Travel"
								},
								{
									"key": "categoriesMatch",
									"value": "ALL"
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Categories Search - ANY",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //will convert input to a list of categories",
									"    var inputList = [];",
									"    listInput(pm.request.url.query.toObject().categories);",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().categories+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        pm.test(\"Returned creators match at least one of the given categories\", function(){",
									"            pm.expect(matchAnyCategories(responseBody.page.content)).to.equal(true);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().categories +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"// input may contains \",\" or \"%20\" for space depending on how input is given (ex. Books, Travel in string as we get the input -> Books%20Travel)",
									"// functions ensures that input is in a list exluding such characters",
									"function listInput(categories)",
									"{",
									"    let category=\"\";",
									"",
									"    for(var i =0; i<categories.length; ++i)",
									"    {",
									"        if( (categories[i]==\"%\") || (categories[i]==\",\") || (categories[i]==\"2\") || (categories[i]==\"0\") )",
									"        {",
									"            //next character is a letter, meaning it's a new word and should be added to list",
									"            if( (categories[i+1]!=\"%\") && (categories[i+1]!=\",\") && (categories[i]!=\"2\") && (categories[i]!=\"0\") )",
									"            {",
									"                inputList.add(category);",
									"                category=\"\";",
									"            }",
									"        }",
									"        else if(i==(categories.length-1))   //end of string",
									"        {",
									"            category+= categories[i];",
									"            inputList.add(category)",
									"        }",
									"        else",
									"        {",
									"            category += categories[i];",
									"        }",
									"    }",
									"}",
									"",
									"// each creator obj contain a list of categories",
									"//this function takes a list and returns true if any of the categories given are found in the list",
									"function listContainsCategories(list, categoriesList)",
									"{",
									"    for(let i=0; i<categoriesList.length; ++i)",
									"    {",
									"        // indexOf() only returns -1 if it cant find the category",
									"        // the list of categories for each creator only need to contain one category for ANY  ",
									"        if(list.indexOf(categoriesList[i])>-1)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									"//iterates over each creator and checks if their list of categories contain given categories",
									"function matchAnyCategories(response)",
									"{",
									"    for(let i =0; i<response.length; ++i)",
									"    {",
									"        // listContainsCategories() will return false if the category list of a creator ",
									"        // doesn't contain the any of the given categories ",
									"        if( listContainsCategories(response[i].body.influencer.categories, inputList) ==false)",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?categories=Beauty, Travel&categoriesMatch=ANY&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty, Travel"
								},
								{
									"key": "categoriesMatch",
									"value": "ANY"
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gender Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().gender+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // allSameGender() returns true if all creators are of the given gender",
									"        pm.test(\"All creators are of the gender \" + pm.request.url.query.toObject().gender+ \". TotalElements returned \" +responseBody.page.totalElements, function () {",
									"            pm.expect(allSameGender(responseBody.page.content, pm.request.url.query.toObject().gender)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().gender +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given gender",
									"function allSameGender(response, gender)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.influencer.gender!=gender)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?gender=OTHER&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "OTHER"
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Location & Metrics Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200.\" );",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"",
									"         pm.test(\"Filter options are working\", function(){",
									"            pm.expect(responseContainsSearch(responseBody.page.content,",
									"                                                    pm.request.url.query.toObject().keyword, ",
									"                                                    pm.request.url.query.toObject().gender, ",
									"                                                    pm.request.url.query.toObject().city,",
									"                                                    pm.request.url.query.toObject().country,",
									"                                                                                                   ",
									"                                                    pm.request.url.query.toObject().platform, ",
									"                                                    pm.request.url.query.toObject().minFollowing, ",
									"                                                    pm.request.url.query.toObject().maxFollowing, ",
									"                                                    pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"function keywordMatch(response, keyword)",
									"{",
									"    ",
									"    //keword contains space",
									"    if((/,%20/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replace(\",%20\", \"|\") +')');",
									"    }",
									"    //keyword contains comma no space",
									"    else if((/,/).test(keyword)==true)",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword.replace(\",\", \"|\") +')');",
									"    }",
									"    //one word",
									"    else",
									"    {",
									"        var regexKeyword = new RegExp('('+ keyword +')');",
									"    }",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        // search function will return -1 if no match",
									"        //i f return -1 then there's no match for given keyword",
									"        if( (response[i].body.firstName!=undefined && regexKeyword.test(response[i].body.firstName)==false ) && ",
									"            (response[i].body.lastName!=undefined && regexKeyword.test(response[i].body.lastName)==false ) && ",
									"            (response[i].body.displayName!=undefined && regexKeyword.test(response[i].body.displayName)==false) &&",
									"            ",
									"            (response[i].body.influencer.facebookProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.facebookProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.instagramProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.instagramProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.twitterProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.twitterProfile.username)==false) &&",
									"            ",
									"            (response[i].body.influencer.youtubeProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.youtubeProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.pinterestProfile!=undefined",
									"            && regexKeyword.test(response[i].body.influencer.pinterestProfile.username)==false ) &&",
									"            ",
									"            (response[i].body.influencer.tiktokProfile!=undefined ",
									"            && regexKeyword.test(response[i].body.influencer.tiktokProfile.username)==false )",
									"            ",
									"            )",
									"            {",
									"                return false;",
									"            }",
									"            return true;         ",
									"    }",
									"",
									"}",
									"",
									"",
									"",
									"//returns false if any given field is not found in response",
									"function responseContainsSearch(list ,keyword, gender, city, country, platform, minFollowing, maxFollowing, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && (keywordSearch(list[i].body, keyword)==false ) )  ",
									"        {",
									"            return false;   //returns false if no match",
									"        }",
									"",
									"        if ( (city != undefined) ) ",
									"        {",
									"            city =city.replaceAll(/((%20(\\(.*?\\))))/g, \"\"); //removes %20(Australia) from input",
									"            city =city.replaceAll(/((,%20)|(%20)|(,))/g, \"|\")   //adds | (OR) where ,20% or 20% is found, result-> Melbourne|Sydney",
									"            var regexCity= new RegExp(city);",
									"            //console.log(regexCity)",
									"            if( regexCity.test(list[i].body.influencer.currentLocation) !=true)",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"        if ( (country != undefined) ) ",
									"        {",
									"            country=country.replace(/(%20)/g,\" \")",
									"            //country can be a list so easier to check if country found in each user is found in given input list ",
									"            userCountry=list[i].body.influencer.currentLocation.replace(/(.*(\\())/,\"\");",
									"            userCountry=userCountry.replace(/\\)/,\"\");",
									"            var regexCountry= new RegExp(userCountry);",
									"",
									"            if(regexCountry.test(country) !=true)   ",
									"            {",
									"                return false;",
									"            }",
									"",
									"        }",
									"            if (platform != undefined) ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.influencer.facebookProfile == null ) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.facebookProfile.followers) < parseFloat(minFollowing)) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.facebookProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" ) ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.influencer.instagramProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && (list[i].body.influencer.instagramProfile.businessVerified!==Boolean(businessVerified))) ",
									"                        {",
									"                            return false;",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.instagramProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.instagramProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.influencer.twitterProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.twitterProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.twitterProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.influencer.youtubeProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.youtubeProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.youtubeProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.influencer.pinterestProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.pinterestProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.pinterestProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.influencer.blogProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.blogProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(parseFloat(list[i].body.influencer.blogProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined) ",
									"            {",
									"                if(list[i].body.influencer.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"    }",
									"    return true;",
									"}",
									"",
									"   ",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?platform=INSTAGRAM&city=Melbourne (Australia), Sydney (Australia),Perth (Australia)&country=Australia, New Zealand&minFollowing=1000&maxFollowing=&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Travel",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "city",
									"value": "Melbourne (Australia), Sydney (Australia),Perth (Australia)"
								},
								{
									"key": "country",
									"value": "Australia, New Zealand"
								},
								{
									"key": "minFollowing",
									"value": "1000"
								},
								{
									"key": "maxFollowing",
									"value": ""
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate TM Comany (saves company name)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //to validate that tm does work for the company returned in search call for tm, (GET serach/{username}) ",
									"    // search call don't return info of the tm only returns info of the company",
									"    pm.variables.set(\"comapnyName\", responseBody.object.manager.company)",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'. Works for company \" + pm.variables.get(\"comapnyName\"), function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/juleshughes",
							"host": [
								"{{test}}user"
							],
							"path": [
								"juleshughes"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().talentManager+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // isManaged() checks if all influencer are under one tm company since the name of the manager is not returned in the response",
									"        // it also checks if isManaged is set to true for each influencer",
									"        pm.test(\"All creators are managed and are under the company \" + responseBody.page.content[0].body.managedBy.company, function () {",
									"            pm.expect(isManaged(responseBody.page.content, responseBody.page.content[0].body.managedBy.company)).to.equal(true);",
									"        });",
									"",
									"        // May not be needed!",
									"        // to validate that tm works for the company which is retutned for each creator",
									"        pm.test(\"Given tm works for company \" + pm.variables.get(\"comapnyName\"), function(){",
									"            pm.expect( pm.variables.get(\"comapnyName\").search(responseBody.page.content[0].body.managedBy.company) ).to.not.equal(-1);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// isManaged should be set to true and all influencers should be under the same company",
									"// since a tm can only work for one company",
									"function isManaged(response, company)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].isManaged!=true && response[i].body.managedBy.company!=company)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?talentManager=juleshughes&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "juleshughes"
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate employeeTM Comany (saves company name)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //to validate that tm does work for the company returned in search call for tm, (GET serach/{username}) ",
									"    // search call don't return info of the tm only returns info of the company",
									"    pm.variables.set(\"comapnyName\", responseBody.object.settings.payeeDetails.billingDetails.companyName)",
									"",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'. Works for company \" + pm.variables.get(\"comapnyName\"), function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/aliciakeys",
							"host": [
								"{{test}}user"
							],
							"path": [
								"aliciakeys"
							]
						}
					},
					"response": []
				},
				{
					"name": "employeeTM Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().talentManager+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // isManaged() checks if all influencer are under one tm company since the name of the manager is not returned in the response",
									"        // it also checks if isManaged is set to true for each influencer",
									"        pm.test(\"All creators are managed and are under the company \" + responseBody.page.content[0].body.managedBy.company, function () {",
									"            pm.expect(isManaged(responseBody.page.content, responseBody.page.content[0].body.managedBy.company)).to.equal(true);",
									"        });",
									"",
									"        // May not be needed!",
									"        // to validate that tm works for the company which is retutned for each creator",
									"        pm.test(\"Given tm works for company \" + pm.variables.get(\"comapnyName\"), function(){",
									"            pm.expect( pm.variables.get(\"comapnyName\").search(responseBody.page.content[0].body.managedBy.company) ).to.not.equal(-1);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// isManaged should be set to true and all influencers should be under the same company",
									"// since a tm can only work for one company",
									"function isManaged(response, company)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].isManaged!=true && response[i].body.managedBy.company!=company)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?talentManager=aliciakeys&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "aliciakeys"
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Neg pendingTM Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().talentManager+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        // isManaged() checks if all influencer are under one tm company since the name of the manager is not returned in the response",
									"        // it also checks if isManaged is set to true for each influencer",
									"        pm.test(\"All creators are managed and are under the company \" + responseBody.page.content[0].body.managedBy.company, function () {",
									"            pm.expect(isManaged(responseBody.page.content, responseBody.page.content[0].body.managedBy.company)).to.equal(true);",
									"        });",
									"",
									"        // May not be needed!",
									"        // to validate that tm works for the company which is retutned for each creator",
									"        pm.test(\"Given tm works for company \" + pm.variables.get(\"comapnyName\"), function(){",
									"            pm.expect( pm.variables.get(\"comapnyName\").search(responseBody.page.content[0].body.managedBy.company) ).to.not.equal(-1);",
									"        })",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// isManaged should be set to true and all influencers should be under the same company",
									"// since a tm can only work for one company",
									"function isManaged(response, company)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].isManaged!=true && response[i].body.managedBy.company!=company)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?talentManager=fahtimawidjaja&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "fahtimawidjaja"
								},
								{
									"key": "profileStatus",
									"value": "influencer",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Influencer eoi (tests all params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois of type \"+ pm.request.url.query.toObject().type);",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    var regexKeyword = new RegExp('('+ keyword +')',\"i\");",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"       //if all false then no match, return false",
									"        if( (regexKeyword.test(eoi.firstName) ==false) && ",
									"            (regexKeyword.test(eoi.lastName)==false ) && ",
									"            (regexKeyword.test(eoi.email)==false) &&",
									"            ",
									"            ( (eoi.socialUrls.facebook!=\"\" || eoi.socialUrls.facebook!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.facebook)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.instagram!=\"\" || eoi.socialUrls.instagram!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.instagram)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.twitter!=\"\" || eoi.socialUrls.twitter!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.twitter)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.youtube!=\"\" || eoi.socialUrls.youtube!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.youtube)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.pinterest!=\"\" || eoi.socialUrls.pinterest!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.pinterest)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.blog!=\"\" || eoi.socialUrls.blog!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.blog)==false) )            ",
									"            )",
									"        {",
									"            return false;",
									"        }",
									"        ",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if( (regexKeyword.test(eoi.firstName)==false) && ",
									"        (regexKeyword.test(eoi.lastName)==false) && ",
									"        (regexKeyword.test(eoi.email)==false) &&",
									"        (regexKeyword.test(eoi.website)==false) &&",
									"        (regexKeyword.test(eoi.companyName)==false))",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only want to show influencer with a fb account",
									"                    if(parseFloat(list[i].body.socialUrls.facebook) == null || parseFloat(list[i].body.socialUrls.facebook) ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) < parseFloat(minFollowing)) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    //got here if non of the checks failed ",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi?size=100000&keyword=July&maxFollowing=10000&minFollowing=0&status=NEW&currentLocation=Melbourne (Australia)&platform=INSTAGRAM&type=influencer&pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "size",
									"value": "100000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "July",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\""
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number"
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number"
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW"
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM"
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Influencer ARCHIVED eoi (tests all params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois of type \"+ pm.request.url.query.toObject().type);",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    var regexKeyword = new RegExp('('+ keyword +')',\"i\");",
									"    // search function will return -1 if no match",
									"   if(type==\"influencer\")",
									"   {",
									"       //if all false then no match, return false",
									"        if( (regexKeyword.test(eoi.firstName) ==false) && ",
									"            (regexKeyword.test(eoi.lastName)==false ) && ",
									"            (regexKeyword.test(eoi.email)==false) &&",
									"            ",
									"            ( (eoi.socialUrls.facebook!=\"\" || eoi.socialUrls.facebook!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.facebook)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.instagram!=\"\" || eoi.socialUrls.instagram!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.instagram)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.twitter!=\"\" || eoi.socialUrls.twitter!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.twitter)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.youtube!=\"\" || eoi.socialUrls.youtube!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.youtube)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.pinterest!=\"\" || eoi.socialUrls.pinterest!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.pinterest)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.blog!=\"\" || eoi.socialUrls.blog!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.blog)==false) )            ",
									"            )",
									"        {",
									"            return false;",
									"        }",
									"        ",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if( (regexKeyword.test(eoi.firstName)==false) && ",
									"        (regexKeyword.test(eoi.lastName)==false) && ",
									"        (regexKeyword.test(eoi.email)==false) &&",
									"        (regexKeyword.test(eoi.website)==false) &&",
									"        (regexKeyword.test(eoi.companyName)==false))",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only want to show influencer with a fb account",
									"                    if(parseFloat(list[i].body.socialUrls.facebook) == null || parseFloat(list[i].body.socialUrls.facebook) ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) < parseFloat(minFollowing)) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    //got here if non of the checks failed ",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi?size=100000&keyword=Snippiwippi&businessVerified=true&status=ARCHIVED&type=influencer&pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "size",
									"value": "100000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "Snippiwippi",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\""
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers"
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								},
								{
									"key": "status",
									"value": "ARCHIVED"
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "type",
									"value": "influencer"
								},
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search TM eoi (tests all params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"//Can be used to access query parameter values",
									"//console.log(pm.request.url.query.toObject().keyword);",
									"",
									"",
									"if (pm.response.code == 200) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    pm.test(\"Status code is 200. Returns \" + responseBody.object.totalElements + \" eois of type \"+ pm.request.url.query.toObject().type);",
									"",
									"    //only check if response contains any results",
									"    if (responseBody.type != undefined) ",
									"    {",
									"        //call only allows type to be either influencer or manager",
									"        pm.test(\"Returned eois are all of the type \" + requestBody.type, function () {",
									"            pm.expect(matchesType(pm.request.url.query.toObject().type)).to.equal(true);",
									"        });",
									"    }",
									"",
									"",
									"    //check if resoponse contains given search filters",
									"    // function responseContainsSearch() checks whether any fields are empty, (undefined) before comparing request and response",
									"   // will return true if list is empty, if there are no eois returned",
									"    pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().status, ",
									"                                                pm.request.url.query.toObject().currentLocation,",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().type, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"}",
									"else if (pm.response.code == 400) ",
									"{",
									"    pm.test(\"Status 400. Invalid request, make sure type is included\");",
									"",
									"    pm.test(\"Invalid type, only influencer or manager are valid types\", function () {",
									"        pm.expect(pm.request.url.query.toObject().type).to.not.be.oneOf([\"influencer\", \"manager\"]);",
									"    });",
									"",
									"}",
									"else if (pm.response.code == 403) ",
									"{",
									"    var responseBody = pm.response.json();",
									"",
									"    if (responseBody.notes != null) ",
									"    {",
									"        pm.test(\"Not hypetap, not authorised to make call\", function () {",
									"            pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"        });",
									"    }",
									"}",
									"",
									"//------------Functions",
									"",
									"//returns false if any objects in given list doesn't have the given type",
									"function matchesType(list, type) {",
									"    for (let i; i < list.length; ++i) ",
									"    {",
									"        if (list[i].body.type != type) ",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//takes one eoi and searches different field depending on type",
									"// keyword search for type influencer matches on fields:",
									"//\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",",
									"//\"socialUrls.pinterest\"\"socialUrls.blogs\". ",
									"//for type manager :  \"email\", \"firstName\", \"lastName\", \"website\", \"companyName\"",
									"function keywordSearch(eoi, type, keyword)",
									"{",
									"    var regexKeyword = new RegExp('('+ keyword +')',\"i\");",
									"    ",
									"    //if all false then no match, return false",
									"   if(type==\"influencer\")",
									"   {",
									"       //if all false then no match, return false",
									"        if( (regexKeyword.test(eoi.firstName) ==false) && ",
									"            (regexKeyword.test(eoi.lastName)==false ) && ",
									"            (regexKeyword.test(eoi.email)==false) &&",
									"            ",
									"            ( (eoi.socialUrls.facebook!=\"\" || eoi.socialUrls.facebook!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.facebook)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.instagram!=\"\" || eoi.socialUrls.instagram!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.instagram)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.twitter!=\"\" || eoi.socialUrls.twitter!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.twitter)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.youtube!=\"\" || eoi.socialUrls.youtube!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.youtube)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.pinterest!=\"\" || eoi.socialUrls.pinterest!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.pinterest)==false) ) &&",
									"            ",
									"            ( (eoi.socialUrls.blog!=\"\" || eoi.socialUrls.blog!=null)",
									"            && (regexKeyword.test(eoi.socialUrls.blog)==false) )            ",
									"            )",
									"        {",
									"            return false;",
									"        }",
									"        ",
									"        return true; ",
									"   }",
									"   else //manager",
									"   {",
									"       if( (regexKeyword.test(eoi.firstName)==false) && ",
									"        (regexKeyword.test(eoi.lastName)==false) && ",
									"        (regexKeyword.test(eoi.email)==false) &&",
									"        (regexKeyword.test(eoi.website)==false) &&",
									"        (regexKeyword.test(eoi.companyName)==false))",
									"        {",
									"            return false;",
									"        }",
									"        return false; ",
									"   }",
									"}",
									"",
									"//checks each eoi in response to see if they contain/match the given search filter",
									"// will return true if list is empty, if there are no eois returned",
									"//list = response ",
									"function responseContainsSearch(list, keyword, gender, status, currentLocation, platform, minFollowing, maxFollowing, type, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //type has to be given for call to work",
									"",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && keyword!=\"\")  ",
									"        {",
									"            keywordSearch(list[i].body,type, keyword);   //returns false if no match",
									"        }",
									"        if (status != undefined && status!=\"\") ",
									"        {",
									"            if (list[i].body.status != status) ",
									"            {",
									"               return false;",
									"            }",
									"        }",
									"        if (currentLocation != undefined && currentLocation!=\"\") ",
									"        {",
									"            // url replaces space with %20 so need to remove this to be able to compair agains the response ",
									"            if (list[i].body.currentLocation != currentLocation.replace(/%20/, \" \") && ",
									"                list[i].body.officeLocation != currentLocation.replace(/%20/, \" \")) //for managers call filters on officeLocation",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    ",
									"        // these fields are only filtered on if type is influencer",
									"        // tiktok is not used in backend ",
									"        if (type == \"influencer\") ",
									"        {",
									"            if (platform != undefined && platform!=\"\") ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then socialUrls.facebook should not be empty as we only want to show influencer with a fb account",
									"                    if(parseFloat(list[i].body.socialUrls.facebook) == null || parseFloat(list[i].body.socialUrls.facebook) ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) < parseFloat(minFollowing)) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.facebookProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" && list[i].body.socialUrls.instagram == null || \"\") ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.socialUrls.instagram == null || list[i].body.socialUrls.instagram ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && businessVerified!=\"\") ",
									"                        {",
									"                            if(list[i].body.instagramProfile.businessVerified!=businessVerified)",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.instagram.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.socialUrls.twitter == null || list[i].body.socialUrls.twitter ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.twitterProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.socialUrls.youtube == null || list[i].body.socialUrls.youtube ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.youtubeProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.socialUrls.pinterest == null || list[i].body.socialUrls.pinterest ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.pinterestProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.socialUrls.blog == null || list[i].body.socialUrls.blog ==\"\") ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) < parseFloat(minFollowing)) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(parseFloat(list[i].body.socialUrls.blogProfile.followers) > parseFloat(maxFollowing)) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }            ",
									"            if (gender != undefined && gender!=\"\" ) ",
									"            {",
									"                if(list[i].body.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"    }",
									"    //got here if non of the checks failed ",
									"    return true;",
									"}",
									"",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}eoi?size=100000&keyword=dumband&status=NEW&currentLocation=Melbourne (Australia)&type=manager&pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}eoi"
							],
							"query": [
								{
									"key": "size",
									"value": "100000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "dumband",
									"description": "\"email\", \"firstName\",\"lastName\", \"socialUrls.instagram\", \"socialUrls.facebook\",\"socialUrls.youtube\", \"socialUrls.twitter\",\n\"socialUrls.pinterest\"\"socialUrls.blogs\". manager:  \"website\", \"companyName\""
								},
								{
									"key": "maxFollowing",
									"value": "10000",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"description": "500 if not number",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"description": "500 if not bolean, only influencers",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"description": "gender doesn't exist in betaInvitations, will not filter on gender",
									"disabled": true
								},
								{
									"key": "status",
									"value": "NEW"
								},
								{
									"key": "currentLocation",
									"value": "Melbourne (Australia)"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "type",
									"value": "manager"
								},
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Type Search",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.query.toObject().profileStatus+\"'.\");",
									"",
									"    //If there's more then one match then all of the objects/elements needs to be checked",
									"    //If totalElements ==0 then there was no match and it should return an empty list",
									"    if(responseBody.page.totalElements>0)",
									"    {",
									"        //returns true if all creators are of the given profileStatus",
									"        pm.test(\"All creators have profileStatus \" + pm.request.url.query.toObject().profileStatus+ \". TotalElements returned \" +responseBody.page.totalElements, function () {",
									"            pm.expect(allSameType(responseBody.page.content, pm.request.url.query.toObject().profileStatus)).to.equal(true);",
									"        });",
									"    } ",
									"    else",
									"    {",
									"        pm.test(\"No results for '\"+pm.request.url.query.toObject().talentManager +\"'. Returns empty list\", function(){",
									"            pm.expect(responseBody.page.content).to.be.empty;",
									"        });",
									"    }",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400, userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Not found check that given username exist\", function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"} ",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Unauthorised, call only allowed for hypetap users\");",
									"}",
									"",
									"//-------------------Functions",
									"",
									"",
									"// Checks if every creator returned are of given profileStatus",
									"function allSameType(response, profileStatus)",
									"{",
									"    for(var i=0; i< response.length; ++i)",
									"    {",
									"        ",
									"        if(response[i].body.profileStatus!=profileStatus)",
									"        {",
									"            return false;",
									"        }",
									"        return true;         ",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/user?profileStatus=pendinginfluencer&size=10000",
							"host": [
								"{{test}}search"
							],
							"path": [
								"user"
							],
							"query": [
								{
									"key": "categories",
									"value": "Beauty",
									"disabled": true
								},
								{
									"key": "categoriesMatch",
									"value": "ANY",
									"disabled": true
								},
								{
									"key": "managed",
									"value": "false",
									"disabled": true
								},
								{
									"key": "talentManager",
									"value": "barbaraann",
									"disabled": true
								},
								{
									"key": "profileStatus",
									"value": "pendinginfluencer"
								},
								{
									"key": "platform",
									"value": "INSTAGRAM",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne (Australia)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "Australia",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "",
									"disabled": true
								},
								{
									"key": "minEngagement",
									"value": "500",
									"disabled": true
								},
								{
									"key": "maxEngagement",
									"value": "",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "FEMALE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "food",
									"description": "username,displayName,firstName,lastName,influencer.instagramProfile.username,influencer.facebookProfile.username,influencer.twitterProfile.username,influencer.youtubeProfile.username,influencer.pinterestProfile.username,influencer.tiktokProfile.username",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search/influencer/tags/summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for given tag \"+pm.request.url.query.toObject().tag);",
									"    ",
									"    pm.test(\"SpecifiedTags contains given tags\", function(){",
									"        pm.expect(existInSpecifiedTags(responseBody.object.specifiedTags, pm.request.url.query.toObject().tag)).to.equal(true);",
									"    })",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status 403. Unauthorised, call only allowed for Hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"//--------------Functions",
									"",
									"function existInSpecifiedTags(list, tagInput)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        regexTag = new RegExp('('+list[i].name+')');",
									"        ",
									"        //false means no match",
									"        if(regexTag.test(tagInput)==false)",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}search/influencer/tags/summary?tag=Dog, Cat",
							"host": [
								"{{test}}search"
							],
							"path": [
								"influencer",
								"tags",
								"summary"
							],
							"query": [
								{
									"key": "start",
									"value": "100",
									"disabled": true
								},
								{
									"key": "size",
									"value": "100",
									"disabled": true
								},
								{
									"key": "caption",
									"value": "dog",
									"disabled": true
								},
								{
									"key": "tag",
									"value": "Dog, Cat",
									"description": "Doesn't recognise if lowercase ex cat"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search/influencer/tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for given tag \"+pm.request.url.query.toObject().tag);",
									"    ",
									"    //will match on OR so for example 'Dog' or 'Bulldog' or 'Bulldog, Dog'",
									"    pm.test(\"Influencers returned match given tags\", function(){",
									"        pm.expect(existTags(responseBody.object.users, pm.request.url.query.toObject().tag)).to.equal(true);",
									"    })",
									"    //if given as a parameter",
									"    if(pm.request.url.query.toObject().from!=undefined)",
									"    {",
									"        pm.test(\"Result contains posts posted after from date: \"+pm.request.url.query.toObject().from, function(){",
									"            pm.expect(postDateFrom(responseBody.object.users,pm.request.url.query.toObject().from) ).to.equal(true);",
									"        })",
									"    }",
									"",
									"        //if given as a parameter",
									"    if(pm.request.url.query.toObject().till!=undefined)",
									"    {",
									"        pm.test(\"Result contains posts posted before till date: \"+pm.request.url.query.toObject().till, function(){",
									"            pm.expect(postDateTill(responseBody.object.users,pm.request.url.query.toObject().till)).to.equal(true);",
									"        })",
									"    }",
									"",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status 403. Unauthorised, call only allowed for Hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"//--------------Functions",
									"",
									"function existTags(list, tagInput)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            //example of regex /(Bulldog)|(Dog)/",
									"            // if either words match then regex will be true",
									"            regexTag = new RegExp('('+list[i].tags[j].name.replace(\",\",\")|(\")+')');",
									"            ",
									"            //false means no match",
									"            if(regexTag.test(tagInput)==false)",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"",
									"    }",
									"    return true;",
									"}",
									"",
									"function postDateFrom(list, fromDate)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            //posts is a list with datePosted ->(tags[j].posts[k].datePosted)",
									"            for(let k=0; k<list[i].tags[j].posts.length;++k)",
									"            {",
									"                //false means no match",
									"                if( (new Date(list[i].tags[j].posts[k].datePosted).getTime() )< ( new Date(fromDate).getTime()) )",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"",
									"    }",
									"    return true;",
									"}",
									"",
									"function postDateTill(list, tillDate)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            //posts is a list with datePosted ->(tags[j].posts[k].datePosted)",
									"            for(let k=0; k<list[i].tags[j].posts.length;++k)",
									"            {",
									"                //false means no match",
									"                if(new Date(list[i].tags[j].posts[k].datePosted).getTime()> new Date(tillDate).getTime())",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"",
									"    }",
									"    return true;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}search/influencer/tag?tag=Dog, Bulldog&from=2021-01-30&till=2021-02-10",
							"host": [
								"{{test}}search"
							],
							"path": [
								"influencer",
								"tag"
							],
							"query": [
								{
									"key": "tag",
									"value": "Dog, Bulldog"
								},
								{
									"key": "collaborationId",
									"value": "5a1e34852181377ce8f6792a",
									"disabled": true
								},
								{
									"key": "from",
									"value": "2021-01-30",
									"description": "datePosted"
								},
								{
									"key": "till",
									"value": "2021-02-10",
									"description": "datePosted"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search/influencer/caption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for given tag \"+pm.request.url.query.toObject().caption);",
									"    ",
									"    //will match on OR so for example 'Dog' or 'Bulldog' or 'Bulldog, Dog'",
									"    pm.test(\"Influencers returned match given captions\", function(){",
									"        pm.expect(existCaptions(responseBody.object.users, pm.request.url.query.toObject().caption)).to.equal(true);",
									"    })",
									"    //if given as a parameter",
									"    if(pm.request.url.query.toObject().from!=undefined)",
									"    {",
									"        pm.test(\"Result contains posts posted after from date: \"+pm.request.url.query.toObject().from, function(){",
									"            pm.expect(postDateFrom(responseBody.object.users,pm.request.url.query.toObject().from) ).to.equal(true);",
									"        })",
									"    }",
									"",
									"        //if given as a parameter",
									"    if(pm.request.url.query.toObject().till!=undefined)",
									"    {",
									"        pm.test(\"Result contains posts posted before till date: \"+pm.request.url.query.toObject().till, function(){",
									"            pm.expect(postDateTill(responseBody.object.users,pm.request.url.query.toObject().till)).to.equal(true);",
									"        })",
									"    }",
									"",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"",
									"    pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status 403. Unauthorised, call only allowed for Hypetap\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"//--------------Functions",
									"",
									"function existCaptions(list, captionsInput)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            ",
									"             //posts is a list with caption in it",
									"            for(let k=0; k<list[i].tags[j].posts.length;++k)",
									"            {",
									"                //should match on either words given",
									"                //regex will replace space with OR operator |",
									"                regexCaption = new RegExp('('+  captionsInput.replaceAll(/((,%20)|(%20)|(,))/g, \"|\")+')', \"i\");",
									"                ",
									"                //false means no match",
									"                if(regexCaption.test(list[i].tags[j].posts[k].caption)==false)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"        }",
									"",
									"    }",
									"    return true;",
									"}",
									"",
									"function postDateFrom(list, fromDate)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            //posts is a list with datePosted ->(tags[j].posts[k].datePosted)",
									"            for(let k=0; k<list[i].tags[j].posts.length;++k)",
									"            {",
									"                //false means no match",
									"                if(new Date(list[i].tags[j].posts[k].datePosted).getTime()< new Date(fromDate).getTime())",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"",
									"    }",
									"    return true;",
									"}",
									"",
									"function postDateTill(list, tillDate)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        //tags is a list with matched posts",
									"        for(let j=0; j<list[i].tags.length;++j)",
									"        {",
									"            //posts is a list with datePosted ->(tags[j].posts[k].datePosted)",
									"            for(let k=0; k<list[i].tags[j].posts.length;++k)",
									"            {",
									"                //false means no match",
									"                if(new Date(list[i].tags[j].posts[k].datePosted).getTime()> new Date(tillDate).getTime())",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"",
									"        }",
									"",
									"    }",
									"    return true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{test}}search/influencer/caption?start=0&size=100&caption=dog, cat&from=2020-12-30&till=2021-09-01",
							"host": [
								"{{test}}search"
							],
							"path": [
								"influencer",
								"caption"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								},
								{
									"key": "caption",
									"value": "dog, cat"
								},
								{
									"key": "from",
									"value": "2020-12-30",
									"description": "datePosted"
								},
								{
									"key": "till",
									"value": "2021-09-01",
									"description": "datePosted"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\"ms\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "accumulateResponseTime",
			"value": "0"
		}
	]
}
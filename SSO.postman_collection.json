{
	"info": {
		"_postman_id": "a249fdc6-de22-4677-80c7-2f63557a6a53",
		"name": "SSO",
		"description": "Collection test might fail if the request body is ticked as 'raw' even though it's empty/not used for any other calls than GET in the collection.\n\nTick 'none' and save to resolve error.\n\nNewman reads initial values make sure current value (read by postman) is the same.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Switch User",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"//returns current user of session",
									"pm.test(\"Status code is 200. Current user is '\"+responseBody.object.username+\"'\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{test}}user",
							"host": [
								"{{test}}user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Authorised to Switch to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\");",
									"",
									"    //should only be allowed to switch to user if it exist in returned list",
									"    pm.test(\"Current session user is authorised to switch to given user \" + pm.variables.get(\"switchUsername\"), function(){",
									"        pm.expect(usernameExist(responseBody.object, pm.variables.get(\"switchUsername\"))).to.equal(true);",
									"    })",
									"",
									"    // if only one user/object is returned then the current auth doesn't have access to any other user than themselves",
									"    if(responseBody.object.length==1)",
									"    {",
									"        pm.test(\"Only returned one user for auth, i.e. the user identified by the session, '\" + responseBody.object[0].username+\"'.\");",
									"    }    ",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"function usernameExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Switch User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//needs a datafile or a varible in collection called username for test to work",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Switched from '\"+responseBody.session.authUser+\"' to '\"+pm.request.url.path[3]+\"'\", function(){",
									"        pm.response.to.have.status(200);",
									"    })",
									"}",
									"// should only give 400 if user is delted, suspended or not part of sso",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Not authorised.\", \"Not available\",",
									"                                                            \"User profile suspended by administration\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/switch/{{switchUsername}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"switch",
								"{{switchUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Switch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Switch successful. Current user is '\"+responseBody.object.username+\"'\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.variables.get(\"switchUsername\")).to.equal(responseBody.object.username);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{test}}user",
							"host": [
								"{{test}}user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add Employee and Delete",
			"item": [
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.variables.set(\"totalAuthsSSO\",responseBody.unpaginatedCount);",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auth to Current SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+requestBody.username +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newEmployeeUsername\", requestBody.username);",
									"    pm.variables.set(\"newEmployeeData\", requestBody);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Only SSO managers are authorised to make call\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false);",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"type\":\"manager\",\n    \"username\":\"leanne\",\n\t\"firstName\":\"Leanne\",\n\t\"lastName\":\"Ross\",\n\t\"location\":\"Australia\",\n\t\"number\":\"0400000333\",\n\t\"title\": \"Manager\",\n    \"email\":\"dumbanddummy+leanne@gmail.com\",\n\t\"assignedTo\":[]\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If Auths of SSO have Increased",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have increased by one\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\"))+1 );",
									"    })",
									"",
									"    pm.test(\"Added employee is part of SSO\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))  ).to.equal(true);",
									"    });",
									"    //if user was found then validate if it contains the same data requested in POST call",
									"    if(userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))==true)",
									"    {",
									"        pm.test(\"Employee details are correct\", function(){",
									"            pm.expect(compareRequestResponse(responseBody.object, pm.variables.get(\"newEmployeeData\")))",
									"        })",
									"    }",
									"",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username==username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables.set(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee BUG (AuthId Not Deleted in SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// The user object returned should match the requested user object if call is successfull",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Successfully deleted user with authId'\" + pm.request.url.path[4]+ \"' \");",
									"    ",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    pm.test(\"Unsuccessful for given username '\"+pm.request.url.path[4]+\"'. \"+responseBody.notes.userMessage, function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{newEmployeeAuthId}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{newEmployeeAuthId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have decreased by one\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\")) );",
									"    })",
									"",
									"    pm.test(\"Added employee is not part of SSO\", function(){",
									"        pm.expect(userExist(responseBody.object, pm.variables.get(\"newEmployeeUsername\"))).to.equal(false);",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username===username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+2); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Add Employee (Existing email)",
			"item": [
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.variables.set(\"totalAuthsSSO\",responseBody.unpaginatedCount);",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add/ Aauth to Current SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+requestBody.username +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newEmployeeUsername\", requestBody.username);",
									"    pm.variables.set(\"newEmployeeData\", requestBody);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Only SSO managers are authorised to make call\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false);",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"type\":\"manager\",\n    \"username\":\"leanne\",\n\t\"firstName\":\"Leanne\",\n\t\"lastName\":\"Ross\",\n\t\"location\":\"Australia44\",\n\t\"number\":\"0400000333\",\n\t\"title\": \" \",\n    \"email\":\"dumbanddummy1+brooke@gmail.com\",\n\t\"assignedTo\":[]\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If Auths of SSO have Increased",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have not increased\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\")) );",
									"    })",
									"",
									"    pm.test(\"Added employee is not part of SSO\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))  ).to.equal(false);",
									"    });",
									"    //if user was found then validate if it contains the same data requested in POST call",
									"    if(userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))==true)",
									"    {",
									"        pm.test(\"Employee details are correct\", function(){",
									"            pm.expect(compareRequestResponse(responseBody.object, pm.variables.get(\"newEmployeeData\")))",
									"        })",
									"    }",
									"",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username==username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables.set(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have not increased \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add New Brand,Update userSettings, Delete Auth",
			"item": [
				{
					"name": "Hypetap ssoManager Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "a.hypetap+dj@gmail.com (NOT SSO MANAGER)",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Brand to Current SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+requestBody.brand.company +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newBrandUsername\", responseBody.object.username);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"brand\":\n    {\n        \"company\":\"And other stories\",\n        \"description\":\"Clothing brand\",\n        \"location\":\"Stockholm (Sweden)\",\n        \"websiteUrl\":\"http://www.otherstories.com\"\n    },\n    \"socialUrls\":\n    {\n        \"facebook\":\"\",\n        \"twitter\":\"\",\n        \"instagram\":\"\",\n        \"youtube\":\"\",\n        \"pinterest\":\"\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/user",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Brand Was Added To Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'. Users profileStatus is: \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code, function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404,401]);",
									"    });",
									"",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"userMessage: \" + responseBody.notes.userMessage)",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{newBrandUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{newBrandUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Brand Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"auth has access to requested user: \"+pm.variables.get(\"newBrandUsername\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"newBrandUsername\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"    pm.test(\"Added user is included in returned userSettings for auth\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newBrandUsername\"))) ).to.equal(true);",
									"    })",
									"",
									"",
									"",
									"//---------Functions",
									"",
									"//saving original usersettings to be able to revert PUT call",
									" //console.log(\"sett\", pm.environment.get(\"originalSettings\"))",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username===username)",
									"        {",
									"            pm.environment.set(\"originalSettings\", JSON.stringify(list[i]));",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. Requested updates \"+ requestBody.users.length, function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"username\", pm.variables.get(\"newBrandUsername\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\":\n    [\n        { \n            \"username\": \"{{username}}\",\n            \"emailInstant\": false,\n            \"emailSummary\":false,\n            \"disableReminders\":false,\n            \"subscribed\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( pm.variables.get(\"requestSettings\"), responseBody.object)).to.equal(true);",
									"})",
									"",
									"//-----------Functions",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].emailInstant != undefined && request[i].emailInstant!=response.emailInstant)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].emailSummary != undefined && request[i].emailSummary!=response.emailSummary)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].disableReminders != undefined && request[i].disableReminders!=response.disableReminders)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].subscribed != undefined && request[i].subscribed!=response.subscribed)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. \", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\": [{{originalSettings}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( responseBody.object, pm.variables.get(\"requestSettings\"))).to.equal(true);",
									"})",
									"",
									"//-------Functions",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].emailInstant != undefined && request[i].emailInstant!=response.emailInstant)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].emailSummary != undefined && request[i].emailSummary!=response.emailSummary)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].disableReminders != undefined && request[i].disableReminders!=response.disableReminders)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].subscribed != undefined && request[i].subscribed!=response.subscribed)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Auth form User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Removed current user's authId from user: \"+pm.request.url.path[3] );",
									"",
									"   // if successful then 'totalUsersForAuth' should be one less as delete call removeas auth from the users usersettings",
									"    pm.variables.set(\"totalUsersForAuth\", (pm.variables.get(\"totalUsersForAuth\")-1));",
									"    pm.variables.set(\"totalAuthsForUser\", (pm.variables.get(\"totalAuthsForUser\")-1));",
									"",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Current session user is not a SSO manager\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false)",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{newBrandUsername}}/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{newBrandUsername}}",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth is not part of requested user: \"+pm.variables.get(\"newBrandUsername\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"newBrandUsername\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //auth doesn't exist in users usersettings for given username and sso",
									"    //should not exist since delete call is used",
									"    pm.test( responseBody.session.authUser +\" doesn't have access to user: \"+pm.variables.get(\"newBrandUsername\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(false);",
									"    pm.expect(countAuth(responseBody.object, responseBody.session.authUser)).to.equal(0);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{newBrandUsername}}/auths?pageStart=1&PAGEeND=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{newBrandUsername}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "PAGEeND",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add New Influencer, Update userSettings, Delete Auth",
			"item": [
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add New Influencer to Current SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"var notOnlySpace = (/\\S/);",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+responseBody.object.username +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //contains required fields.",
									"    // will fail if any are empty or if there's no socialUrl given",
									"    //username, displayname, first and last name, atleast 1 social channel, Gender, current location and language",
									"    pm.test(\"Contains required fields for an influencer\", function(){",
									"        pm.expect(notOnlySpace.test(requestBody.username)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.firstName)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.lastName)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.displayName)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.influencer.gender)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.influencer.currentLocation)).to.equal(true);",
									"        pm.expect(notOnlySpace.test(requestBody.influencer.language)).to.equal(true);",
									"        pm.expect( containsOneSocialUrl()).to.equal(true);",
									"    })",
									" ",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newInfluencerUsername\", responseBody.object.username);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									"",
									"//---------------Functions",
									"",
									"function containsOneSocialUrl()",
									"{",
									"    socialUrlsList = [\"facebook\", \"instagram\", \"pinterest\", \"twitter\", \"snapchat\", \"blog\"];",
									"    count =0; ",
									"    ",
									"    for(let i=0; i<socialUrlsList.length; ++i)",
									"    {",
									"        if( (requestBody.socialUrls[socialUrlsList[i] ]!=undefined) && (requestBody.socialUrls[socialUrlsList[i] ]!=\"\"))",
									"        {",
									"            count+=1;",
									"        }",
									"    }",
									"    if(count>0)",
									"    {",
									"        return true;",
									"    }",
									"    else",
									"    {",
									"        return false;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"ourperthreno123\",\n    \"firstName\":\"Shannon\",\n    \"lastName\":\"Reno\",\n    \"displayName\":\"ourperthreno123\",\n    \"influencer\":\n    {\n        \"description\":\"Home and Lifestyle\\n- Renovating our beachside family home 🏝\\n✨NEXT SPACE - KITCHEN, LIVING, DINING ✨\\n- Creative transformations • DIY • Well-being • Good vibes\",\n        \"currentLocation\":\"Perth (Australia)\",\n        \"languages\":[\"English\"],\n        \"gender\":\"FEMALE\"\n    },\n        \"socialUrls\":\n        {\n            \"facebook\":\"\",\n            \"twitter\":\"\",\n            \"instagram\":\"ourperthro11\",\n            \"youtube\":\"\",\n            \"pinterest\":\"\",\n            \"blog\":\"\"\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/user",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Exist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'. Users profileStatus is: \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{newInfluencerUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{newInfluencerUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"    pm.test(\"Added user is included in returned userSettings for auth\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newInfluencerUsername\"))) ).to.equal(true);",
									"    })",
									"",
									"",
									"",
									"//---------Functions",
									"",
									"//saving original usersettings to be able to revert PUT call",
									" //console.log(\"sett\", pm.environment.get(\"originalSettings\"))",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username===username)",
									"        {",
									"            pm.environment.set(\"originalSettings\", JSON.stringify(list[i]));",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. Requested updates \"+ requestBody.users.length, function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"username\", pm.variables.get(\"newInfluencerUsername\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\":\n    [\n        { \n            \"username\": \"{{username}}\",\n            \"emailInstant\": false,\n            \"emailSummary\":false,\n            \"disableReminders\":false,\n            \"subscribed\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( pm.variables.get(\"requestSettings\"), responseBody.object)).to.equal(true);",
									"})",
									"",
									"//-----------Functions",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].emailInstant != undefined && request[i].emailInstant!=response.emailInstant)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].emailSummary != undefined && request[i].emailSummary!=response.emailSummary)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].disableReminders != undefined && request[i].disableReminders!=response.disableReminders)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].subscribed != undefined && request[i].subscribed!=response.subscribed)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. \", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\": [{{originalSettings}} ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( responseBody.object, pm.variables.get(\"requestSettings\"))).to.equal(true);",
									"})",
									"",
									"//-------Functions",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].emailInstant != undefined && request[i].emailInstant!=response.emailInstant)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].emailSummary != undefined && request[i].emailSummary!=response.emailSummary)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].disableReminders != undefined && request[i].disableReminders!=response.disableReminders)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].subscribed != undefined && request[i].subscribed!=response.subscribed)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// The user object returned should match the requested user object if call is successfull",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Successfully deleted social channels for '\" + pm.request.url.path[2]+ \"' \", function(){",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"    ",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    pm.test(\"Unsuccessful for given username '\"+pm.request.url.path[2]+\"'. \"+responseBody.notes.userMessage, function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}user/{{newInfluencerUsername}}?deleteSocialChannels=true",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{newInfluencerUsername}}"
							],
							"query": [
								{
									"key": "deleteSocialChannels",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Influencer is Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'. Users profileStatus is: \"+ responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{newInfluencerUsername}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{newInfluencerUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"    pm.test(\"Added user is not included in returned userSettings for auth\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newInfluencerUsername\"))) ).to.equal(false);",
									"    })",
									"",
									"",
									"",
									"//---------Functions",
									"",
									"//saving original usersettings to be able to revert PUT call",
									" //console.log(\"sett\", pm.environment.get(\"originalSettings\"))",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username===username)",
									"        {",
									"            pm.environment.set(\"originalSettings\", JSON.stringify(list[i]));",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG Assign Team Member to Brand and Revert (Needs to Be Manager for Delete)",
			"item": [
				{
					"name": "Employee Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+maryanne@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"BUG -Auth is not already part of requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(false);",
									"});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// call used to check whether auth already have access to user",
									"// PUT call should not be successful if that's the case",
									"",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //auth doesn't exist in users usersettings for given username and sso",
									"    pm.test(\"BUG - Auth doesn't have access to user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(false);",
									"    pm.expect(countAuth(responseBody.object, responseBody.session.authUser)).to.equal(0);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&PAGEeND=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "PAGEeND",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+maryanne@gmail.com",
									"description": "dumbanddummy1+maryanne@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds User to Given Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//requiers data file or varibles in collection for tests to work",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Added user \"+ pm.request.url.path[3]+ \" to authId \" + pm.request.url.path[4], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"BUG -Current session user has SSO privilege of a MANAGER, ssoPrivilege: \" + responseBody.session.ssoPrivilege);",
									"    //,function()){",
									"       // pm.expect(responseBody.session.ssoPrivilege).to.equal(\"MANAGER\");",
									"   // } )",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userExists!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Check if given user '\"+ pm.request.url.path[3] +\"' exist.\", function(){",
									"            pm.expect(responseBody.notes.userExists).to.equal(false);",
									"        })",
									"    }",
									"    else if (responseBody.notes.userInSSO!=undefined)",
									"    {",
									"        pm.test(\"Status 400. User not part of current sso\", function(){",
									"            pm.expect(responseBody.notes.userInSSO).to.equal(false);",
									"        })",
									"",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400. AuthId is not valid or not active.\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Failed. Auth not active.\");",
									"        })",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/{{authIdToAddUserTo}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"{{authIdToAddUserTo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Employee Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+maryanne@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Included in UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"pm.variables.set(\"totalAuthsForUser\", responseBody.object.length);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(true);",
									"    });",
									"",
									"     pm.test(\"BUG - Auth is not repeated for username '\"+responseBody.session.authUser+\"' is not repeated found: \"+countAuth(responseBody.object, responseBody.session.authUser), function(){",
									"    pm.expect(count).to.equal(1);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove AuthId from Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Removed authId: \"+pm.request.url.path[3] + \" from user: \"+pm.request.url.path[5]);",
									"",
									"   // if successful then 'totalUsersForAuth' should be one less as delete call removeas auth from the users usersettings",
									"    pm.variables.set(\"totalUsersForAuth\", (pm.variables.get(\"totalUsersForAuth\")-1));",
									"    pm.variables.set(\"totalAuthsForUser\", (pm.variables.get(\"totalAuthsForUser\")-1));",
									"",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Current session user is not a SSO manager\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false)",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{authIdToAddUserTo}}/users/{{userToAddToAuth}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{authIdToAddUserTo}}",
								"users",
								"{{userToAddToAuth}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Employee Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+maryanne@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth doesn't have access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(false);",
									"});",
									"",
									"pm.test(\"Auth has same amount of users as before user '\"+pm.variables.get(\"userToAddToAuth\")+\"' was added.\", function(){",
									"    pm.expect(pm.variables.get(\"totalUsersForAuth\")).to.equal(responseBody.object.length);",
									"});",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"BUG - User has same total auths as before PUT call\", function(){",
									"        pm.expect(pm.variables.get(\"totalAuthsForUser\", responseBody.object.length)).to.equal(responseBody.object.length);",
									"    });",
									"",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //auth doesn't exist in users usersettings for given username and sso",
									"    //should not exist since delete call is used",
									"    pm.test(\"Auth doesn't have access to user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(false);",
									"    pm.expect(countAuth(responseBody.object, responseBody.session.authUser)).to.equal(0);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&PAGEeND=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "PAGEeND",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ pm.variables.get(\"userToAddToAuth\"), function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    //Adding original count of notifications by 2 since a notification is sent when user is added and deleted",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+2); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG Assign Team Member to Already Assigned Brand and Revert",
			"item": [
				{
					"name": "Hypetap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"BUG -Auth is not already part of requested user: \"+pm.variables.get(\"userToAddToAuth\"));",
									"//, function(){",
									" //   pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(false);",
									"//});",
									"",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// call used to check whether auth already have access to user",
									"// PUT call should not be successful if that's the case",
									"",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //auth doesn't exist in users usersettings for given username and sso",
									"    pm.test(\"BUG - Auth doesn't have access to user: \"+pm.variables.get(\"userToAddToAuth\"));//, function(){",
									"   // pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(false);",
									"//    pm.expect(countAuth(responseBody.object, responseBody.session.authUser)).to.equal(0);",
									" //   });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&PAGEeND=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "PAGEeND",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds User to Given Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//requiers data file or varibles in collection for tests to work",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Added user \"+ pm.request.url.path[3]+ \" to authId \" + pm.request.url.path[4], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"    pm.test(\"Current session user has SSO privilege of a MANAGER, ssoPrivilege: \" + responseBody.session.ssoPrivilege,function(){",
									"        pm.expect(responseBody.session.ssoPrivilege).to.equal(\"MANAGER\");",
									"    } )",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    if(responseBody.notes.userExists!=undefined)",
									"    {",
									"        pm.test(\"Status 400. Check if given user '\"+ pm.request.url.path[3] +\"' exist.\", function(){",
									"            pm.expect(responseBody.notes.userExists).to.equal(false);",
									"        })",
									"    }",
									"    else if (responseBody.notes.userInSSO!=undefined)",
									"    {",
									"        pm.test(\"Status 400. User not part of current sso\", function(){",
									"            pm.expect(responseBody.notes.userInSSO).to.equal(false);",
									"        })",
									"",
									"    }",
									"    else",
									"    {",
									"        pm.test(\"Status 400. AuthId is not valid or not active.\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Failed. Auth not active.\");",
									"        })",
									"    }",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/{{managerAuthIdToAddUserTo}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"{{managerAuthIdToAddUserTo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// to keep track of how many users auth have access to",
									"pm.variables.set(\"totalUsersForAuth\", responseBody.object.length);",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(true);",
									"});",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"pm.variables.set(\"totalAuthsForUser\", responseBody.object.length);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Auth has access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(true);",
									"    });",
									"",
									"     pm.test(\"BUG -Auth is not repeated for username '\"+responseBody.session.authUser+\"' is not repeated found: \"+countAuth(responseBody.object, responseBody.session.authUser));//, function(){",
									"  // pm.expect(count).to.equal(1);",
									"    //});",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Added Auth form User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Removed current user's authId from user: \"+pm.request.url.path[3] );",
									"",
									"   // if successful then 'totalUsersForAuth' should be one less as delete call removeas auth from the users usersettings",
									"    pm.variables.set(\"totalUsersForAuth\", (pm.variables.get(\"totalUsersForAuth\")-1));",
									"    pm.variables.set(\"totalAuthsForUser\", (pm.variables.get(\"totalAuthsForUser\")-1));",
									"",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Current session user is not a SSO manager\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false)",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Is Not Part of Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"pm.test(\"Status code is 200. Returns \" +responseBody.object.length+\" users for current session user\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									"",
									"pm.test(\"Auth doesn't have access to requested user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, pm.variables.get(\"userToAddToAuth\"))).to.equal(false);",
									"});",
									"",
									"pm.test(\"Auth has same amount of users as before user '\"+pm.variables.get(\"userToAddToAuth\")+\"' was added.\", function(){",
									"    pm.expect(pm.variables.get(\"totalUsersForAuth\")).to.equal(responseBody.object.length);",
									"});",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Included in the UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"let count =0;",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"BUG - User has same total auths as before PUT call\");//, function(){",
									"       // pm.expect(pm.variables.get(\"totalAuthsForUser\", responseBody.object.length)).to.equal(responseBody.object.length);",
									"    //});",
									"",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. \" +responseBody.object.length+\" auths have access to user: \"+pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //auth doesn't exist in users usersettings for given username and sso",
									"    //should not exist since delete call is used",
									"    pm.test(\"Auth doesn't have access to user: \"+pm.variables.get(\"userToAddToAuth\"), function(){",
									"    pm.expect(containsUsername(responseBody.object, responseBody.session.authUser)).to.equal(false);",
									"    pm.expect(countAuth(responseBody.object, responseBody.session.authUser)).to.equal(0);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									"",
									"function countAuth(list, sessionUsername)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==sessionUsername)",
									"        {",
									"            count+=1;",
									"        }",
									"",
									"   }",
									"   return count;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{userToAddToAuth}}/auths?pageStart=1&PAGEeND=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{userToAddToAuth}}",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "PAGEeND",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ pm.variables.get(\"userToAddToAuth\"), function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    //Adding original count of notifications by 2 since a notification is sent when user is added and deleted",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+2); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transfer tmEmployee to tmSSO and Revert   (usersettings Remains for Auth)",
			"item": [
				{
					"name": "Login ssoManager (from SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com  ",
									"description": "a.hypetap+cmc@gmail.com  (ssoManager),dumbanddummy1+junem@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Part of Original SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{ ",
									"    ",
									"    //setting a varible to be able to check if the authId we want to transfer is from the Hypetap sso",
									"    // it should not be possible to tranfer a tm or a creator to the Hypetap SSO ",
									"    pm.variables.set(\"fromSSOisHypetap\", responseBody.session.hypetap)",
									"",
									"    //containsAuthId() will return true if authId is found in list of auths of current session",
									"    // function will also set variable\"emailOfAuth\" with the email of the auth we want to transfer to another sso",
									"    // an auth with a non hypetap email should not be allowed to be added to the Hypetap sso",
									"    pm.test(\"SSO contains auth which is to be moved from this sso\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    })",
									"   // console.log(\"addAuthIdToSso\", pm.variables.get(\"addAuthIdToSso\"));",
									"   // console.log(\"containsAuthId func \", containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\")))",
									"",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            pm.variables.set(\"emailOfAuth\", list[i].email);",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TM Login (SSO Add AuthId to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+janet@gmail.com",
									"description": "a.hypetap+janet@gmail.com, dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auth Before Adding/Tranfering Auth Over",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths of current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"// number objects return will only change if call is successful",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"totalAuths\", responseBody.unpaginatedCount);",
									"",
									"    //setting varible to be able to tell if any of the SSO that we're transfering auth between is the Hypetap SSO",
									"    pm.variables.set(\"toSSOisHypetap\", responseBody.session.hypetap)",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds AuthId to Current SSO and Removes from Old (userSettings Remain)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // is true when we're adding auth to a Hypetap sso and auths email is not a hypetap email (hypetap.com)",
									"    if( (pm.variables.get(\"toSSOisHypetap\") ) == true)   // && ( (/(hypetap.com)$/).test(pm.variables.get(\"emailOfAuth\"))!=true ) )",
									"    {",
									"        pm.test(\"BUG - AuthId to be transfered to the Hypetap SSO have a hypetap email address. AuthId's email: \" + pm.variables.get(\"emailOfAuth\"), function(){",
									"            pm.expect((/(hypetap.com)$/).test(pm.variables.get(\"emailOfAuth\"))).to.equal(true);",
									"        });",
									"    }",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    // 400 if logged in users profilStatus is not manager or agency or",
									"    //if the session user is deleted",
									"    pm.test(\"Status 400, unsuccessful. User message: \"+responresponseBody.notes.userMessage,function(){",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Invalid user to add. Not Manager or Agency.\",\"Not available\"]);",
									"    })",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status is 403. Unauthorised, user is not a sso manager\", function(){",
									"        pm.expect(responseBody.notes.manager);",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{addAuthIdToSso}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{addAuthIdToSso}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Part of New SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //To check auth has been added",
									"    pm.test(\"Auths for current session has incremented by one.\",function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal((pm.variables.get(\"totalAuths\")+1));",
									"    });",
									"",
									"    pm.test(\"SSO contains added auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    })",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ssoManger (Original from SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+cmc@gmail.com (SSO Manager)",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Part of Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"SSO doesn't contain removed auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(false);",
									"    })",
									"",
									"    pm.variables.set(\"totalAuths\", responseBody.unpaginatedCount);",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds AuthId Back to Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });    ",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    // 400 if logged in users profilStatus is not manager or agency or",
									"    //if the session user is deleted",
									"    pm.test(\"Status 400, unsuccessful. User message: \"+responresponseBody.notes.userMessage,function(){",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Invalid user to add. Not Manager or Agency.\",\"Not available\"]);",
									"    })",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status is 403. Unauthorised, user is not a sso manager\", function(){",
									"        pm.expect(responseBody.notes.manager);",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{addAuthIdToSso}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{addAuthIdToSso}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Added Back to Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"SSO contains added auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    });",
									"",
									"        //To check auth has been added",
									"    pm.test(\"Auths for current session has incremented by one.\",function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal((pm.variables.get(\"totalAuths\")+1));",
									"    });",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "BUG Transfer Employee to HypetapStaging and Revert (Transfere Back to CMC Talent)  (usersettings Remains for Auth)",
			"item": [
				{
					"name": "Login ssoManager (from SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com  ",
									"description": "a.hypetap+cmc@gmail.com  (ssoManager),dumbanddummy1+junem@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Part of Original SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{ ",
									"    //setting a varible to be able to check if the authId we want to transfer is from the Hypetap sso",
									"    // it should not be possible to tranfer a tm or a creator to the Hypetap SSO ",
									"    pm.variables.set(\"fromSSOisHypetap\", responseBody.session.hypetap)",
									"",
									"    //containsAuthId() will return true if authId is found in list of auths of current session",
									"    pm.test(\"SSO contains auth which is to be moved from this sso\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    })",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            pm.variables.set(\"emailOfAuth\", list[i].email);",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hypetap Login (to SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auth Before Adding/Tranfering Auth Over",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths of current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"// number objects return will only change if call is successful",
									"if(pm.response.code==200)",
									"{",
									"    pm.variables.set(\"totalAuths\", responseBody.unpaginatedCount);",
									"",
									"    //setting varible to be able to tell if any of the SSO that we're transfering auth between is the Hypetap SSO",
									"    pm.variables.set(\"toSSOisHypetap\", responseBody.session.hypetap)",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds AuthId to Current SSO and Removes from Old (UserSettings Remain)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    // is true when we're adding auth to a Hypetap sso and auths email is not a hypetap email (hypetap.com)",
									"    if( (pm.variables.get(\"toSSOisHypetap\") ) == true)   // && ( (/(hypetap.com)$/).test(pm.variables.get(\"emailOfAuth\"))!=true ) )",
									"    {",
									"        pm.test(\"BUG - AuthId to be transfered to the Hypetap SSO have a hypetap email address. AuthId's email: \" + pm.variables.get(\"emailOfAuth\"));//, function(){",
									"            //pm.expect((/(hypetap.com)$/).test(pm.variables.get(\"emailOfAuth\"))).to.equal(true);",
									"        //});",
									"    }",
									"",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    // 400 if logged in users profilStatus is not manager or agency or",
									"    //if the session user is deleted",
									"    pm.test(\"Status 400, unsuccessful. User message: \"+responresponseBody.notes.userMessage,function(){",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Invalid user to add. Not Manager or Agency.\",\"Not available\"]);",
									"    })",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status is 403. Unauthorised, user is not a sso manager\", function(){",
									"        pm.expect(responseBody.notes.manager);",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{addAuthIdToSso}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{addAuthIdToSso}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Part of New SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //To check auth has been added",
									"    pm.test(\"Auths for current session has incremented by one.\",function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal((pm.variables.get(\"totalAuths\")+1));",
									"    });",
									"",
									"    pm.test(\"SSO contains added auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    })",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ssoManger (Original from SSO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Orgin",
								"value": "https://devdelivery.mel.hypetap.com",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"description": "a.hypetap+cmc@gmail.com (SSO Manager)",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Is Not Part of Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"SSO doesn't contain removed auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(false);",
									"    })",
									"",
									"    pm.variables.set(\"totalAuths\", responseBody.unpaginatedCount);",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adds AuthId Back to Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code ==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for current session '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });    ",
									"}",
									"else if (pm.response.code==400)",
									"{",
									"    // 400 if logged in users profilStatus is not manager or agency or",
									"    //if the session user is deleted",
									"    pm.test(\"Status 400, unsuccessful. User message: \"+responresponseBody.notes.userMessage,function(){",
									"        pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"Invalid user to add. Not Manager or Agency.\",\"Not available\"]);",
									"    })",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    //403 if session user is not a sso manager",
									"    pm.test(\"Status is 403. Unauthorised, user is not a sso manager\", function(){",
									"        pm.expect(responseBody.notes.manager);",
									"    })",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{addAuthIdToSso}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{addAuthIdToSso}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Added Back to Old SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" auths for current session of '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"SSO contains added auth\",function(){",
									"        pm.expect(containsAuthId(responseBody.object, pm.variables.get(\"addAuthIdToSso\"))).to.equal(true);",
									"    });",
									"",
									"        //To check auth has been added",
									"    pm.test(\"Auths for current session has incremented by one.\",function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal((pm.variables.get(\"totalAuths\")+1));",
									"    });",
									"}",
									"",
									"function containsAuthId(list, auth)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].id==auth)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update userSettings and Revert",
			"item": [
				{
					"name": "Hyptap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get UserSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"    //saving original usersettings to be able to revert PUT call in 4.4",
									"    pm.variables.set(\"settingsOriginal\", responseBody.object);",
									"    savedData = JSON.stringify(pm.variables.get(\"settingsOriginal\"));",
									"    pm.environment.set(\"savedData\", savedData);",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. Requested updates \"+ requestBody.users.length, function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\":\n    [\n        { \n            \"username\": \"davidjones1\",\n\n            \"emailSummary\":false,\n            \"disableReminders\":false,\n            \"subscribed\": false\n        },\n        { \n            \"username\": \"sevenseedscoffeeroasters\",\n            \"emailInstant\":false,\n            \"emailSummary\":false,\n            \"disableReminders\":false,\n            \"subscribed\": false\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates Were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( pm.variables.get(\"requestSettings\"), responseBody.object)).to.equal(true);",
									"})",
									"",
									"//request is a list of userSetting objects request = [ {\"username\":\"jennie\", \"emailInstant:true\"}, {..}, {..}..]",
									"function compareRequestResponse(request, response)",
									"{",
									"    //to keep track if any usernames matched, if no usernames matched means no updates were done",
									"    let count =0;",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        for(let j=0; j<response.length; ++j)",
									"        {",
									"            //username is required for PUT call to work so can always use username to find right object",
									"            if(request[i].username==response[j].username)",
									"            {",
									"                count+=1;",
									"                //undifined means it was not given in request and should not be compared to response",
									"                if(request[i].emailInstant != undefined && request[i].emailInstant!=response[j].emailInstant)   //if true - given in request but not matching response",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].emailSummary != undefined && request[i].emailSummary!=response[j].emailSummary)   //if true - given in request but not matching response",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].disableReminders != undefined && request[i].disableReminders!=response[j].disableReminders)",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].subscribed != undefined && request[i].subscribed!=response[j].subscribed)   //if true- given in request but not matching response",
									"                {",
									"                    return false;",
									"                }          ",
									"",
									"            }",
									"        }",
									"    }",
									"    // if count == 0 means no usernames are the same from request and response so nothing has been updated",
									"    if(count==0)",
									"    {",
									"        return false;",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									" pm.test(\"Status code is 200. \", function () {",
									"    pm.response.to.have.status(200);",
									"    });",
									"",
									"//save request, find object by username in GET and compare fields ",
									"pm.variables.set(\"requestSettings\", requestBody.users);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"users\": {{savedData}} \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate If Updates Were Made",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" users and settings for '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"var responseBodyOriginal = JSON.parse( pm.environment.get(\"savedData\"));",
									"",
									"pm.test(\"User settings have been updated\", function(){",
									"    pm.expect(compareRequestResponse( responseBodyOriginal, responseBody.object)).to.equal(true);",
									"})",
									"",
									"//request is a list of userSetting objects request = [ {\"username\":\"jennie\", \"emailInstant:true\"}, {..}, {..}..]",
									"function compareRequestResponse(request, response)",
									"{",
									"    //to keep track if any usernames matched, if no usernames matched means no updates were done",
									"    let count =0;",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        for(let j=0; j<response.length; ++j)",
									"        {",
									"            //username is required for PUT call to work so can always use username to find right object",
									"            if(request[i].username==response[j].username)",
									"            {",
									"                count+=1;",
									"                //undifined means it was not given in request and should not be compared to response",
									"                if(request[i].emailInstant != undefined && request[i].emailInstant!=response[j].emailInstant)   //if true - given in request but not matching response",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].emailSummary != undefined && request[i].emailSummary!=response[j].emailSummary)   //if true - given in request but not matching response",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].disableReminders != undefined && request[i].disableReminders!=response[j].disableReminders)",
									"                {",
									"                    return false;",
									"                }",
									"                else if(request[i].subscribed != undefined && request[i].subscribed!=response[j].subscribed)   //if true- given in request but not matching response",
									"                {",
									"                    return false;",
									"                }          ",
									"",
									"            }",
									"        }",
									"    }",
									"    // if count == 0 means no usernames are the same from request and response so nothing has been updated",
									"    if(count==0)",
									"    {",
									"        return false;",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update ROOT payeeDetails and Revert (Invoice)",
			"item": [
				{
					"name": "Hyptap Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+dj@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Payee Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"if (pm.response.code==200)",
									"{",
									"",
									"pm.variables.set(\"payeeDetailsOriginal\", findManager(responseBody.object).settings); ",
									"",
									"savedData = JSON.stringify(pm.variables.get(\"payeeDetailsOriginal\"));",
									"pm.environment.set(\"savedData\", savedData);",
									"",
									"}",
									"",
									"// Only the manager will have the root payeeDetails/settings?",
									"function findManager(response)",
									"{",
									"    for(let i=0; i<response.length; ++i)",
									"    {",
									"        if(response[i].manager!=null)",
									"        {",
									"            return response[i];",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/hypetap",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hypetap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates Root Sessions Payee Details.billingDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"//Check if input is contains digits ",
									"var hasNumber = /\\d/;  ",
									"pm.test(\"text/string fields of billingDetails doesn't contain numbers\", function(){",
									"    pm.expect(hasNumber.test(requestBody.payeeDetails.billingDetails.firstName)).to.equal(false); ",
									"    pm.expect(hasNumber.test(requestBody.payeeDetails.billingDetails.lastName)).to.equal(false); ",
									"    pm.expect(hasNumber.test(requestBody.payeeDetails.billingDetails.suburb)).to.equal(false); ",
									"    pm.expect(hasNumber.test(requestBody.payeeDetails.billingDetails.state)).to.equal(false);  ",
									"    pm.expect(hasNumber.test(requestBody.payeeDetails.billingDetails.country)).to.equal(false);       //inccorect format of country gives 500",
									"",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. PayeeDetails should be updated for root session of user '\"+ responseBody.session.authUser+ \"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save requestbody to check",
									"    pm.variables.set(\"payeeDetailsNew\", requestBody);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    console.log(Object.keys(responseBody.notes).length);",
									"",
									"    // status is 400. Empty object and notes are returned when update request is empty or",
									"    //when incorrect registrations are given",
									"    if(responseBody.notes==null&& responseBody.object==null)",
									"    {",
									"        pm.test(\"Invalid update request\");",
									"    }",
									"    else if(Object.keys(responseBody.notes).length==0)",
									"    {",
									"        //returns notes: {} and object: null if faulty taxRegistration type is given ",
									"        pm.test(\"Inccorrect data type\")",
									"    }",
									"    else if (responseBody.object==null)",
									"    {",
									"        //returns abn: false if registration number is incorrect, (needs to be 0-9 and length 11)",
									"        pm.test(\"Incorrect ABN details\", function(){",
									"            pm.expect(responseBody.notes.abn).to.equal(false);",
									"        })",
									"    }",
									"",
									"//original \"missing\",requiredRegistration",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.globals.set(\"requestBody\", JSON.stringify(pm.iterationData.toObject()));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"payeeDetails\":\n        {\n            \"billingDetails\":\n            {\n                \"firstName\": \"Sam\",\n                \"lastName\": \"Vandervis\",\n                \"email\": \"dumbanddummy1+samsam@gmail.com\",\n                \"companyName\": \"Water\",\n                \"addressOne\": \"100 Bourke St\",\n                \"suburb\": \"Melbourne\",\n                \"state\": \"Victoria\",\n                \"postcode\": \"3000\",\n                \"country\": \"Australia\",\n                \"registrations\":\n                [\n                    {\n                        \"taxRegistration\": \"ABN\",\n                        \"registration\": \"92983933887\"\n                    }\n                ]\n            },\n            \"taxes\":\n            [\n                \"5c4148c0429dea828ade7fbb\",\n                \"5c5b8073d58c01917bfee509\"\n            ]\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/payeeDetails",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"payeeDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Payee Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"        ",
									"    pm.test(\"PayeeDetails have been updated\", function(){",
									"        pm.expect( requestAndResponseMatch(pm.variables.get(\"payeeDetailsNew\").payeeDetails.billingDetails, ",
									"                    (findManager(responseBody.object)).settings.payeeDetails.billingDetails) ).to.equal(true);",
									"    })",
									"",
									"}",
									"",
									"// Only the manager will have the root payeeDetails/settings?",
									"function findManager(response)",
									"{",
									"    for(let i=0; i<response.length; ++i)",
									"    {",
									"        if(response[i].manager!=null)",
									"        {",
									"            return response[i];",
									"        }",
									"    }",
									"}",
									"",
									"//response from GET user/hypetap will always have the same structure whereas",
									"// the request might change depending on what the user wants to update.",
									"",
									"// checks what fields the request contains, (what fields to be updated) and ",
									"// compairs the request value and response value of the same field.",
									"//returns false if they don't match",
									"function requestAndResponseMatch(request, response)",
									"{",
									"    let responseFields = [\"firstName\", \"lastName\", \"email\", \"companyName\", \"addressTwo\", \"suburb\", \"state\", \"country\", \"registrations\"];",
									"",
									"    for(let i; i < responseFields.length; ++i)",
									"    {",
									"        if(request.hasOwnProperty(responseFields[i]))",
									"        {",
									"            if(responseFields[i]== \"registration\" && request.registration.hasOwnProperty(\"taxRegistration\") )",
									"            {",
									"                if(request.registration.taxRegistration!=response.registration.taxRegistration)",
									"                {",
									"                   return false;",
									"                }",
									"            }",
									"            else if (request.responseFields[i]!=response.responseFields[i])",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/hypetap",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hypetap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Revert Updates (doesn't check email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200. PayeeDetails should be updated for root session of user '\"+ responseBody.session.authUser+ \"'\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"if(pm.response.code==400)",
									"{",
									"",
									"    // status is 400. Empty object and notes are returned when update request is empty or",
									"    //when incorrect registrations are given",
									"    if(responseBody.notes==null&& responseBody.object==null)",
									"    {",
									"        pm.test(\"Invalid update request\");",
									"    }",
									"    else if(Object.keys(responseBody.notes).length==0)",
									"    {",
									"        //returns notes: {} and object: null if faulty taxRegistration type is given ",
									"        pm.test(\"Inccorrect data type\")",
									"    }",
									"    else if (responseBody.object==null)",
									"    {",
									"        //returns abn: false if registration number is incorrect, (needs to be 0-9 and length 11)",
									"        pm.test(\"Incorrect ABN details\", function(){",
									"            pm.expect(responseBody.notes.abn).to.equal(false);",
									"        })",
									"    }",
									"",
									"//original \"missing\",requiredRegistration",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{savedData}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/payeeDetails",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"payeeDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Payee Details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"",
									"   var requestBodyOriginal = JSON.parse( pm.environment.get(\"savedData\"));",
									"",
									"    pm.test(\"PayeeDetails have been updated\", function(){",
									"       pm.expect( requestAndResponseMatch( requestBodyOriginal.payeeDetails.billingDetails, ",
									"                                            findManager(responseBody.object).billingDetails ) ).to.equal(true); });",
									"",
									"}",
									"",
									"",
									"// Only the manager will have the root payeeDetails/settings?",
									"function findManager(response)",
									"{",
									"    for(let i=0; i<response.length; ++i)",
									"    {",
									"        if(response[i].manager!=null)",
									"        {",
									"            return response[i].settings.payeeDetails;",
									"        }",
									"    }",
									"}",
									"",
									"",
									"//response from GET user/hypetap will always have the same structure whereas",
									"// the request might change depending on what the user wants to update.",
									"",
									"// checks what fields the request contains, (what fields to be updated) and ",
									"// compairs the request value and response value of the same field.",
									"//returns false if they don't match",
									"function requestAndResponseMatch(request, response)",
									"{",
									"    let responseFields = [\"firstName\", \"lastName\", \"email\", \"companyName\", \"addressTwo\", \"suburb\", \"state\", \"country\", \"registrations\"];",
									"",
									"    for(let i; i < responseFields.length; ++i)",
									"    {",
									"        if(request.hasOwnProperty(responseFields[i]))",
									"        {",
									"            if(responseFields[i]== \"registration\" && request.registration.hasOwnProperty(\"taxRegistration\") )",
									"            {",
									"                if(request.registration.taxRegistration!=response.registration.taxRegistration)",
									"                {",
									"                   return false;",
									"                }",
									"            }",
									"            else if (request.responseFields[i]!=response.responseFields[i])",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"    }",
									"    return true;",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/hypetap",
							"host": [
								"{{test}}user"
							],
							"path": [
								"hypetap"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Calls",
			"item": [
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lists Users Auth Can Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\");",
									"",
									"    // if only one user/object is returned then the current auth doesn't have access to any other user than themselves",
									"    if(responseBody.object.length==1)",
									"    {",
									"        pm.test(\"Only returned one user for auth, i.e. the user identified by the session, '\" + responseBody.object[0].username+\"'.\");",
									"    }    ",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Authorities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseBody = pm.response.json();",
									"pm.globals.set(\"authorities\", responseBody.authorities)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{test}}authenticate/status",
							"host": [
								"{{test}}authenticate"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending (sso/admin/pending)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"     pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									"    //Call allowed for @BossOnly",
									"    //use saved variable to validate if boss",
									"    pm.test(\"Authoritie of current session user is BOSS.\", function()",
									"    {",
									"        pm.expect(pm.variables.get(\"authorities\")).to.contain(\"ROLE_BOSS\")",
									"    }) ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users for Given Auth (Auth Have to Exixt in Current Session)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/5d3557fe218137666c2af5ed/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"5d3557fe218137666c2af5ed",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auths of SSO and Their Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    });",
									"",
									"}",
									"//This error is returened if it can't find the user id in user collection, i.e user doesn't exist",
									"else if (pm.response.code==400)",
									"{",
									"    if(responseBody.notes!=null)",
									"    {",
									"        pm.test(\"Faulty data in sso, userId from usersettings is not found in the user collection\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Expected single match but was empty\" );",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Auths for Given User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//melburnejade or bossuser1 as 400 examples",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"   pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" auths for \"+ pm.request.url.path[3], function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400, userMessage: \"+responseBody.notes.userMessage, function(){",
									"     pm.expect(responseBody.notes.userMessage).to.be.oneOf([\"User not part of this SSO\", \"Not available\"]);",
									"     pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/seafolly/auths",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"seafolly",
								"auths"
							]
						}
					},
					"response": []
				},
				{
					"name": "ssGet userSettings.authSettings for All Users of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns authsettings (in userSettings) for each user which the current session user can access",
									"// Also includes settings of current user since they can access their own user, (themselves)",
									"// Should return one more than GET sso/manage/{authId of current session user}/users since it list users (excluding current user)",
									"",
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned",
									"//count object returned should be equal to the auths given session user has access to ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects for user '\"+responseBody.session.authUser+\"'\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/settings",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"settings"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\"ms\");",
					"",
					"if(pm.response.code==200)",
					"{",
					"    //Will only run validation test if call has a request body in mode \"raw\"",
					"    if( pm.request.method!=\"GET\" && pm.request.body!=undefined && pm.request.body.mode==\"raw\")",
					"    {  ",
					"        //language add for list in object key func.",
					"",
					"        var request = JSON.parse(pm.request.body.raw);",
					"        convertedRequest = {};",
					"        obj(request,\"t\");",
					"        //console.log(\"new\",convertedRequest)",
					"",
					"        var containDigits= /\\d{1,}/;",
					"        var onlyDigits =/^[0-9]{1,}$/; //only allows numbers no space",
					"        var notOnlySpace = (/\\S/);",
					"",
					"",
					"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
					"        var validNameNoSpecialChar =/^([A-Z])[A-Za-z\" \"]{1,}$/; //not numbers, start with capital. Allows \" \" for (South Australia) ",
					"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
					"        var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; //have existing func. in backend",
					"        var validPhoneNum = /^[0-9+-]{1,}$/;   // numbers only and - +",
					"    ",
					"        //social profile usernames",
					"        var validateTikTokUsername= /^[\\w\\d_.]+$/;",
					"        var validateFBUsername= /^[\\w\\d\\-.]+$/;",
					"        var validateInstaUsername= /^[\\w\\d_.]+$/;",
					"        var validatePineterestUsername= /^[\\w\\d]+$/;",
					"        var validateTwitterUsername= /[\\w\\d\\-_]+$/;",
					"        var validateYoutubeUsername= /^[\\w\\d\\-_]+$/;",
					"        var validateBlogUsername= /\\s/;    //blog should not contain space",
					"",
					"        //company",
					"        //not only number or only blank space",
					"        if(convertedRequest.company!=undefined)",
					"        {",
					"            pm.test(\"Valid company\", function(){",
					"                pm.expect(onlyDigits.test(convertedRequest.company)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.company)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //websiteUrl\":\" \"",
					"        //needs futher validation",
					"        if(convertedRequest.websiteUrl!=undefined)",
					"        {",
					"            pm.test(\"Valid websiteUrl\", function(){",
					"                pm.expect(notOnlySpace.test(convertedRequest.websiteUrl)).to.equal(true)",
					"            })",
					"        }",
					"        //currentLocation",
					"        // Perth (Australia)",
					"        if(convertedRequest.currentLocation!=undefined)",
					"        {",
					"            pm.test(\"Valid currentLocation\", function(){",
					"                pm.expect(containDigits.test(convertedRequest.currentLocation)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.currentLocation)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //location",
					"        // example Stockholm (Sweden), needs to be allowed space",
					"        if(convertedRequest.location!=undefined)",
					"        {",
					"            pm.test(\"Valid location\", function(){",
					"                pm.expect(containDigits.test(convertedRequest.location)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.location)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //type agency or manager",
					"        if(convertedRequest.type!=undefined)",
					"        {",
					"            pm.test(\"Valid type\", function(){",
					"                pm.expect(convertedRequest.type).to.be.oneOf([\"agency\", \"manager\"])",
					"            })",
					"        }",
					"",
					"        //title",
					"        if(convertedRequest.title!=undefined)",
					"        {",
					"            pm.test(\"Valid title\", function(){",
					"                pm.expect(convertedRequest.title).to.not.be.oneOf([\"\", null])",
					"                pm.expect(notOnlySpace.test(convertedRequest.title)).to.equal(true);    //not only spaces",
					"            })",
					"        }",
					"",
					"        //companyName",
					"        if(convertedRequest.companyName!=undefined)",
					"        {",
					"            pm.test(\"Valid company name\", function(){",
					"                pm.expect(convertedRequest.companyName).to.not.be.oneOf([\"\", null])",
					"                pm.expect(notOnlySpace.test(convertedRequest.companyName)).to.equal(true);    //not only spaces",
					"            })",
					"        }",
					"",
					"",
					"        //Address",
					"        //all fields needs to be provided to be valid otherwise get 400. So it's enough to check if one field is given ",
					"        if( (convertedRequest.addressOne!=undefined))",
					"        {",
					"            pm.test(\"Address is valid\", function(){",
					"                pm.expect( convertedRequest.addressOne).to.not.equal(null);",
					"                pm.expect(notOnlySpace.test(convertedRequest.addressOne)).to.equal(true);",
					"",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.state) ).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.country) ).to.equal(true);",
					"                pm.expect( validNameNoSpecialChar.test(convertedRequest.suburb) ).to.equal(true);              ",
					"                pm.expect( onlyDigits.test(convertedRequest.postcode) ).to.equal(true);            ",
					"            })",
					"        }",
					"        //first name",
					"        if(convertedRequest.firstName!=undefined)",
					"        {",
					"            pm.test(\"First name is valid\", function(){",
					"                pm.expect((validName.test(convertedRequest.firstName))).to.equal(true);",
					"            });",
					"        }",
					"        //last name",
					"        if(convertedRequest.lastName!=undefined)",
					"        {",
					"            pm.test(\"Last name is valid\", function(){",
					"                pm.expect(validName.test(convertedRequest.lastName)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        if(convertedRequest.gender!=undefined)",
					"        {",
					"            pm.test(\"Gender is valid\", function(){",
					"                pm.expect(convertedRequest.gender).to.be.oneOf([\"FEMALE\", \"MALE\", \"OTHER\"]);",
					"            });",
					"        }",
					"",
					"",
					"        //username",
					"        if(convertedRequest.username!=undefined)",
					"        {",
					"            pm.test(\"Username is valid\", function(){",
					"                pm.expect(validUsername.test(convertedRequest.username)).to.equal(true);",
					"            });",
					"        }",
					"        // displayName",
					"        if(convertedRequest.displayName!=undefined)",
					"        {",
					"            pm.test(\"displayName is valid\", function(){",
					"                pm.expect(notOnlySpace.test(convertedRequest.displayName)).to.equal(true);",
					"            });",
					"        }",
					"    ",
					"        //socialUrls can be left empty, (\"\"), in sso/manage/add/user for a brand ",
					"        //tiktokProfile.username",
					"        if(convertedRequest.tiktok!=undefined && convertedRequest.tiktok!=\"\")",
					"        {",
					"            pm.test(\"Tiktok username is valid\", function(){",
					"                pm.expect(validateTikTokUsername.test(convertedRequest.tiktok)).to.equal(true);",
					"            });",
					"        }",
					"        ",
					"        //facebookProfile.username",
					"        if(convertedRequest.facebook!=undefined&&convertedRequest.facebook!=\"\")",
					"        {",
					"            pm.test(\"Facebook username is valid\", function(){",
					"                pm.expect(validateFBUsername.test(convertedRequest.facebook)).to.equal(true);",
					"            });",
					"        }",
					"        //instagramProfile.username",
					"        if(convertedRequest.instagram!=undefined&&convertedRequest.instagram!=\"\")",
					"        {",
					"            pm.test(\"Instagram username is valid\", function(){",
					"                pm.expect(validateInstaUsername.test(convertedRequest.instagram)).to.equal(true);",
					"            });",
					"        }",
					"        //pinterestProfile.username",
					"        if(convertedRequest.pinterest!=undefined&&convertedRequest.pinterest!=\"\")",
					"        {",
					"            pm.test(\"Pinterest username is valid\", function(){",
					"                pm.expect(validatePineterestUsername.test(convertedRequest.pinterest)).to.equal(true);",
					"            });",
					"        }",
					"        //twitter.username",
					"        if(convertedRequest.twitter!=undefined&&convertedRequest.twitter!=\"\")",
					"        {",
					"            pm.test(\"Twitter username is valid\", function(){",
					"                pm.expect(validateTwitterUsername.test(convertedRequest.twitter)).to.equal(true);",
					"            });",
					"        }  ",
					"",
					"        //youtube.username",
					"        if(convertedRequest.youtube!=undefined&&convertedRequest.youtube!=\"\")",
					"        {",
					"            pm.test(\"Youtube username is valid\", function(){",
					"                pm.expect(validateYoutubeUsername.test(convertedRequest.youtube)).to.equal(true);",
					"            });",
					"        } ",
					"        ",
					"        //blog",
					"        if(convertedRequest.blog!=undefined&&convertedRequest.blog!=\"\")",
					"        {",
					"            //validateBlog will return true if white space is found",
					"            //so if it returns false, (i.e no space found) then its a valid username",
					"            pm.test(\"Blog username is valid\", function(){",
					"                pm.expect(validateBlogUsername.test(convertedRequest.blog)).to.equal(false);",
					"            });",
					"        }",
					"",
					"        //number",
					"        if(convertedRequest.number!=undefined)",
					"        {",
					"            pm.test(\"number is valid\", function(){",
					"            pm.expect(validPhoneNum.test(convertedRequest.number)).to.equal(true);",
					"            });",
					"        }",
					"",
					"",
					"        //email",
					"        if(convertedRequest.email!=undefined)",
					"        {",
					"           // pm.test(\"Email is valid\", function(){",
					"            //pm.expect(validEmail.test(convertedRequest.email)).to.equal(true);",
					"           // });",
					"        }",
					"",
					"        //description",
					"        if(convertedRequest.description!=undefined)",
					"        {",
					"        pm.test(\"Valid description\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.description)).to.equal(true);",
					"        })",
					"        }",
					"            //descriptionLong",
					"        if(convertedRequest.descriptionLong!=undefined)",
					"        {",
					"        pm.test(\"Valid descriptionLong\", function(){",
					"            pm.expect(notOnlySpace.test(convertedRequest.descriptionLong)).to.equal(true);",
					"        })",
					"        }",
					"        ",
					"    }",
					"",
					"}",
					"",
					"//------------------Functions",
					"",
					"function obj(object,root)",
					"{    ",
					"    Object.entries(object).forEach((entry) => {",
					"    const [key, value] = entry;",
					"",
					"        //to avoid function from failing due to null values",
					"        if(value!=null)",
					"        {",
					"            if(typeof value === \"object\")",
					"            {",
					"                root=key;",
					"                obj(value,root);",
					"            }",
					"            else",
					"            {",
					"                //to stop function from overwriting fileds with same name, (ex username)",
					"                if(convertedRequest.hasOwnProperty(key)==true)  //new test",
					"                {",
					"                    convertedRequest[root+key]= value;  //+\".\"+",
					"                }",
					"                else",
					"                {",
					"                    convertedRequest[key]= value;",
					"                }",
					"",
					"            }",
					"        } ",
					"    });",
					"    ",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userToAddToAuth",
			"value": "seafolly"
		},
		{
			"key": "authIdToAddUserTo",
			"value": "5d5c80f02181377e03339f01"
		},
		{
			"key": "managerAuthIdToAddUserTo",
			"value": "5d3557fe218137666c2af5ed"
		},
		{
			"key": "addAuthIdToSso",
			"value": "5df9c1f22181370c1607c900"
		},
		{
			"key": "switchUsername",
			"value": "bundaberg"
		},
		{
			"key": "accumulateResponseTime",
			"value": "0"
		}
	]
}
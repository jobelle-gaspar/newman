{
	"info": {
		"_postman_id": "26533db1-a79c-43f0-b236-d6f840ab0d69",
		"name": "TM",
		"description": "Needs restoring\n\nCollection test might fail if the request body is ticked as 'raw' even though it's empty/not used for any other calls than GET in the collection.\n\nTick 'none' and save to resolve error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Reject Influencer",
			"item": [
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+jules@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pm.variables.set(\"tmAuthId\", responseBody.session.authId);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"influencerReject\")+ \" exist in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"influencerReject\"))).to.equal(true);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{tmAuthId}}/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{tmAuthId}}",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Is Pending",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var jsonData = pm.response.json();",
									"var influencerProfileStatus = jsonData.object.profileStatus",
									"",
									"pm.test(\"Profile status is : \"+influencerProfileStatus, function () {",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('pendinginfluencer');",
									"});",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{influencerReject}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{influencerReject}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Exist in PendingUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"influencerReject\") + \" exist in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"influencerReject\"))).to.equal(true);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject Pendinginfluencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// needs to hypetap to make call",
									"",
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Successfuly rejected pending influencer \" + requestBody.talentUsername)",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Call only allowed for Hypetap employees\")",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"talentUsername\":\"{{influencerReject}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}manager/reject/",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"reject",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Doesn't Exist in PendingUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"influencerReject\") + \" doesn't exist in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"influencerReject\"))).to.equal(false);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+jules@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Doesn't Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"influencerReject\")+ \" doesn't exist in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"influencerReject\"))).to.equal(false);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/5de722f62181375cd8b56f87/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"5de722f62181375cd8b56f87",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Is Deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    var influencerProfileStatus = jsonData.object.profileStatus",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"    pm.test(\"Verify profile status is influencer: \"+influencerProfileStatus, function () {",
									"    pm.expect(jsonData.object.profileStatus\t).to.eql('influencer');",
									"});",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"User not found in list of users\");",
									"}",
									"else",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is \" + pm.response.code  +\" for '\" +pm.request.url.path[2]+\"'.\", function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400,404]);",
									"    });",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{influencerReject}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{influencerReject}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Approve Influencer",
			"item": [
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+rpr@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pm.variables.set(\"tmAuthId\", responseBody.session.authId);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"influencerApprove\")+ \" exist in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"influencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{tmAuthId}}/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{tmAuthId}}",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    pm.test(\"Profile status is : \"+responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.profileStatus\t).to.eql('pendinginfluencer');",
									"});",
									"",
									"    //Validate given fields before approving user",
									"    validFields(responseBody.object);    ",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"",
									"else if(pm.response.code==401)",
									"{",
									"    pm.test(\"Status 401, not authenticated\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"User not found in list of users\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is 400\");",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"//----------------Functions",
									"",
									"",
									"// validates required fields for an approved influencer",
									"function validFields(user)",
									"{",
									"        var notOnlySpace = (/\\S/);",
									"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
									"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
									"    ",
									"        //social profile usernames",
									"        var validateTikTokUsername= /^[\\w\\d_.]+$/;",
									"        var validateFBUsername= /^[\\w\\d\\-.]+$/;",
									"        var validateInstaUsername= /^[\\w\\d_.]+$/;",
									"        var validatePineterestUsername= /^[\\w\\d]+$/;",
									"        var validateTwitterUsername= /[\\w\\d\\-_]+$/;",
									"        var validateYoutubeUsername= /^[\\w\\d\\-_]+$/;",
									"        var validateBlogUsername= /\\s/;    //blog should not contain space",
									"",
									"",
									"    //first name",
									"    pm.test(\"First name is valid\", function(){",
									"        pm.expect(user.firstName).to.not.equal(null);",
									"        pm.expect((validName.test(user.firstName))).to.equal(true);",
									"    });",
									"",
									"    //last name",
									"    pm.test(\"Last name is valid\", function(){",
									"        pm.expect(user.lastName).to.not.equal(null);",
									"        pm.expect(validName.test(user.lastName)).to.equal(true);",
									"        });",
									"    ",
									"",
									"    //username",
									"    pm.test(\"Username is valid\", function(){",
									"        pm.expect(user.username).to.not.equal(null);",
									"        pm.expect(validUsername.test(user.username)).to.equal(true);",
									"    });",
									"        ",
									"    // displayName",
									"    pm.test(\"displayName is valid\", function(){",
									"        pm.expect(user.displayName).to.not.equal(null);",
									"        pm.expect(notOnlySpace.test(user.displayName)).to.equal(true);",
									"    });",
									"",
									"    pm.test(\"Influencer has a profile image and cover image\", function(){",
									"        pm.expect(user.profileImage && user.coverImage ).to.not.equal(null);",
									"    })",
									"",
									"    pm.test(\"Influencer has one social channel\", function(){",
									"        pm.expect( user.tiktokProfile && user.youtubeProfile &&",
									"                    user.facebookProfile && user.instagramProfile &&",
									"                    user.pinterestProfile && user.twitterProfile && user.snapchatProfile &&",
									"                    user.blogProfile).to.not.equal(null);",
									"    })",
									"",
									"    //tiktokProfile.username",
									"    if(user.influencer.tiktokProfile!=null)",
									"    {",
									"        pm.test(\"Tiktok username is valid\", function(){",
									"        pm.expect(validateTikTokUsername.test(user.influencer.tiktokProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.facebookProfile!=null)",
									"    {",
									"        //facebookProfile.username",
									"        pm.test(\"Facebook username is valid\", function(){",
									"            pm.expect(validateFBUsername.test(user.influencer.facebookProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.instagramProfile!=null)",
									"    {",
									"        //instagramProfile.username",
									"        pm.test(\"Instagram username is valid\", function(){",
									"            pm.expect(validateInstaUsername.test(user.influencer.instagramProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.pinterestProfile !=null)",
									"    {",
									"        //pinterestProfile.username",
									"        pm.test(\"Pinterest username is valid\", function(){",
									"            pm.expect(validatePineterestUsername.test(user.influencer.pinterestProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.twitterProfile !=null)",
									"    {",
									"        //twitter.username",
									"        pm.test(\"Twitter username is valid\", function(){",
									"            pm.expect(validateTwitterUsername.test(user.influencer.twitterProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.youtubeProfile !=null)",
									"    {",
									"        //youtube.username",
									"        pm.test(\"Youtube username is valid\", function(){",
									"            pm.expect(validateYoutubeUsername.test(user.influencer.youtubeProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.blogProfile!=null)",
									"    {",
									"        //validateBlog will return true if white space is found",
									"        //so if it returns false, (i.e no space found) then its a valid username",
									"        pm.test(\"Blog username is valid\", function(){",
									"            pm.expect(validateBlogUsername.test(user.influencer.blogProfile.username)).to.equal(false);",
									"        });",
									"    }",
									"/*  Not required from backend",
									"    //description",
									"    pm.test(\"Valid description\", function(){",
									"        pm.expect(user.influencer.description).to.not.equal(null);",
									"        pm.expect(notOnlySpace.test(user.influencer.description)).to.equal(true);",
									"    })",
									"  */      ",
									"    //description long",
									"    pm.test(\"Valid descriptionLong\", function(){",
									"        pm.expect(user.influencer.descriptionLong).to.not.equal(null);",
									"        pm.expect(notOnlySpace.test(user.influencer.descriptionLong)).to.equal(true);",
									"    })",
									"       ",
									"        ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{influencerApprove}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{influencerApprove}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Exist in PendingUsers List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"influencerApprove\") + \" exist in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"influencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Pending Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// needs to be hypetap to make call",
									"// call will validate fields of user before adding user",
									"",
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Successfuly approved pending influencer \" + requestBody.talentUsername)",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Call only allowed for Hypetap employees\")",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"talentUsername\":\"{{influencerApprove}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}manager/approve/",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"approve",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Doesn't Exist in PendingUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"influencerApprove\") + \" doesn't exist in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"influencerApprove\"))).to.equal(false);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+rpr@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"influencerApprove\")+ \" exists in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"influencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{tmAuthId}}/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{tmAuthId}}",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Is Part of Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    var influencerProfileStatus = jsonData.object.profileStatus",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(responseBody.object.username+ \" has been approved and have the profileStatus 'influencer'\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"        pm.expect(jsonData.object.profileStatus\t).to.eql('influencer');",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else if(pm.response.code==401)",
									"{",
									"    pm.test(\"Status 401, not authenticated\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"User not found in list of users\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is 400\");",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{influencerApprove}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{influencerApprove}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Approve Influencer",
			"item": [
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+jules@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"pm.variables.set(\"tmAuthId\", responseBody.session.authId);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"NEGinfluencerApprove\")+ \" exist in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"NEGinfluencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{tmAuthId}}/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{tmAuthId}}",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BOSS Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(\"Response contains username '\" +responseBody.object.username+\"'.\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    pm.test(\"Profile status is : \"+responseBody.object.profileStatus, function () {",
									"        pm.expect(responseBody.object.profileStatus\t).to.eql('pendinginfluencer');",
									"});",
									"",
									"    //Validate given fields before approving user",
									"    //will pass if fields are valid",
									"    validFields(responseBody.object);",
									"",
									"    ",
									"    //descriptionLong is null for this test case",
									"    // will pass if it is null, (negative test) ",
									"    pm.test(\"descriptionLong is not valid\", function(){",
									"        pm.expect(responseBody.object.influencer.descriptionLong).to.equal(null);",
									"    })    ",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"",
									"else if(pm.response.code==401)",
									"{",
									"    pm.test(\"Status 401, not authenticated\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"User not found in list of users\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is 400\");",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"//----------------Functions",
									"",
									"//cover, profile",
									"",
									"// validates required fields for an approved influencer",
									"function validFields(user)",
									"{",
									"        var notOnlySpace = (/\\S/);",
									"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
									"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
									"    ",
									"        //social profile usernames",
									"        var validateTikTokUsername= /^[\\w\\d_.]+$/;",
									"        var validateFBUsername= /^[\\w\\d\\-.]+$/;",
									"        var validateInstaUsername= /^[\\w\\d_.]+$/;",
									"        var validatePineterestUsername= /^[\\w\\d]+$/;",
									"        var validateTwitterUsername= /[\\w\\d\\-_]+$/;",
									"        var validateYoutubeUsername= /^[\\w\\d\\-_]+$/;",
									"        var validateBlogUsername= /\\s/;    //blog should not contain space",
									"",
									"",
									"    //first name",
									"    pm.test(\"First name is valid\", function(){",
									"        pm.expect(user.firstName).to.not.equal(null);",
									"        pm.expect((validName.test(user.firstName))).to.equal(true);",
									"    });",
									"",
									"    //last name",
									"    pm.test(\"Last name is valid\", function(){",
									"        pm.expect(user.lastName).to.not.equal(null);",
									"        pm.expect(validName.test(user.lastName)).to.equal(true);",
									"        });",
									"    ",
									"",
									"    //username",
									"    pm.test(\"Username is valid\", function(){",
									"        pm.expect(user.username).to.not.equal(null);",
									"        pm.expect(validUsername.test(user.username)).to.equal(true);",
									"    });",
									"        ",
									"    // displayName",
									"    pm.test(\"displayName is valid\", function(){",
									"        pm.expect(user.displayName).to.not.equal(null);",
									"        pm.expect(notOnlySpace.test(user.displayName)).to.equal(true);",
									"    });",
									"",
									"    pm.test(\"Influencer has a profile image and cover image\", function(){",
									"        pm.expect(user.profileImage && user.coverImage ).to.not.equal(null);",
									"    })",
									"",
									"    pm.test(\"Influencer has one social channel\", function(){",
									"        pm.expect( user.tiktokProfile && user.youtubeProfile &&",
									"                    user.facebookProfile && user.instagramProfile &&",
									"                    user.pinterestProfile && twitterProfile && user.snapchatProfile &&",
									"                    user.blogProfile).to.not.equal(null);",
									"    })",
									"",
									"    //tiktokProfile.username",
									"    if(user.influencer.tiktokProfile!=null)",
									"    {",
									"        pm.test(\"Tiktok username is valid\", function(){",
									"        pm.expect(validateTikTokUsername.test(user.influencer.tiktokProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.facebookProfile!=null)",
									"    {",
									"        //facebookProfile.username",
									"        pm.test(\"Facebook username is valid\", function(){",
									"            pm.expect(validateFBUsername.test(user.influencer.facebookProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.instagramProfile!=null)",
									"    {",
									"        //instagramProfile.username",
									"        pm.test(\"Instagram username is valid\", function(){",
									"            pm.expect(validateInstaUsername.test(user.influencer.instagramProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.pinterestProfile !=null)",
									"    {",
									"        //pinterestProfile.username",
									"        pm.test(\"Pinterest username is valid\", function(){",
									"            pm.expect(validatePineterestUsername.test(user.influencer.pinterestProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.twitterProfile !=null)",
									"    {",
									"        //twitter.username",
									"        pm.test(\"Twitter username is valid\", function(){",
									"            pm.expect(validateTwitterUsername.test(user.influencer.twitterProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.youtubeProfile !=null)",
									"    {",
									"        //youtube.username",
									"        pm.test(\"Youtube username is valid\", function(){",
									"            pm.expect(validateYoutubeUsername.test(user.influencer.youtubeProfile.username)).to.equal(true);",
									"        });",
									"    }",
									"    if(user.influencer.blogProfile!=null)",
									"    {",
									"        //validateBlog will return true if white space is found",
									"        //so if it returns false, (i.e no space found) then its a valid username",
									"        pm.test(\"Blog username is valid\", function(){",
									"            pm.expect(validateBlogUsername.test(user.influencer.blogProfile.username)).to.equal(false);",
									"        });",
									"    }      ",
									"       ",
									"        ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{NEGinfluencerApprove}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{NEGinfluencerApprove}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Exist in PendingUsers List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"influencerApprove\") + \" exist in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"NEGinfluencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Approve Pending Influencer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// needs to be hypetap to make call",
									"// call will validate fields of user before adding user",
									"",
									"var responseBody = pm.response.json();",
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status 200. Successfuly approved pending influencer \" + requestBody.talentUsername)",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Call only allowed for Hypetap employees\")",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"talentUsername\":\"{{NEGinfluencerApprove}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}manager/approve/",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"approve",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Exist in PendingUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.object.length+\" objects\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(pm.variables.get(\"NEGinfluencerApprove\") + \" still exists in list of pending influencers\", function(){",
									"        pm.expect(containsUsername( responseBody.object, pm.variables.get(\"NEGinfluencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //checke if the profileStatus is either pendinginfluencer or pendingbrand",
									"    pm.test(\"All returned objects are either pending influencers or pending brands.\", function()",
									"    {",
									"        pm.expect(allPending(responseBody.object)).to.equal(true);",
									"    }) ",
									"",
									" ",
									"}",
									"// Call only allowed for @BossOnly, returns 418 if logged in as employee",
									"else if (pm.response.code==418)",
									"{",
									"    pm.test(\"Status 418, denied call only allowed for boss only\", function(){",
									"        pm.expect(responseBody.notes.userMessage).to.equal(\"DENIED!\");",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"   ",
									"// returns true if every object in the list have either the profileStatus of pending influencer or pending brand.",
									"function allPending(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\")",
									"        {",
									"            return false;",
									"        }",
									"",
									"   }",
									"   return true;    ",
									"}",
									"",
									"//----------Functions",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/admin/pending",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"admin",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "TM of PendingInfluencer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+jules@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exist in TM SSO",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// Checks that 200 is returned ",
									"if(pm.response.code==200)",
									"{",
									"",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" users for auth \"+responseBody.session.authUser);",
									"",
									"    pm.test(pm.variables.get(\"NEGinfluencerApprove\")+ \" exists in current tm's SSO\", function(){",
									"        pm.expect(containsUsername(responseBody.object, pm.variables.get(\"NEGinfluencerApprove\"))).to.equal(true);",
									"    })",
									"",
									"    //returned objects should be either influecer, brand or pending brand/influencer.",
									"    pm.test(\"Returned objects are either pending influencers/brands or influencer/brand.\", function()",
									"    {",
									"        pm.expect(rightProfileStatuses(responseBody.object)).to.equal(true);",
									"    }); ",
									"",
									"    //Will only return users of authId if given authId is fount in the sso of current session",
									"    //Given auth may also mot have access to any brands or influencers",
									"    if(responseBody.unpaginatedCount==0)",
									"    {",
									"        pm.test(\"No users found, make sure given authId exist in the sso of the current session\",function(){",
									"            pm.expect(responseBody.object.length).to.equal(0);",
									"        })",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"// checks if response only list users of right profileStatus",
									"function rightProfileStatuses(list)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].profileStatus!=\"pendinginfluencer\" && list[i].profileStatus!=\"pendingbrand\"",
									"            && list[i].profileStatus!=\"influencer\" && list[i].profileStatus!=\"brand\")",
									"        {",
									"            return false;",
									"        }",
									"   }",
									"   return true;    ",
									"}",
									"",
									"",
									"",
									"function containsUsername(list, username)",
									"{",
									"   for(var i=0; i<list.length; ++i)",
									"   {",
									"        if(list[i].username==username)",
									"        {",
									"            return true;",
									"        }",
									"",
									"   }",
									"   return false;    ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/{{tmAuthId}}/users?pageStart=1&pageEnd=10000",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"{{tmAuthId}}",
								"users"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have not increased, total is still \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Influencer Is Not Added to Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"responseBody = pm.response.json();",
									"var jsonData = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    var influencerProfileStatus = jsonData.object.profileStatus",
									"    //Checks if status is 200",
									"    pm.test(\"Status code is 200 for '\" +pm.request.url.path[2]+\"'.\");",
									"",
									"    pm.test(responseBody.object.username+ \" has not been approved, profileStatus is still pending\", function () {",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"        pm.expect(jsonData.object.profileStatus\t).to.eql('pendinginfluencer');",
									"    });",
									"",
									"",
									"// Checks if user is a manager or agency, if that's the case then authId should be returned",
									"    if(responseBody.object.profileStatus==\"manager\" || responseBody.object.profileStatus==\"agency\") ",
									"    {",
									"            pm.test(\"Requested user is has profileStatus \"+responseBody.object.profileStatus+\" and response contains authId\", function(){",
									"            pm.expect(responseBody.object).to.have.property(\"authId\");",
									"        });",
									"",
									"    }",
									"",
									"}",
									"else if(pm.response.code==401)",
									"{",
									"    pm.test(\"Status 401, not authenticated\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"User not found in list of users\");",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    //Checks if status is 400 or 404 for invalid names or not found users",
									"    pm.test(\"Status code is 400\");",
									"",
									"    if(responseBody.notes!=null && responseBody.notes.userMessage!=null)",
									"    {",
									"        pm.test(\"Not Authorised to access user\", function(){",
									"            pm.expect(responseBody.notes.userMessage).to.equal(\"Not authorised\");",
									"        })",
									"    }",
									"    ",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}user/{{NEGinfluencerApprove}}",
							"host": [
								"{{test}}user"
							],
							"path": [
								"{{NEGinfluencerApprove}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TM Add Employee and Delete -- FINAL",
			"item": [
				{
					"name": "TM Login (SSO Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.variables.set(\"totalAuthsSSO\",responseBody.unpaginatedCount);",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auth to Current SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+requestBody.username +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newEmployeeUsername\", requestBody.username);",
									"    pm.variables.set(\"newEmployeeData\", requestBody);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Only SSO managers are authorised to make call\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false);",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"type\":\"manager\",\n    \"username\":\"leanne\",\n\t\"firstName\":\"Leanne\",\n\t\"lastName\":\"Ross\",\n\t\"location\":\"Australia\",\n\t\"number\":\"0400000333\",\n\t\"title\": \"Manager\",\n    \"email\":\"dumbanddummy+leanne@gmail.com\",\n\t\"assignedTo\":[]\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If Auths of SSO have Increased",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have increased by one\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\"))+1 );",
									"    })",
									"",
									"    pm.test(\"Added employee is part of SSO\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))  ).to.equal(true);",
									"    });",
									"    //if user was found then validate if it contains the same data requested in POST call",
									"    if(userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))==true)",
									"    {",
									"        pm.test(\"Employee details are correct\", function(){",
									"            pm.expect(compareRequestResponse(responseBody.object, pm.variables.get(\"newEmployeeData\")))",
									"        })",
									"    }",
									"",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username==username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables.set(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+1); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"// The user object returned should match the requested user object if call is successfull",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Successfully deleted user with authId'\" + pm.request.url.path[4]+ \"' \");",
									"    ",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    pm.test(\"Unsuccessful for given username '\"+pm.request.url.path[4]+\"'. \"+responseBody.notes.userMessage, function(){",
									"        pm.expect(responseBody.object).to.equal(null);",
									"    })",
									"    pm.test(\"Status is \" + pm.response.code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/users/{{newEmployeeAuthId}}",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"users",
								"{{newEmployeeAuthId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have decreased by one\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\")) );",
									"    })",
									"",
									"    pm.test(\"Added employee is not part of SSO\", function(){",
									"        pm.expect(userExist(responseBody.object, pm.variables.get(\"newEmployeeUsername\"))).to.equal(false);",
									"    })",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username===username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have increased by one, total is now \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")+2); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEG Add Employee (Existing email)",
			"item": [
				{
					"name": "TM Login (SSO Manager)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "a.hypetap+cmc@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Total Auths of SSO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.variables.set(\"totalAuthsSSO\",responseBody.unpaginatedCount);",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200.  Total notifications for \" +responseBody.session.authUser+\" : \"+responseBody.unpaginatedCount , function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    pm.variables.set(\"totalNotifications\", responseBody.unpaginatedCount);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auth With Existing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestBody = JSON.parse(pm.request.body.raw);",
									"var responseBody = pm.response.json();",
									"",
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. \"+ \"Added \"+requestBody.username +\" to current SSO \", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //save returned username to use in other calls",
									"    pm.variables.set(\"newEmployeeUsername\", requestBody.username);",
									"    pm.variables.set(\"newEmployeeData\", requestBody);",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400. userMessage: \" +responseBody.notes.userMessage);",
									"}",
									"else if(pm.response.code==403)",
									"{",
									"    pm.test(\"Status 403. Only SSO managers are authorised to make call\", function(){",
									"        pm.expect(responseBody.notes.manager).to.equal(false);",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"type\":\"manager\",\n    \"username\":\"leanne\",\n\t\"firstName\":\"Leanne\",\n\t\"lastName\":\"Ross\",\n\t\"location\":\"Australia44\",\n\t\"number\":\"0400000333\",\n\t\"title\": \" \",\n    \"email\":\"dumbanddummy1+brooke@gmail.com\",\n\t\"assignedTo\":[]\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{test}}sso/manage/add/auth",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"add",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check If Auths of SSO have Increased",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200. Returns \"+responseBody.unpaginatedCount+\" objects for user '\"+responseBody.session.authUser+\"'\");",
									"",
									"    pm.test(\"Auths have not increased\", function(){",
									"        pm.expect(responseBody.unpaginatedCount ).to.equal( (pm.variables.get(\"totalAuthsSSO\")) );",
									"    })",
									"",
									"    pm.test(\"Employee was not added to SSO\", function(){",
									"        pm.expect( userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))  ).to.equal(false);",
									"    });",
									"    //if user was found then validate if it contains the same data requested in POST call",
									"    if(userExist(responseBody.object, (pm.variables.get(\"newEmployeeUsername\")))==true)",
									"    {",
									"        pm.test(\"Employee details are correct\", function(){",
									"            pm.expect(compareRequestResponse(responseBody.object, pm.variables.get(\"newEmployeeData\")))",
									"        })",
									"    }",
									"",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"",
									"//---------Functions",
									"",
									"",
									"function userExist(list, username)",
									"{",
									"    for(let i =0; i<list.length; ++i)",
									"    {",
									"        if(list[i].username==username)",
									"        {",
									"            //saves id for DELETE call",
									"            pm.variables.set(\"newEmployeeAuthId\", list[i].id);",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}",
									"",
									"//request represent changes made in PUT call",
									"function compareRequestResponse(request, response)",
									"{",
									"",
									"    for(let i=0; i< request.length; ++i)   ",
									"    {",
									"",
									"        //username is required for PUT call to work so can always use username to find right object",
									"        if(request[i].username==response.username)",
									"        {",
									"               ",
									"            //undifined means it was not given in request and should not be compared to response",
									"            if(request[i].lastName != undefined && request[i].lastName!=response.lastName)   //if true - given in request but not matching response",
									"            {",
									"               return false;",
									"            }",
									"            else if(request[i].firstName != undefined && request[i].firstName!=response.firstName)   //if true - given in request but not matching response",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].email != undefined && request[i].email!=response.email)",
									"            {",
									"                return false;",
									"            }",
									"            else if(request[i].number != undefined && request[i].number!=response.number)   //if true- given in request but not matching response",
									"            {",
									"                return false;",
									"            }          ",
									"",
									"        }",
									"    }",
									"    return true;    //got here means everything matches from request, has been updated",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}sso/manage/auths?pageStart=1&pageEnd=100",
							"host": [
								"{{test}}sso"
							],
							"path": [
								"manage",
								"auths"
							],
							"query": [
								{
									"key": "pageStart",
									"value": "1"
								},
								{
									"key": "pageEnd",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    // Checks that 200 is returned ",
									"    pm.test(\"Status code is 200 for \"+ responseBody.session.authUser, function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    //If user was added to auth successfuly then a notification should have been sent",
									"    pm.test(\"Notifications have not increased. Total is still  \" + responseBody.unpaginatedCount, function(){",
									"        pm.expect(responseBody.unpaginatedCount).to.equal( pm.variables.get(\"totalNotifications\")); ",
									"    })",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}user/notification/list",
							"host": [
								"{{test}}user"
							],
							"path": [
								"notification",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET Calls",
			"item": [
				{
					"name": "BOSS Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "dumbanddummy1+brooke@gmail.com",
									"description": "dumbanddummy1+brooke@gmail.com, a.hypetap+dj@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hypetap1",
									"type": "text"
								},
								{
									"key": "remember-me",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{test}}login",
							"host": [
								"{{test}}login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lists Managers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200\");",
									"",
									"    pm.test(\"Returned users all have a manager object and profileStatus 'manager' \", function(){",
									"        pm.expect(allManagers(responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    // Tm needs to have firstName, lastName, email to be valid",
									"    pm.test(\"Returned users all have required fields of a manager\", function(){",
									"        pm.expect( containRequiredFields(responseBody.object) ).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\");",
									"",
									"    if(responseBody.notes.userMessage)",
									"    {",
									"        pm.test(\"userMessage \"+responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code ==403)",
									"{",
									"    pm.test(\"Not authorised, call only allowed for Hypetap employees\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"",
									"//-------Functions",
									"//check if manager obj exist and if they have profileStatus manager",
									"function allManagers(list)",
									"{",
									"    for(let i; i<list.length; ++i)",
									"    {",
									"        if(list[i].manager==undefined || list[i].manager==null )",
									"        {",
									"            return false;",
									"        }",
									"",
									"        if(list[i].profileStatus!=\"manager\")",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//will return false if field is not found or if they only conmatin white space",
									"function containRequiredFields(list)",
									"{ ",
									"    var notOnlySpace = (/\\S/);",
									"    for( i=0; i<list.length; ++i)",
									"    {",
									"        //if field is not present or if it only contain white space the the data is faulty/bad",
									"        if( (list[i].firstName ==undefined) || ( notOnlySpace.test(list[i].firstName) ==false) )",
									"        {",
									"",
									"            return false",
									"        }",
									"        else if( (list[i].lastName ==undefined) || ( notOnlySpace.test(list[i].lastName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (list[i].manager.location ==undefined) || ( notOnlySpace.test(list[i].manager.location) ==false) )",
									"        {",
									"            return false",
									"        }      ",
									"        ",
									"    }",
									"    return true;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager/list",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Manger by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200 returns requested user object for \"+pm.request.url.path[2], function(){",
									"        pm.expect(responseBody.object.username).to.equal(pm.request.url.path[2]);",
									"    });",
									"",
									"    pm.test(\"Returned user have a manager object and profileStatus \"+ responseBody.object.profileStatus, function(){",
									"        pm.expect(responseBody.object.profileStatus).to.be.oneOf([\"manager\", \"pendingmanager\"]);",
									"",
									"    })",
									"",
									"    // Tm needs to have firstName, lastName, email to be valid",
									"    pm.test(\"Returned user have required fields of a manager\", function(){",
									"        pm.expect( containRequiredFields(responseBody.object) ).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\");",
									"",
									"    if(responseBody.notes.userMessage)",
									"    {",
									"        pm.test(\"userMessage \"+responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code ==403)",
									"{",
									"    pm.test(\"Not authorised, call only allowed for Hypetap employees\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"else if (pm.response.code==404)",
									"{",
									"    pm.test(\"Status 404. Make sure given username exist \")",
									"}",
									"",
									"",
									"//-------Functions",
									"",
									"",
									"//will return false if field is not found or if they only conmatin white space",
									"function containRequiredFields(user)",
									"{ ",
									"    var notOnlySpace = (/\\S/);",
									"    //if field is not present or if it only contain white space the the data is faulty/bad",
									"        if( (user.firstName ==undefined) || ( notOnlySpace.test(user.firstName) ==false) )",
									"        {",
									"",
									"            return false",
									"        }",
									"        else if( (user.lastName ==undefined) || ( notOnlySpace.test(user.lastName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (user.manager.location ==undefined) || ( notOnlySpace.test(user.manager.location) ==false) )",
									"        {",
									"            return false",
									"        }         ",
									"    return true;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager/rachelwest",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"rachelwest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TM's Active Influencers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//returns all creators, which current session user have access to,  with the profileStatus \"influencer\"",
									"",
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200, returns influencers under tm \"+ pm.request.url.path[2]);",
									"",
									"    pm.test(\"Returned users all have an inluencer object and profileStatus 'influencer' \", function(){",
									"        pm.expect(allInfluencers(responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    // influencer needs to have username, firstName, lastName and one social channel",
									"    pm.test(\"Returned users all have required fields of an influencer\", function(){",
									"        pm.expect( containRequiredFields(responseBody.object) ).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\");",
									"",
									"    if(responseBody.notes.userMessage)",
									"    {",
									"        pm.test(\"userMessage \"+responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code ==403)",
									"{",
									"    pm.test(\"Not authorised, call only allowed for Hypetap employees\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"",
									"//-------Functions",
									"//check if manager obj exist and if they have profileStatus manager",
									"function allInfluencers(list)",
									"{",
									"    for(let i; i<list.length; ++i)",
									"    {",
									"        if(list[i].influencer==undefined || list[i].influencer==null )",
									"        {",
									"            return false;",
									"        }",
									"        else if(list[i].profileStatus!=\"influencer\")",
									"        {",
									"            return false;",
									"        }",
									"        // Check that at least one social channel is given",
									"        else if((list[i].influencer.instagramProfile==null) && (list[i].influencer.facebookProfile==null) && ",
									"                (list[i].influencer.twitterProfile==null) && (list[i].influencer.youtubeProfile==null) && (list[i].influencer.tiktokProfile==null) )",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//will return false if field is not found or if they only conmatin white space",
									"function containRequiredFields(list)",
									"{ ",
									"    var notOnlySpace = (/\\S/);",
									"    for( i=0; i<list.length; ++i)",
									"    {",
									"        //if field is not present or if it only contain white space the the data is faulty/bad",
									"        if( (list[i].firstName ==undefined) || ( notOnlySpace.test(list[i].firstName) ==false) )",
									"        {",
									"",
									"            return false",
									"        }",
									"        else if( (list[i].lastName ==undefined) || ( notOnlySpace.test(list[i].lastName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (list[i].username ==undefined) || ( notOnlySpace.test(list[i].username) ==false) )",
									"        {",
									"            return false",
									"        }      ",
									"        ",
									"    }",
									"    return true;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager/lindatest1/active",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"lindatest1",
								"active"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get TM's Pending Influencers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns pendinginfluencer under tm\" + pm.request.url.path[2]);",
									"",
									"    pm.test(\"Returned users all have an inluencer object and profileStatus 'pendinginfluencer' \", function(){",
									"        pm.expect(allInfluencers(responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    // pendinginfluencer needs to have username, firstName, lastName and one social channel",
									"    pm.test(\"Returned users all have required fields of a pendinginfluencer\", function(){",
									"        pm.expect( containRequiredFields(responseBody.object) ).to.equal(true);",
									"    })",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\");",
									"",
									"    if(responseBody.notes.userMessage)",
									"    {",
									"        pm.test(\"userMessage \"+responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code ==403)",
									"{",
									"    pm.test(\"Not authorised, call only allowed for Hypetap employees\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"",
									"//-------Functions",
									"//check if manager obj exist and if they have profileStatus manager",
									"function allInfluencers(list)",
									"{",
									"    for(let i; i<list.length; ++i)",
									"    {",
									"        if(list[i].influencer==undefined || list[i].influencer==null )",
									"        {",
									"            return false;",
									"        }",
									"        else if(list[i].profileStatus!=\"pendinginfluencer\")",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//will return false if field is not found or if they only conmatin white space",
									"function containRequiredFields(list)",
									"{ ",
									"    var notOnlySpace = (/\\S/);",
									"    for( i=0; i<list.length; ++i)",
									"    {",
									"        //if field is not present or if it only contain white space the the data is faulty/bad",
									"        if( (list[i].firstName ==undefined) || ( notOnlySpace.test(list[i].firstName) ==false) )",
									"        {",
									"",
									"            return false",
									"        }",
									"        else if( (list[i].lastName ==undefined) || ( notOnlySpace.test(list[i].lastName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (list[i].username ==undefined) || ( notOnlySpace.test(list[i].username) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        // Check that at least one social channel is given",
									"        else if((list[i].influencer.instagramProfile==null) && (list[i].influencer.facebookProfile==null) && ",
									"                (list[i].influencer.twitterProfile==null) && (list[i].influencer.youtubeProfile==null) && (list[i].influencer.tiktokProfile==null) )",
									"        {",
									"            return false;",
									"        }      ",
									"        ",
									"    }",
									"    return true;",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager/rachelwest/pending",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"rachelwest",
								"pending"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Pending Influencers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();",
									"",
									"if(pm.response.code==200)",
									"{",
									"    pm.test(\"Status code is 200. Returns pendinginfluencers\" );",
									"",
									"    pm.test(\"Returned users all have an influencer object and profileStatus 'pendinginfluencer' \", function(){",
									"        pm.expect(allPendingInfluencers(responseBody.object)).to.equal(true);",
									"    })",
									"",
									"    // pendinginfluencer needs to have username, firstName, lastName and one social channel",
									"    pm.test(\"Returned users all have required fields of a pendinginfluencer\", function(){",
									"        pm.expect( containRequiredFields(responseBody.object) ).to.equal(true);",
									"    })",
									"",
									"    //Checks if any filter options given is not found in response",
									"    //all pending influencers should be managed by same company if a talent manager is given.",
									"    // The name of the tm is not displayed in response so using company name to validate instead",
									"        pm.test(\"Filter options are working\", function(){",
									"        pm.expect(responseContainsSearch(responseBody.object.content, ",
									"                                                responseBody.object.content[0].body.managedBy.company,",
									"                                                pm.request.url.query.toObject().keyword, ",
									"                                                pm.request.url.query.toObject().gender, ",
									"                                                pm.request.url.query.toObject().city,",
									"                                                pm.request.url.query.toObject().country,                                                ",
									"                                                pm.request.url.query.toObject().platform, ",
									"                                                pm.request.url.query.toObject().minFollowing, ",
									"                                                pm.request.url.query.toObject().maxFollowing, ",
									"                                                pm.request.url.query.toObject().businessVerified)).to.equal(true);",
									"    });",
									"",
									"",
									"",
									"}",
									"else if(pm.response.code==400)",
									"{",
									"    pm.test(\"Status 400\");",
									"",
									"    if(responseBody.notes.userMessage)",
									"    {",
									"        pm.test(\"userMessage \"+responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if(pm.response.code ==403)",
									"{",
									"    pm.test(\"Not authorised, call only allowed for Hypetap employees\", function(){",
									"        pm.expect(responseBody.notes.hypetap).to.equal(false);",
									"    })",
									"}",
									"",
									"",
									"//-------Functions",
									"",
									"//check if manager obj exist and if they have profileStatus manager",
									"function allPendingInfluencers(list)",
									"{",
									"    for(let i; i<list.length; ++i)",
									"    {",
									"        if(list[i].influencer==undefined || list[i].influencer==null )",
									"        {",
									"            return false;",
									"        }",
									"        else if(list[i].profileStatus!=\"pendinginfluencer\")",
									"        {",
									"            return false;",
									"        }",
									"    }",
									"    return true;",
									"}",
									"",
									"//will return false if field is not found or if they only conmatin white space",
									"function containRequiredFields(list)",
									"{ ",
									"    var notOnlySpace = (/\\S/);",
									"    for( i=0; i<list.length; ++i)",
									"    {",
									"        //if field is not present or if it only contain white space the the data is faulty/bad",
									"        if( (list[i].firstName ==undefined) || ( notOnlySpace.test(list[i].firstName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (list[i].lastName ==undefined) || ( notOnlySpace.test(list[i].lastName) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        else if( (list[i].username ==undefined) || ( notOnlySpace.test(list[i].username) ==false) )",
									"        {",
									"            return false",
									"        }",
									"        // Check that at least one social channel is given",
									"        else if((list[i].influencer.instagramProfile==null) && (list[i].influencer.facebookProfile==null) && ",
									"                (list[i].influencer.twitterProfile==null) && (list[i].influencer.youtubeProfile==null) && (list[i].influencer.tiktokProfile==null) )",
									"        {",
									"            return false;",
									"        }    ",
									"    }",
									"    return true;",
									"}",
									"",
									"",
									"//need check platform name",
									"function keywordSearch(user, keyword)",
									"{",
									"    var regexKeyword = new RegExp('.*['+ keyword +'].*');",
									"    // search function will return -1 if no match",
									"        if(regexKeyword.test(user.firstName)==false && ",
									"        regexKeyword.test(user.lastName)==false &&",
									"        regexKeyword.test(user.username)==false &&",
									"        regexKeyword.test(user.displayName)==false &&",
									"        (user.influencer.facebookProfile!=undefined&& regexKeyword.test(user.influencer.facebookProfile.username)==false)&&",
									"        (user.influencer.instagramProfile!=undefined&& regexKeyword.test(user.influencer.instagramProfile.username)==false) &&",
									"        (user.influencer.youtubeProfile!=undefined&& regexKeyword.test(user.influencer.youtube.username)==false) &&",
									"        (user.influencer.twitterProfile!=undefined&& regexKeyword.test(user.influencer.twitterProfile.username)==false) && ",
									"        (user.influencer.tiktokProfile!=undefined&& regexKeyword.test(user.influencer.tiktokProfile.username)==false) &&",
									"        (user.influencer.blogProfile!=undefined&& regexKeyword.test(user.influencer.blogProfile.username)==false) &&",
									"        (user.influencer.pinterestProfile!=undefined&& regexKeyword.test(user.influencer.pinterestProfile.username)==false) )",
									"        {",
									"            return false;",
									"        }",
									"        return true; ",
									"   }",
									"",
									"//returns false if any given field is not found in response",
									"function responseContainsSearch(list, company ,keyword, gender, city, country, platform, minFollowing, maxFollowing, businessVerified) ",
									"{",
									"",
									"    for (let i = 0; i < list.length; ++i) ",
									"    {",
									"        //returns false if any influencer is under a different company to the rest",
									"        if((pm.request.url.query.toObject().talentManager!=undefined) && (list[i].body.managedBy.company!==company))",
									"        {",
									"            return false;",
									"        }",
									"        //undefined if not given in request, keyword:\"\" in test data to not have to adjust parameters for each call if used",
									"        if (keyword != undefined && (keywordSearch(list[i].body, keyword)==false ) )  ",
									"        {",
									"            return false;   //returns false if no match",
									"        }",
									"        if ( (city != undefined) ) ",
									"        {",
									"            city =city.replace(/((%20(\\(.*?\\))))/g, \"\"); //removes %20(Australia) from input",
									"            city =city.replace(/((,%20)|(%20)|(,))/g, \"|\")   //adds | a or where ,20% or 20% is found, result-> Melbourne|Sydney",
									"            var regexCity= new RegExp(city);",
									"",
									"            if( regexCity.test(list[i].body.influencer.currentLocation) !=true)",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"        if ( (country != undefined) ) ",
									"        {",
									"            country=country.replace(/(%20)/g,\" \")",
									"            //country can be a list so easier to check if country found in each user is found in given input list ",
									"            userCountry=list[i].body.influencer.currentLocation.replace(/(.*(\\())/,\"\");",
									"            userCountry=userCountry.replace(/\\)/,\"\");",
									"            var regexCountry= new RegExp(userCountry);",
									"",
									"            if(regexCountry.test(country) !=true)   ",
									"            {",
									"                return false;",
									"            }",
									"        }",
									"            if (platform != undefined) ",
									"            {",
									"                if (platform == \"FACEBOOK\")",
									"                {",
									"                    //if we filter on FACEBOOk then facebook should not be empty as we only wanna show influencer with a fb account",
									"                    if(list[i].body.influencer.facebookProfile == null ) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.facebookProfile.followers < minFollowing) ",
									"                            { ",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.facebookProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }                ",
									"                else if (platform == \"INSTAGRAM\" ) ",
									"                {",
									"                    ",
									"                    //if we filter on instagra then socialUrls.facebook should not be empty as we only wanna show influencer with a insta account",
									"                    if(list[i].body.influencer.instagramProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only check for insta",
									"                        if (businessVerified != undefined && (list[i].body.influencer.instagramProfile.businessVerified!==Boolean(businessVerified))) ",
									"                        {",
									"                            return false;",
									"                        }",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.instagramProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.instagramProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }  ",
									"                }",
									"                else if (platform == \"TWITTER\") ",
									"                {",
									"                    if(list[i].body.influencer.twitterProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined && minFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.influencer.twitterProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined && maxFollowing!=\"\") ",
									"                        {",
									"                            if(list[i].body.influencer.twitterProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"YOUTUBE\")",
									"                {",
									"                     if(list[i].body.influencer.youtubeProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.youtubeProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.youtubeProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"PINTEREST\")",
									"                {",
									"                    if(list[i].body.influencer.pinterestProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.pinterestProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.pinterestProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"                else if(platform==\"BLOG\")",
									"                {",
									"                    if(list[i].body.influencer.blogProfile == null) ",
									"                    {",
									"                        return false;",
									"                    }",
									"                    else",
									"                    {",
									"                        //only filtered on if a platform is given",
									"                        if (minFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.blogProfile.followers < minFollowing) ",
									"                            {",
									"                                return false;",
									"                            }",
									"                        }",
									"                        if (maxFollowing != undefined) ",
									"                        {",
									"                            if(list[i].body.influencer.blogProfile.followers > maxFollowing) ",
									"                            {",
									"                               return false;",
									"                            }",
									"                        }",
									"                    }   ",
									"                }",
									"            }",
									"            if (gender != undefined) ",
									"            {",
									"                if(list[i].body.influencer.gender!=gender)",
									"                {",
									"                    return false;",
									"                }",
									"            }",
									"    }",
									"    return true;",
									"}",
									"",
									"   ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager/pending?page=0&size=10000&city=Melbourne%20(Australia)&country=Australia&businessVerified=true",
							"host": [
								"{{test}}manager"
							],
							"path": [
								"pending"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10000"
								},
								{
									"key": "sort",
									"value": "dateCreated%2CDESC",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Melbourne%20(Australia)"
								},
								{
									"key": "country",
									"value": "Australia"
								},
								{
									"key": "talentManager",
									"value": "cliaremclennan1",
									"disabled": true
								},
								{
									"key": "maxFollowing",
									"value": "500000",
									"disabled": true
								},
								{
									"key": "minFollowing",
									"value": "0",
									"disabled": true
								},
								{
									"key": "platform",
									"value": "YOUTUBE",
									"disabled": true
								},
								{
									"key": "businessVerified",
									"value": "true"
								},
								{
									"key": "sort",
									"value": "displayName%2CASC",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find TM by RecallToken  (uses confirmAuthentication token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"if(pm.response.code==200)",
									"{",
									"    var responseBody = pm.response.json();",
									"    pm.test(\"Status 200. Returned user with firstName: \" + responseBody.object.firstName+",
									"                                           \", lastName: \" +responseBody.object.lastName+",
									"                                           \" and email: \" +responseBody.object.email)",
									"}",
									"else if(pm.response.code ==400)",
									"{",
									"    if(responseBody.notes.userMessage!=undefined)",
									"    {",
									"        pm.test(\"Status 400. userMessage: \"+ responseBody.notes.userMessage)",
									"    }",
									"}",
									"else if (pm.response.code==401)",
									"{",
									"    pm.test(\"Status code is 401, unauthenticated\");",
									"}",
									"else if(pm.response.code==404)",
									"{",
									"    pm.test(\"confirmAuthentication token not found\")",
									"}",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{test}}manager?recallToken=c50379f1-60b9-414b-b645-c03fcaf024f9-02944b4a-e070-4350-a446-b217ec3b7c16",
							"host": [
								"{{test}}manager"
							],
							"query": [
								{
									"key": "recallToken",
									"value": "c50379f1-60b9-414b-b645-c03fcaf024f9-02944b4a-e070-4350-a446-b217ec3b7c16"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"timeSoFar=parseInt(pm.variables.get(\"accumulateResponseTime\"));",
					"newTime = timeSoFar+pm.response.responseTime;",
					"",
					"pm.variables.set(\"accumulateResponseTime\", newTime);",
					"pm.test(\"Accumulative Response Time: \"+ pm.variables.get(\"accumulateResponseTime\")+\"ms\");",
					"",
					"if(pm.response.code==200)",
					"{",
					"    //Will only run validation test if call has a request body in mode \"raw\"",
					"    if( pm.request.method!=\"GET\" && pm.request.body!=undefined && pm.request.body.mode==\"raw\")",
					"    {  ",
					"        //language add for list in object key func.",
					"",
					"        var request = JSON.parse(pm.request.body.raw);",
					"        convertedRequest = {};",
					"        obj(request,\"t\");",
					"        //console.log(\"new\",convertedRequest)",
					"",
					"        var containDigits= /\\d{1,}/;",
					"        var notOnlySpace = (/\\S/);",
					"",
					"        var validName =/^([A-Z])[a-z'-]{2,30}$/;   //has to be 2-30 characters, doesn't allow space",
					"        var validUsername= /^[a-z0-9_]*$/;   //from backend",
					"        var validEmail =/\\.*\\@([[A-Za-z0-9_\\-])+\\./; //have existing func. in backend",
					"        var validPhoneNum = /^[0-9+-]{1,}$/;   // numbers only and - +",
					"",
					"",
					"        //location",
					"        // example Stockholm (Sweden), need to be allow space",
					"        if(convertedRequest.location!=undefined)",
					"        {",
					"            pm.test(\"Valid location\", function(){",
					"                pm.expect(containDigits.test(convertedRequest.location)).to.equal(false);",
					"                pm.expect(notOnlySpace.test(convertedRequest.location)).to.equal(true);",
					"            })",
					"        }",
					"",
					"        //type agency or manager",
					"        if(convertedRequest.type!=undefined)",
					"        {",
					"            pm.test(\"Valid type\", function(){",
					"                pm.expect(convertedRequest.type).to.be.oneOf([\"agency\", \"manager\"])",
					"            })",
					"        }",
					"",
					"        //title",
					"        if(convertedRequest.title!=undefined)",
					"        {",
					"            pm.test(\"Valid title\", function(){",
					"                pm.expect(convertedRequest.title).to.not.be.oneOf([\"\", null])",
					"                pm.expect(notOnlySpace.test(convertedRequest.title)).to.equal(true);    //not only spaces",
					"            })",
					"        }",
					"",
					"        //first name",
					"        if(convertedRequest.firstName!=undefined)",
					"        {",
					"            pm.test(\"First name is valid\", function(){",
					"                pm.expect((validName.test(convertedRequest.firstName))).to.equal(true);",
					"            });",
					"        }",
					"        //last name",
					"        if(convertedRequest.lastName!=undefined)",
					"        {",
					"            pm.test(\"Last name is valid\", function(){",
					"                pm.expect(validName.test(convertedRequest.lastName)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        //username",
					"        if(convertedRequest.username!=undefined)",
					"        {",
					"            pm.test(\"Username is valid\", function(){",
					"                pm.expect(validUsername.test(convertedRequest.username)).to.equal(true);",
					"            });",
					"        }",
					"",
					"        //number",
					"        if(convertedRequest.number!=undefined)",
					"        {",
					"            pm.test(\"number is valid\", function(){",
					"            pm.expect(validPhoneNum.test(convertedRequest.number)).to.equal(true);",
					"            });",
					"        }",
					"",
					"",
					"        //email",
					"        if(convertedRequest.email!=undefined)",
					"        {",
					"            pm.test(\"Email is valid\", function(){",
					"            pm.expect(validEmail.test(convertedRequest.email)).to.equal(true);",
					"            });",
					"        }",
					"",
					"",
					"        ",
					"    }",
					"",
					"}",
					"",
					"//------------------Functions",
					"",
					"function obj(object,root)",
					"{    ",
					"    Object.entries(object).forEach((entry) => {",
					"    const [key, value] = entry;",
					"",
					"        //to avoid function from failing due to null values",
					"        if(value!=null)",
					"        {",
					"            if(typeof value === \"object\")",
					"            {",
					"                root=key;",
					"                obj(value,root);",
					"            }",
					"            else",
					"            {",
					"                //to stop function from overwriting fileds with same name, (ex username)",
					"                if(convertedRequest.hasOwnProperty(key)==true)  //new test",
					"                {",
					"                    convertedRequest[root+key]= value;  //+\".\"+",
					"                }",
					"                else",
					"                {",
					"                    convertedRequest[key]= value;",
					"                }",
					"",
					"            }",
					"        } ",
					"    });",
					"    ",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "influencerReject",
			"value": "ourperthreno"
		},
		{
			"key": "influencerApprove",
			"value": "tyong"
		},
		{
			"key": "NEGinfluencerApprove",
			"value": "jessalizzi"
		},
		{
			"key": "accumulateResponseTime",
			"value": "0"
		}
	]
}